{"task_id": "df.merge/semantic_000", "prompt": "Combine two pandas DataFrames using a shared key column.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_001", "prompt": "Join two DataFrames in pandas based on a common column.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_002", "prompt": "Perform a merge operation on two pandas DataFrames using a matching key.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_003", "prompt": "Merge two DataFrames by aligning rows with identical keys.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_004", "prompt": "Use pandas to concatenate two DataFrames along a common key column.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_005", "prompt": "Inner join two pandas DataFrames on a shared identifier.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_006", "prompt": "Link two DataFrames in pandas by merging them on a mutual key.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_007", "prompt": "Combine two DataFrames by matching values in a key column.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_008", "prompt": "Execute a DataFrame merge in pandas using a common field.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/semantic_009", "prompt": "Align and merge two pandas DataFrames based on a shared column.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.groupby/semantic_000", "prompt": "Compute the average after grouping a DataFrame by a specific column.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_001", "prompt": "Group the DataFrame by a column and calculate the mean values.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_002", "prompt": "Aggregate a DataFrame by a column and find the mean.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_003", "prompt": "Calculate the mean for each group after grouping a DataFrame by a column.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_004", "prompt": "Summarize a DataFrame by a column using the mean.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_005", "prompt": "Split a DataFrame by a column and compute the average for each group.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_006", "prompt": "Apply the mean function to a DataFrame grouped by a column.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_007", "prompt": "Perform a group-by operation on a DataFrame and derive the mean.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_008", "prompt": "Group rows in a DataFrame by a column and determine the mean.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/semantic_009", "prompt": "Use the group-by method on a DataFrame and compute the mean values.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.pivot/semantic_000", "prompt": "Transform a DataFrame into a pivoted layout with specified index and columns.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_001", "prompt": "Reshape a DataFrame by setting new index and column labels using pivot.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_002", "prompt": "Use the pivot function to reorganize a DataFrame with custom index and columns.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_003", "prompt": "Convert a DataFrame into a pivot table with designated index and column fields.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_004", "prompt": "Rearrange a DataFrame by pivoting it around new index and column values.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_005", "prompt": "Apply a pivot operation to a DataFrame to redefine its index and columns.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_006", "prompt": "Reconfigure a DataFrame by pivoting it with updated index and column parameters.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_007", "prompt": "Restructure a DataFrame using pivot, assigning new index and column identifiers.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_008", "prompt": "Perform a pivot transformation on a DataFrame to modify its index and columns.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/semantic_009", "prompt": "Flip a DataFrame into a new format with specified index and column mappings.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.apply/semantic_000", "prompt": "Execute a function on every row in a DataFrame.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_001", "prompt": "Perform a function operation for each row in the DataFrame.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_002", "prompt": "Iterate over each row in the DataFrame and apply a function.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_003", "prompt": "Use a function to process every row of the DataFrame.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_004", "prompt": "Map a function across all rows of the DataFrame.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_005", "prompt": "For each row in the DataFrame, run a specified function.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_006", "prompt": "Apply a custom function row-wise to the DataFrame.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_007", "prompt": "Process the DataFrame row by row using a given function.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_008", "prompt": "Transform each row in the DataFrame by applying a function.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/semantic_009", "prompt": "Evaluate a function on every individual row of the DataFrame.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.loc/semantic_000", "prompt": "Filter rows and columns in a DataFrame by their labels.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_001", "prompt": "Extract specific rows and columns from a DataFrame using label-based indexing.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_002", "prompt": "Retrieve selected rows and columns from a DataFrame using their labels.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_003", "prompt": "Use label indexing to pick certain rows and columns in a DataFrame.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_004", "prompt": "Select rows and columns from a DataFrame based on their labels.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_005", "prompt": "Access specific rows and columns in a DataFrame using label references.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_006", "prompt": "Choose particular rows and columns from a DataFrame by label.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_007", "prompt": "Subset a DataFrame by selecting rows and columns with label-based methods.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_008", "prompt": "Isolate specific rows and columns in a DataFrame using their label identifiers.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/semantic_009", "prompt": "Query a DataFrame for designated rows and columns using label criteria.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.dropna/semantic_000", "prompt": "Drop rows containing NaN values from the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_001", "prompt": "Eliminate rows with missing data in the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_002", "prompt": "Remove all rows that have null values in the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_003", "prompt": "Delete rows with any NA values from the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_004", "prompt": "Filter out rows that contain missing values in the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_005", "prompt": "Exclude rows with empty or NaN entries from the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_006", "prompt": "Strip away rows that have any missing values in the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_007", "prompt": "Clean the DataFrame by dropping rows with NaN entries", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_008", "prompt": "Omit rows where any cell is NaN in the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/semantic_009", "prompt": "Discard rows with incomplete data from the DataFrame", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.fillna/semantic_000", "prompt": "Replace NaN values in a DataFrame with a given value.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_001", "prompt": "Substitute missing data in a DataFrame with a specified value.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_002", "prompt": "Fill NA/NaN entries in a DataFrame with a predefined value.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_003", "prompt": "Impute null values in a DataFrame with a chosen value.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_004", "prompt": "Populate empty cells in a DataFrame with a particular value.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_005", "prompt": "Complete missing entries in a DataFrame using a specified replacement.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_006", "prompt": "Set a default value for all missing data points in a DataFrame.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_007", "prompt": "Replace absent values in a DataFrame with a designated value.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_008", "prompt": "Fill DataFrame gaps with a specified constant.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/semantic_009", "prompt": "Use a given value to replace all null entries in a DataFrame.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.sort_values/semantic_000", "prompt": "Arrange a DataFrame based on one or multiple columns.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_001", "prompt": "Order a DataFrame using specified column(s).", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_002", "prompt": "Reorganize a DataFrame by sorting along one or more columns.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_003", "prompt": "Sort the rows of a DataFrame according to one or more column values.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_004", "prompt": "Rearrange a DataFrame in ascending or descending order of selected columns.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_005", "prompt": "Rank a DataFrame by values in one or more columns.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_006", "prompt": "Sort the entries in a DataFrame based on column(s).", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_007", "prompt": "Reorder a DataFrame by sorting one or more columns.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_008", "prompt": "Organize a DataFrame by arranging rows according to column values.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/semantic_009", "prompt": "Apply sorting to a DataFrame using one or more columns as the key.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.query/semantic_000", "prompt": "Select rows from a DataFrame based on a condition.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_001", "prompt": "Extract rows from a DataFrame that meet a specific criteria.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_002", "prompt": "Apply a filter to a DataFrame to retrieve matching rows.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_003", "prompt": "Subset a DataFrame according to a given condition.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_004", "prompt": "Retrieve only the rows in a DataFrame that satisfy a condition.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_005", "prompt": "Use a boolean condition to filter rows in a DataFrame.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_006", "prompt": "Query a DataFrame to get rows that match a certain condition.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_007", "prompt": "Filter out rows in a DataFrame that do not meet a specified condition.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_008", "prompt": "Conditionally select data from a DataFrame.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/semantic_009", "prompt": "Restrict a DataFrame to rows that fulfill a particular requirement.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.duplicated/semantic_000", "prompt": "Find duplicate rows in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_001", "prompt": "Detect duplicated rows in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_002", "prompt": "Locate duplicate entries in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_003", "prompt": "Check for duplicate rows in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_004", "prompt": "Flag repeated rows in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_005", "prompt": "Identify rows with duplicates in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_006", "prompt": "Determine duplicate records in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_007", "prompt": "Extract duplicate rows from a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_008", "prompt": "Search for duplicated rows in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/semantic_009", "prompt": "Return all duplicate rows in a DataFrame", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.value_counts/semantic_000", "prompt": "**Determine the number of distinct values in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_001", "prompt": "**Find the count of unique entries in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_002", "prompt": "**Calculate how many different values exist in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_003", "prompt": "**Get the unique value count for a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_004", "prompt": "**Count the number of non-duplicate values in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_005", "prompt": "**Compute the distinct value count in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_006", "prompt": "**Retrieve the number of unique elements in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_007", "prompt": "**Obtain the count of unique occurrences in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_008", "prompt": "**Identify the total unique values present in a column**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/semantic_009", "prompt": "**Summarize the distinct values in a column by count**", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.astype/semantic_000", "prompt": "Convert the column to a different data type.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_001", "prompt": "Modify the data type of a column.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_002", "prompt": "Alter the column's data type.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_003", "prompt": "Update the column to a new data type.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_004", "prompt": "Cast the column to a different type.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_005", "prompt": "Change the dtype of a column.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_006", "prompt": "Transform the column's data type.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_007", "prompt": "Adjust the column's type to a different one.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_008", "prompt": "Recast the column to another data type.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/semantic_009", "prompt": "Switch the data type of a column.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.replace/semantic_000", "prompt": "Substitute particular values in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_001", "prompt": "Update specific entries within a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_002", "prompt": "Modify certain values in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_003", "prompt": "Replace selected entries in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_004", "prompt": "Change specific elements in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_005", "prompt": "Swap particular values in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_006", "prompt": "Overwrite certain entries in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_007", "prompt": "Alter specific data points in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_008", "prompt": "Exchange designated values in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/semantic_009", "prompt": "Transform specified entries in a column.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.set_index/semantic_000", "prompt": "Make a column the DataFrame's index", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_001", "prompt": "Assign a column to be the index of the DataFrame", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_002", "prompt": "Use a column as the DataFrame's index", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_003", "prompt": "Set the index of the DataFrame to a specific column", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_004", "prompt": "Change the DataFrame's index to a column", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_005", "prompt": "Convert a column into the DataFrame's index", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_006", "prompt": "Designate a column as the index in the DataFrame", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_007", "prompt": "Specify a column as the DataFrame's index", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_008", "prompt": "Update the DataFrame's index using a column", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/semantic_009", "prompt": "Switch the DataFrame's index to a column", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.reset_index/semantic_000", "prompt": "Reset the DataFrame's index.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_001", "prompt": "Restore the default index for the DataFrame.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_002", "prompt": "Clear the current index of the DataFrame.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_003", "prompt": "Reinitialize the DataFrame's index.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_004", "prompt": "Remove the existing index and reset it to the default integer index.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_005", "prompt": "Convert the current index to default sequential numbering.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_006", "prompt": "Drop the current index and create a new default one.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_007", "prompt": "Revert the DataFrame's index to its original state.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_008", "prompt": "Reset the index labels to their default integer values.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/semantic_009", "prompt": "Set the DataFrame's index back to the default range index.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.rename/semantic_000", "prompt": "Change the column names in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_001", "prompt": "Modify the column labels of a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_002", "prompt": "Update the headers of a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_003", "prompt": "Alter the column identifiers in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_004", "prompt": "Adjust the names of columns in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_005", "prompt": "Replace the column titles in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_006", "prompt": "Redefine the column headings in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_007", "prompt": "Transform the column names in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_008", "prompt": "Revise the column naming in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/semantic_009", "prompt": "Reassign the names of columns in a DataFrame", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.isnull/semantic_000", "prompt": "Identify any missing values in the DataFrame.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_001", "prompt": "Detect null or NaN values in the DataFrame.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_002", "prompt": "Find where data is missing in the DataFrame.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_003", "prompt": "Locate NaN entries in the DataFrame.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_004", "prompt": "Check if there are any null values in the DataFrame.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_005", "prompt": "Scan the DataFrame for missing data.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_006", "prompt": "Examine the DataFrame for any absent values.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_007", "prompt": "Determine whether the DataFrame contains missing entries.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_008", "prompt": "Search for NA or NaN values in the DataFrame.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/semantic_009", "prompt": "Verify the presence of missing data in the DataFrame.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.sample/semantic_000", "prompt": "Select a random subset of rows from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_001", "prompt": "Extract random rows from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_002", "prompt": "Get a random sample of records from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_003", "prompt": "Retrieve randomly chosen rows from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_004", "prompt": "Draw a random selection of rows from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_005", "prompt": "Pick random rows from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_006", "prompt": "Generate a random sample of DataFrame rows", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_007", "prompt": "Obtain a random set of rows from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_008", "prompt": "Randomly choose rows from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/semantic_009", "prompt": "Sample rows at random from a DataFrame", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.nunique/semantic_000", "prompt": "Calculate the count of distinct values for each column", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_001", "prompt": "Determine the number of unique entries in every column", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_002", "prompt": "Find how many different values exist per column", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_003", "prompt": "Compute the unique value count for each column", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_004", "prompt": "Get the distinct value tally for all columns", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_005", "prompt": "Count unique elements in each column of the dataframe", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_006", "prompt": "Enumerate the number of non-repeating values per column", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_007", "prompt": "Summarize the unique occurrences in every column", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_008", "prompt": "Identify the count of unique data points for each column", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/semantic_009", "prompt": "Measure the uniqueness of values column-wise", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.to_csv/semantic_000", "prompt": "Save the DataFrame as a CSV file.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_001", "prompt": "Write the DataFrame to a CSV file.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_002", "prompt": "Convert the DataFrame to a CSV file and save it.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_003", "prompt": "Store the DataFrame in a CSV format.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_004", "prompt": "Export the DataFrame data to a comma-separated values file.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_005", "prompt": "Dump the DataFrame into a CSV file.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_006", "prompt": "Generate a CSV file from the DataFrame.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_007", "prompt": "Output the DataFrame to a CSV file.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_008", "prompt": "Serialize the DataFrame to a CSV format.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/semantic_009", "prompt": "Save the contents of the DataFrame in a CSV file.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.from_dict/semantic_000", "prompt": "Generate a DataFrame using a dictionary", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_001", "prompt": "Convert a dictionary into a DataFrame", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_002", "prompt": "Construct a DataFrame from a dict", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_003", "prompt": "Build a pandas DataFrame from a dictionary", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_004", "prompt": "Create a DataFrame with data from a dictionary", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_005", "prompt": "Initialize a DataFrame using dictionary data", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_006", "prompt": "Form a DataFrame by passing a dictionary", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_007", "prompt": "Make a pandas DataFrame from a dict input", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_008", "prompt": "Produce a DataFrame from dictionary values", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/semantic_009", "prompt": "Transform a dictionary into a pandas DataFrame", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.columns/semantic_000", "prompt": "Retrieve the names of the columns in a DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_001", "prompt": "Get the list of column labels from a DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_002", "prompt": "Extract the column headers of a DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_003", "prompt": "Obtain the column names associated with a DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_004", "prompt": "Fetch the labels for all columns in a DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_005", "prompt": "Display the names of the DataFrame's columns.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_006", "prompt": "Return the column titles of a DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_007", "prompt": "List all the column names present in the DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_008", "prompt": "Check what columns are available in the DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/semantic_009", "prompt": "Inspect the column headings of a DataFrame.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.index/semantic_000", "prompt": "Retrieve the index of a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_001", "prompt": "Get the index from a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_002", "prompt": "Obtain the index of a pandas DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_003", "prompt": "Extract the index of a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_004", "prompt": "Return the index of a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_005", "prompt": "Access the DataFrame's index.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_006", "prompt": "Fetch the index of a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_007", "prompt": "Display the index of a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_008", "prompt": "Check the index of a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/semantic_009", "prompt": "View the index of a DataFrame.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.memory_usage/semantic_000", "prompt": "Retrieve the memory consumption of a DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_001", "prompt": "Calculate the memory usage of a pandas DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_002", "prompt": "Determine how much memory a DataFrame occupies.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_003", "prompt": "Fetch the memory footprint of a DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_004", "prompt": "Obtain the amount of memory used by a DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_005", "prompt": "Measure the memory utilization of a DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_006", "prompt": "Check the memory allocation for a given DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_007", "prompt": "Assess the memory requirements of a DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_008", "prompt": "Display the memory usage statistics of a DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/semantic_009", "prompt": "Return the memory consumption details for a DataFrame.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.merge/noise_010", "prompt": "Kindly Combine two pandas DataFrames using a shared key column. in the latest version.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_011", "prompt": "Try to Combine two pandas DataFrames using a shared key column. without using loops.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_012", "prompt": "Kindly Combine two pandas DataFrames using a shared key column. when the data is large.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_013", "prompt": "Try to Join two DataFrames in pandas based on a common column. for better performance.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_014", "prompt": "Kindly Join two DataFrames in pandas based on a common column. in pandas.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_015", "prompt": "Please Join two DataFrames in pandas based on a common column. for better performance.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_016", "prompt": "Try to Perform a merge operation on two pandas DataFrames using a matching key. thanks!", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_017", "prompt": "Please Perform a merge operation on two pandas DataFrames using a matching key. in pandas.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_018", "prompt": "Try to Perform a merge operation on two pandas DataFrames using a matching key. before continuing.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_019", "prompt": "Could you Merge two DataFrames by aligning rows with identical keys. without using loops.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_020", "prompt": "Please Merge two DataFrames by aligning rows with identical keys. before continuing.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_021", "prompt": "In pandas, Merge two DataFrames by aligning rows with identical keys. when the data is large.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_022", "prompt": "Hey, can you Use pandas to concatenate two DataFrames along a common key column. in pandas.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_023", "prompt": "In pandas, Use pandas to concatenate two DataFrames along a common key column. thanks!", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_024", "prompt": "Please Use pandas to concatenate two DataFrames along a common key column. before continuing.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_025", "prompt": "Please Inner join two pandas DataFrames on a shared identifier. thanks!", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_026", "prompt": "Kindly Inner join two pandas DataFrames on a shared identifier. in pandas.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_027", "prompt": "Kindly Inner join two pandas DataFrames on a shared identifier. if you don't mind.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_028", "prompt": "Kindly Link two DataFrames in pandas by merging them on a mutual key. when the data is large.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_029", "prompt": "Try to Link two DataFrames in pandas by merging them on a mutual key. if you don't mind.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_030", "prompt": "Please Link two DataFrames in pandas by merging them on a mutual key. for better performance.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_031", "prompt": "I want to Combine two DataFrames by matching values in a key column. for better performance.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_032", "prompt": "Let's Combine two DataFrames by matching values in a key column. if you don't mind.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_033", "prompt": "Make sure to Combine two DataFrames by matching values in a key column. in pandas.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_034", "prompt": "Make sure to Execute a DataFrame merge in pandas using a common field. in pandas.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_035", "prompt": "Try to Execute a DataFrame merge in pandas using a common field. thanks!", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_036", "prompt": "Try to Execute a DataFrame merge in pandas using a common field. if you don't mind.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_037", "prompt": "Please Align and merge two pandas DataFrames based on a shared column. thanks!", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_038", "prompt": "Could you Align and merge two pandas DataFrames based on a shared column. in the latest version.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.merge/noise_039", "prompt": "Please Align and merge two pandas DataFrames based on a shared column. for better performance.", "canonical_solution": "df1.merge(df2, how='left', on='a')", "api_name": "df.merge"}
{"task_id": "df.groupby/noise_010", "prompt": "Could you Compute the average after grouping a DataFrame by a specific column. without using loops.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_011", "prompt": "In pandas, Compute the average after grouping a DataFrame by a specific column. in pandas.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_012", "prompt": "Try to Compute the average after grouping a DataFrame by a specific column. before continuing.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_013", "prompt": "Make sure to Group the DataFrame by a column and calculate the mean values. in pandas.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_014", "prompt": "Try to Group the DataFrame by a column and calculate the mean values. if you don't mind.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_015", "prompt": "Make sure to Group the DataFrame by a column and calculate the mean values. when the data is large.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_016", "prompt": "Let's Aggregate a DataFrame by a column and find the mean. for better performance.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_017", "prompt": "Let's Aggregate a DataFrame by a column and find the mean. without using loops.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_018", "prompt": "Make sure to Aggregate a DataFrame by a column and find the mean. when the data is large.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_019", "prompt": "Just go ahead and Calculate the mean for each group after grouping a DataFrame by a column. in pandas.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_020", "prompt": "Kindly Calculate the mean for each group after grouping a DataFrame by a column. when the data is large.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_021", "prompt": "I want to Calculate the mean for each group after grouping a DataFrame by a column. in pandas.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_022", "prompt": "Just go ahead and Summarize a DataFrame by a column using the mean. as soon as possible.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_023", "prompt": "I want to Summarize a DataFrame by a column using the mean. as soon as possible.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_024", "prompt": "Could you Summarize a DataFrame by a column using the mean. before continuing.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_025", "prompt": "Try to Split a DataFrame by a column and compute the average for each group. in pandas.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_026", "prompt": "Let's Split a DataFrame by a column and compute the average for each group. before continuing.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_027", "prompt": "Could you Split a DataFrame by a column and compute the average for each group. thanks!", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_028", "prompt": "Kindly Apply the mean function to a DataFrame grouped by a column. without using loops.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_029", "prompt": "Could you Apply the mean function to a DataFrame grouped by a column. in pandas.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_030", "prompt": "Please Apply the mean function to a DataFrame grouped by a column. if you don't mind.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_031", "prompt": "Let's Perform a group-by operation on a DataFrame and derive the mean. if you don't mind.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_032", "prompt": "Please Perform a group-by operation on a DataFrame and derive the mean. as soon as possible.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_033", "prompt": "Let's Perform a group-by operation on a DataFrame and derive the mean. before continuing.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_034", "prompt": "Hey, can you Group rows in a DataFrame by a column and determine the mean. thanks!", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_035", "prompt": "Hey, can you Group rows in a DataFrame by a column and determine the mean. in the latest version.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_036", "prompt": "I want to Group rows in a DataFrame by a column and determine the mean. when the data is large.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_037", "prompt": "Let's Use the group-by method on a DataFrame and compute the mean values. in the latest version.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_038", "prompt": "Try to Use the group-by method on a DataFrame and compute the mean values. without using loops.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.groupby/noise_039", "prompt": "You should Use the group-by method on a DataFrame and compute the mean values. for better performance.", "canonical_solution": "df.groupby(by=\"a\").sum()", "api_name": "df.groupby"}
{"task_id": "df.pivot/noise_010", "prompt": "In pandas, Transform a DataFrame into a pivoted layout with specified index and columns. in pandas.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_011", "prompt": "In pandas, Transform a DataFrame into a pivoted layout with specified index and columns. before continuing.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_012", "prompt": "Try to Transform a DataFrame into a pivoted layout with specified index and columns. for better performance.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_013", "prompt": "Let's Reshape a DataFrame by setting new index and column labels using pivot. in pandas.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_014", "prompt": "I want to Reshape a DataFrame by setting new index and column labels using pivot. in the latest version.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_015", "prompt": "Try to Reshape a DataFrame by setting new index and column labels using pivot. in pandas.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_016", "prompt": "Just go ahead and Use the pivot function to reorganize a DataFrame with custom index and columns. without using loops.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_017", "prompt": "In pandas, Use the pivot function to reorganize a DataFrame with custom index and columns. as soon as possible.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_018", "prompt": "In pandas, Use the pivot function to reorganize a DataFrame with custom index and columns. before continuing.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_019", "prompt": "Make sure to Convert a DataFrame into a pivot table with designated index and column fields. thanks!", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_020", "prompt": "I want to Convert a DataFrame into a pivot table with designated index and column fields. in the latest version.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_021", "prompt": "Could you Convert a DataFrame into a pivot table with designated index and column fields. thanks!", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_022", "prompt": "Try to Rearrange a DataFrame by pivoting it around new index and column values. when the data is large.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_023", "prompt": "Please Rearrange a DataFrame by pivoting it around new index and column values. thanks!", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_024", "prompt": "Hey, can you Rearrange a DataFrame by pivoting it around new index and column values. before continuing.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_025", "prompt": "I want to Apply a pivot operation to a DataFrame to redefine its index and columns. if you don't mind.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_026", "prompt": "Could you Apply a pivot operation to a DataFrame to redefine its index and columns. for better performance.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_027", "prompt": "I want to Apply a pivot operation to a DataFrame to redefine its index and columns. without using loops.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_028", "prompt": "Hey, can you Reconfigure a DataFrame by pivoting it with updated index and column parameters. if you don't mind.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_029", "prompt": "You should Reconfigure a DataFrame by pivoting it with updated index and column parameters. when the data is large.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_030", "prompt": "Hey, can you Reconfigure a DataFrame by pivoting it with updated index and column parameters. in pandas.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_031", "prompt": "Hey, can you Restructure a DataFrame using pivot, assigning new index and column identifiers. before continuing.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_032", "prompt": "Could you Restructure a DataFrame using pivot, assigning new index and column identifiers. before continuing.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_033", "prompt": "Kindly Restructure a DataFrame using pivot, assigning new index and column identifiers. for better performance.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_034", "prompt": "You should Perform a pivot transformation on a DataFrame to modify its index and columns. in pandas.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_035", "prompt": "Hey, can you Perform a pivot transformation on a DataFrame to modify its index and columns. for better performance.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_036", "prompt": "Try to Perform a pivot transformation on a DataFrame to modify its index and columns. for better performance.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_037", "prompt": "I want to Flip a DataFrame into a new format with specified index and column mappings. before continuing.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_038", "prompt": "I want to Flip a DataFrame into a new format with specified index and column mappings. if you don't mind.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.pivot/noise_039", "prompt": "You should Flip a DataFrame into a new format with specified index and column mappings. if you don't mind.", "canonical_solution": "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])", "api_name": "df.pivot"}
{"task_id": "df.apply/noise_010", "prompt": "Let's Execute a function on every row in a DataFrame. thanks!", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_011", "prompt": "In pandas, Execute a function on every row in a DataFrame. thanks!", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_012", "prompt": "Just go ahead and Execute a function on every row in a DataFrame. when the data is large.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_013", "prompt": "Try to Perform a function operation for each row in the DataFrame. for better performance.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_014", "prompt": "Let's Perform a function operation for each row in the DataFrame. without using loops.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_015", "prompt": "You should Perform a function operation for each row in the DataFrame. before continuing.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_016", "prompt": "I want to Iterate over each row in the DataFrame and apply a function. if you don't mind.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_017", "prompt": "Please Iterate over each row in the DataFrame and apply a function. in the latest version.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_018", "prompt": "In pandas, Iterate over each row in the DataFrame and apply a function. in the latest version.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_019", "prompt": "Hey, can you Use a function to process every row of the DataFrame. thanks!", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_020", "prompt": "Let's Use a function to process every row of the DataFrame. in pandas.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_021", "prompt": "I want to Use a function to process every row of the DataFrame. if you don't mind.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_022", "prompt": "In pandas, Map a function across all rows of the DataFrame. in the latest version.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_023", "prompt": "Just go ahead and Map a function across all rows of the DataFrame. for better performance.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_024", "prompt": "Hey, can you Map a function across all rows of the DataFrame. thanks!", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_025", "prompt": "Kindly For each row in the DataFrame, run a specified function. for better performance.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_026", "prompt": "Try to For each row in the DataFrame, run a specified function. thanks!", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_027", "prompt": "Please For each row in the DataFrame, run a specified function. when the data is large.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_028", "prompt": "Could you Apply a custom function row-wise to the DataFrame. thanks!", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_029", "prompt": "You should Apply a custom function row-wise to the DataFrame. if you don't mind.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_030", "prompt": "In pandas, Apply a custom function row-wise to the DataFrame. without using loops.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_031", "prompt": "Just go ahead and Process the DataFrame row by row using a given function. in the latest version.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_032", "prompt": "I want to Process the DataFrame row by row using a given function. in pandas.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_033", "prompt": "Please Process the DataFrame row by row using a given function. for better performance.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_034", "prompt": "Kindly Transform each row in the DataFrame by applying a function. when the data is large.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_035", "prompt": "In pandas, Transform each row in the DataFrame by applying a function. before continuing.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_036", "prompt": "Let's Transform each row in the DataFrame by applying a function. for better performance.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_037", "prompt": "Let's Evaluate a function on every individual row of the DataFrame. for better performance.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_038", "prompt": "I want to Evaluate a function on every individual row of the DataFrame. for better performance.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.apply/noise_039", "prompt": "Try to Evaluate a function on every individual row of the DataFrame. as soon as possible.", "canonical_solution": "df.apply(np.sqrt)", "api_name": "df.apply"}
{"task_id": "df.loc/noise_010", "prompt": "You should Filter rows and columns in a DataFrame by their labels. thanks!", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_011", "prompt": "Please Filter rows and columns in a DataFrame by their labels. for better performance.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_012", "prompt": "In pandas, Filter rows and columns in a DataFrame by their labels. without using loops.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_013", "prompt": "Please Extract specific rows and columns from a DataFrame using label-based indexing. in pandas.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_014", "prompt": "I want to Extract specific rows and columns from a DataFrame using label-based indexing. as soon as possible.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_015", "prompt": "In pandas, Extract specific rows and columns from a DataFrame using label-based indexing. without using loops.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_016", "prompt": "I want to Retrieve selected rows and columns from a DataFrame using their labels. if you don't mind.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_017", "prompt": "Make sure to Retrieve selected rows and columns from a DataFrame using their labels. in pandas.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_018", "prompt": "Just go ahead and Retrieve selected rows and columns from a DataFrame using their labels. without using loops.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_019", "prompt": "Let's Use label indexing to pick certain rows and columns in a DataFrame. without using loops.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_020", "prompt": "In pandas, Use label indexing to pick certain rows and columns in a DataFrame. in pandas.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_021", "prompt": "Please Use label indexing to pick certain rows and columns in a DataFrame. as soon as possible.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_022", "prompt": "Try to Select rows and columns from a DataFrame based on their labels. if you don't mind.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_023", "prompt": "Make sure to Select rows and columns from a DataFrame based on their labels. thanks!", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_024", "prompt": "Make sure to Select rows and columns from a DataFrame based on their labels. without using loops.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_025", "prompt": "Hey, can you Access specific rows and columns in a DataFrame using label references. before continuing.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_026", "prompt": "Just go ahead and Access specific rows and columns in a DataFrame using label references. without using loops.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_027", "prompt": "I want to Access specific rows and columns in a DataFrame using label references. before continuing.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_028", "prompt": "Just go ahead and Choose particular rows and columns from a DataFrame by label. before continuing.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_029", "prompt": "Please Choose particular rows and columns from a DataFrame by label. if you don't mind.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_030", "prompt": "In pandas, Choose particular rows and columns from a DataFrame by label. in the latest version.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_031", "prompt": "Try to Subset a DataFrame by selecting rows and columns with label-based methods. thanks!", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_032", "prompt": "Let's Subset a DataFrame by selecting rows and columns with label-based methods. if you don't mind.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_033", "prompt": "Try to Subset a DataFrame by selecting rows and columns with label-based methods. when the data is large.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_034", "prompt": "Please Isolate specific rows and columns in a DataFrame using their label identifiers. as soon as possible.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_035", "prompt": "You should Isolate specific rows and columns in a DataFrame using their label identifiers. thanks!", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_036", "prompt": "I want to Isolate specific rows and columns in a DataFrame using their label identifiers. as soon as possible.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_037", "prompt": "Just go ahead and Query a DataFrame for designated rows and columns using label criteria. in the latest version.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_038", "prompt": "Could you Query a DataFrame for designated rows and columns using label criteria. thanks!", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.loc/noise_039", "prompt": "Try to Query a DataFrame for designated rows and columns using label criteria. before continuing.", "canonical_solution": "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf", "api_name": "df.loc"}
{"task_id": "df.dropna/noise_010", "prompt": "You should Drop rows containing NaN values from the DataFrame if you don't mind.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_011", "prompt": "Make sure to Drop rows containing NaN values from the DataFrame in pandas.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_012", "prompt": "You should Drop rows containing NaN values from the DataFrame if you don't mind.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_013", "prompt": "In pandas, Eliminate rows with missing data in the DataFrame in the latest version.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_014", "prompt": "Kindly Eliminate rows with missing data in the DataFrame as soon as possible.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_015", "prompt": "I want to Eliminate rows with missing data in the DataFrame thanks!", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_016", "prompt": "Hey, can you Remove all rows that have null values in the DataFrame if you don't mind.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_017", "prompt": "You should Remove all rows that have null values in the DataFrame when the data is large.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_018", "prompt": "Could you Remove all rows that have null values in the DataFrame as soon as possible.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_019", "prompt": "Hey, can you Delete rows with any NA values from the DataFrame without using loops.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_020", "prompt": "Let's Delete rows with any NA values from the DataFrame thanks!", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_021", "prompt": "Make sure to Delete rows with any NA values from the DataFrame before continuing.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_022", "prompt": "Let's Filter out rows that contain missing values in the DataFrame if you don't mind.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_023", "prompt": "Kindly Filter out rows that contain missing values in the DataFrame without using loops.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_024", "prompt": "In pandas, Filter out rows that contain missing values in the DataFrame when the data is large.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_025", "prompt": "Just go ahead and Exclude rows with empty or NaN entries from the DataFrame for better performance.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_026", "prompt": "Try to Exclude rows with empty or NaN entries from the DataFrame thanks!", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_027", "prompt": "Kindly Exclude rows with empty or NaN entries from the DataFrame for better performance.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_028", "prompt": "Just go ahead and Strip away rows that have any missing values in the DataFrame as soon as possible.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_029", "prompt": "I want to Strip away rows that have any missing values in the DataFrame without using loops.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_030", "prompt": "Let's Strip away rows that have any missing values in the DataFrame thanks!", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_031", "prompt": "Make sure to Clean the DataFrame by dropping rows with NaN entries as soon as possible.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_032", "prompt": "Please Clean the DataFrame by dropping rows with NaN entries if you don't mind.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_033", "prompt": "Let's Clean the DataFrame by dropping rows with NaN entries without using loops.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_034", "prompt": "Hey, can you Omit rows where any cell is NaN in the DataFrame if you don't mind.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_035", "prompt": "Try to Omit rows where any cell is NaN in the DataFrame in pandas.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_036", "prompt": "Try to Omit rows where any cell is NaN in the DataFrame before continuing.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_037", "prompt": "Just go ahead and Discard rows with incomplete data from the DataFrame when the data is large.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_038", "prompt": "Make sure to Discard rows with incomplete data from the DataFrame in pandas.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.dropna/noise_039", "prompt": "Let's Discard rows with incomplete data from the DataFrame in the latest version.", "canonical_solution": "df.dropna(how='all')", "api_name": "df.dropna"}
{"task_id": "df.fillna/noise_010", "prompt": "Hey, can you Replace NaN values in a DataFrame with a given value. for better performance.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_011", "prompt": "Make sure to Replace NaN values in a DataFrame with a given value. before continuing.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_012", "prompt": "Could you Replace NaN values in a DataFrame with a given value. before continuing.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_013", "prompt": "Make sure to Substitute missing data in a DataFrame with a specified value. if you don't mind.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_014", "prompt": "Make sure to Substitute missing data in a DataFrame with a specified value. in pandas.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_015", "prompt": "Let's Substitute missing data in a DataFrame with a specified value. for better performance.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_016", "prompt": "Kindly Fill NA/NaN entries in a DataFrame with a predefined value. in pandas.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_017", "prompt": "Let's Fill NA/NaN entries in a DataFrame with a predefined value. if you don't mind.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_018", "prompt": "Please Fill NA/NaN entries in a DataFrame with a predefined value. if you don't mind.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_019", "prompt": "In pandas, Impute null values in a DataFrame with a chosen value. in the latest version.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_020", "prompt": "Try to Impute null values in a DataFrame with a chosen value. as soon as possible.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_021", "prompt": "Just go ahead and Impute null values in a DataFrame with a chosen value. when the data is large.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_022", "prompt": "Please Populate empty cells in a DataFrame with a particular value. thanks!", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_023", "prompt": "Could you Populate empty cells in a DataFrame with a particular value. in the latest version.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_024", "prompt": "Make sure to Populate empty cells in a DataFrame with a particular value. for better performance.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_025", "prompt": "Try to Complete missing entries in a DataFrame using a specified replacement. before continuing.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_026", "prompt": "Try to Complete missing entries in a DataFrame using a specified replacement. without using loops.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_027", "prompt": "Kindly Complete missing entries in a DataFrame using a specified replacement. in the latest version.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_028", "prompt": "You should Set a default value for all missing data points in a DataFrame. in the latest version.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_029", "prompt": "You should Set a default value for all missing data points in a DataFrame. as soon as possible.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_030", "prompt": "Just go ahead and Set a default value for all missing data points in a DataFrame. without using loops.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_031", "prompt": "Just go ahead and Replace absent values in a DataFrame with a designated value. without using loops.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_032", "prompt": "Try to Replace absent values in a DataFrame with a designated value. thanks!", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_033", "prompt": "Try to Replace absent values in a DataFrame with a designated value. in pandas.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_034", "prompt": "Just go ahead and Fill DataFrame gaps with a specified constant. as soon as possible.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_035", "prompt": "In pandas, Fill DataFrame gaps with a specified constant. before continuing.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_036", "prompt": "Let's Fill DataFrame gaps with a specified constant. for better performance.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_037", "prompt": "Let's Use a given value to replace all null entries in a DataFrame. in pandas.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_038", "prompt": "You should Use a given value to replace all null entries in a DataFrame. if you don't mind.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.fillna/noise_039", "prompt": "Could you Use a given value to replace all null entries in a DataFrame. if you don't mind.", "canonical_solution": "df.fillna(value=values, limit=1)", "api_name": "df.fillna"}
{"task_id": "df.sort_values/noise_010", "prompt": "Hey, can you Arrange a DataFrame based on one or multiple columns. for better performance.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_011", "prompt": "Kindly Arrange a DataFrame based on one or multiple columns. thanks!", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_012", "prompt": "Try to Arrange a DataFrame based on one or multiple columns. as soon as possible.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_013", "prompt": "Could you Order a DataFrame using specified column(s). in pandas.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_014", "prompt": "In pandas, Order a DataFrame using specified column(s). before continuing.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_015", "prompt": "Hey, can you Order a DataFrame using specified column(s). for better performance.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_016", "prompt": "You should Reorganize a DataFrame by sorting along one or more columns. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_017", "prompt": "In pandas, Reorganize a DataFrame by sorting along one or more columns. in pandas.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_018", "prompt": "I want to Reorganize a DataFrame by sorting along one or more columns. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_019", "prompt": "Could you Sort the rows of a DataFrame according to one or more column values. thanks!", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_020", "prompt": "Just go ahead and Sort the rows of a DataFrame according to one or more column values. in pandas.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_021", "prompt": "Just go ahead and Sort the rows of a DataFrame according to one or more column values. before continuing.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_022", "prompt": "Kindly Rearrange a DataFrame in ascending or descending order of selected columns. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_023", "prompt": "In pandas, Rearrange a DataFrame in ascending or descending order of selected columns. without using loops.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_024", "prompt": "I want to Rearrange a DataFrame in ascending or descending order of selected columns. if you don't mind.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_025", "prompt": "Make sure to Rank a DataFrame by values in one or more columns. as soon as possible.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_026", "prompt": "Could you Rank a DataFrame by values in one or more columns. without using loops.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_027", "prompt": "Kindly Rank a DataFrame by values in one or more columns. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_028", "prompt": "Could you Sort the entries in a DataFrame based on column(s). for better performance.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_029", "prompt": "Try to Sort the entries in a DataFrame based on column(s). before continuing.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_030", "prompt": "In pandas, Sort the entries in a DataFrame based on column(s). without using loops.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_031", "prompt": "Could you Reorder a DataFrame by sorting one or more columns. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_032", "prompt": "Let's Reorder a DataFrame by sorting one or more columns. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_033", "prompt": "You should Reorder a DataFrame by sorting one or more columns. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_034", "prompt": "You should Organize a DataFrame by arranging rows according to column values. as soon as possible.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_035", "prompt": "Just go ahead and Organize a DataFrame by arranging rows according to column values. thanks!", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_036", "prompt": "Try to Organize a DataFrame by arranging rows according to column values. when the data is large.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_037", "prompt": "Just go ahead and Apply sorting to a DataFrame using one or more columns as the key. in pandas.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_038", "prompt": "Hey, can you Apply sorting to a DataFrame using one or more columns as the key. without using loops.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.sort_values/noise_039", "prompt": "Try to Apply sorting to a DataFrame using one or more columns as the key. as soon as possible.", "canonical_solution": "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf", "api_name": "df.sort_values"}
{"task_id": "df.query/noise_010", "prompt": "Please Select rows from a DataFrame based on a condition. in the latest version.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_011", "prompt": "Hey, can you Select rows from a DataFrame based on a condition. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_012", "prompt": "Kindly Select rows from a DataFrame based on a condition. thanks!", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_013", "prompt": "I want to Extract rows from a DataFrame that meet a specific criteria. when the data is large.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_014", "prompt": "Could you Extract rows from a DataFrame that meet a specific criteria. in the latest version.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_015", "prompt": "Try to Extract rows from a DataFrame that meet a specific criteria. as soon as possible.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_016", "prompt": "You should Apply a filter to a DataFrame to retrieve matching rows. when the data is large.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_017", "prompt": "Hey, can you Apply a filter to a DataFrame to retrieve matching rows. for better performance.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_018", "prompt": "Please Apply a filter to a DataFrame to retrieve matching rows. if you don't mind.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_019", "prompt": "Just go ahead and Subset a DataFrame according to a given condition. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_020", "prompt": "In pandas, Subset a DataFrame according to a given condition. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_021", "prompt": "You should Subset a DataFrame according to a given condition. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_022", "prompt": "Try to Retrieve only the rows in a DataFrame that satisfy a condition. without using loops.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_023", "prompt": "Hey, can you Retrieve only the rows in a DataFrame that satisfy a condition. thanks!", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_024", "prompt": "Try to Retrieve only the rows in a DataFrame that satisfy a condition. without using loops.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_025", "prompt": "You should Use a boolean condition to filter rows in a DataFrame. thanks!", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_026", "prompt": "Kindly Use a boolean condition to filter rows in a DataFrame. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_027", "prompt": "I want to Use a boolean condition to filter rows in a DataFrame. without using loops.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_028", "prompt": "Hey, can you Query a DataFrame to get rows that match a certain condition. when the data is large.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_029", "prompt": "You should Query a DataFrame to get rows that match a certain condition. if you don't mind.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_030", "prompt": "Make sure to Query a DataFrame to get rows that match a certain condition. as soon as possible.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_031", "prompt": "Please Filter out rows in a DataFrame that do not meet a specified condition. without using loops.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_032", "prompt": "I want to Filter out rows in a DataFrame that do not meet a specified condition. in pandas.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_033", "prompt": "Kindly Filter out rows in a DataFrame that do not meet a specified condition. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_034", "prompt": "Please Conditionally select data from a DataFrame. without using loops.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_035", "prompt": "Could you Conditionally select data from a DataFrame. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_036", "prompt": "You should Conditionally select data from a DataFrame. before continuing.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_037", "prompt": "Could you Restrict a DataFrame to rows that fulfill a particular requirement. as soon as possible.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_038", "prompt": "Make sure to Restrict a DataFrame to rows that fulfill a particular requirement. without using loops.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.query/noise_039", "prompt": "I want to Restrict a DataFrame to rows that fulfill a particular requirement. as soon as possible.", "canonical_solution": "df[df.A > df.B]", "api_name": "df.query"}
{"task_id": "df.duplicated/noise_010", "prompt": "Let's Find duplicate rows in a DataFrame in pandas.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_011", "prompt": "Kindly Find duplicate rows in a DataFrame for better performance.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_012", "prompt": "Make sure to Find duplicate rows in a DataFrame thanks!", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_013", "prompt": "I want to Detect duplicated rows in a DataFrame without using loops.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_014", "prompt": "Try to Detect duplicated rows in a DataFrame without using loops.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_015", "prompt": "Just go ahead and Detect duplicated rows in a DataFrame if you don't mind.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_016", "prompt": "Kindly Locate duplicate entries in a DataFrame before continuing.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_017", "prompt": "Kindly Locate duplicate entries in a DataFrame for better performance.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_018", "prompt": "Please Locate duplicate entries in a DataFrame before continuing.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_019", "prompt": "Make sure to Check for duplicate rows in a DataFrame in pandas.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_020", "prompt": "Just go ahead and Check for duplicate rows in a DataFrame for better performance.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_021", "prompt": "Hey, can you Check for duplicate rows in a DataFrame before continuing.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_022", "prompt": "Kindly Flag repeated rows in a DataFrame if you don't mind.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_023", "prompt": "Let's Flag repeated rows in a DataFrame thanks!", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_024", "prompt": "Could you Flag repeated rows in a DataFrame if you don't mind.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_025", "prompt": "Please Identify rows with duplicates in a DataFrame for better performance.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_026", "prompt": "In pandas, Identify rows with duplicates in a DataFrame when the data is large.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_027", "prompt": "Let's Identify rows with duplicates in a DataFrame in the latest version.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_028", "prompt": "Please Determine duplicate records in a DataFrame for better performance.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_029", "prompt": "Let's Determine duplicate records in a DataFrame in the latest version.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_030", "prompt": "Hey, can you Determine duplicate records in a DataFrame without using loops.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_031", "prompt": "Please Extract duplicate rows from a DataFrame for better performance.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_032", "prompt": "Let's Extract duplicate rows from a DataFrame if you don't mind.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_033", "prompt": "You should Extract duplicate rows from a DataFrame without using loops.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_034", "prompt": "Kindly Search for duplicated rows in a DataFrame as soon as possible.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_035", "prompt": "Just go ahead and Search for duplicated rows in a DataFrame if you don't mind.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_036", "prompt": "Could you Search for duplicated rows in a DataFrame before continuing.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_037", "prompt": "Just go ahead and Return all duplicate rows in a DataFrame when the data is large.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_038", "prompt": "Hey, can you Return all duplicate rows in a DataFrame without using loops.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.duplicated/noise_039", "prompt": "Just go ahead and Return all duplicate rows in a DataFrame if you don't mind.", "canonical_solution": "df.duplicated(subset=['brand'])", "api_name": "df.duplicated"}
{"task_id": "df.value_counts/noise_010", "prompt": "Let's **Determine the number of distinct values in a column** in the latest version.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_011", "prompt": "Try to **Determine the number of distinct values in a column** when the data is large.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_012", "prompt": "Let's **Determine the number of distinct values in a column** without using loops.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_013", "prompt": "Try to **Find the count of unique entries in a column** thanks!", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_014", "prompt": "Please **Find the count of unique entries in a column** thanks!", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_015", "prompt": "You should **Find the count of unique entries in a column** for better performance.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_016", "prompt": "Kindly **Calculate how many different values exist in a column** for better performance.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_017", "prompt": "Could you **Calculate how many different values exist in a column** in pandas.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_018", "prompt": "I want to **Calculate how many different values exist in a column** before continuing.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_019", "prompt": "Try to **Get the unique value count for a column** thanks!", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_020", "prompt": "Could you **Get the unique value count for a column** without using loops.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_021", "prompt": "Try to **Get the unique value count for a column** if you don't mind.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_022", "prompt": "In pandas, **Count the number of non-duplicate values in a column** in the latest version.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_023", "prompt": "I want to **Count the number of non-duplicate values in a column** before continuing.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_024", "prompt": "I want to **Count the number of non-duplicate values in a column** thanks!", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_025", "prompt": "Make sure to **Compute the distinct value count in a column** if you don't mind.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_026", "prompt": "Try to **Compute the distinct value count in a column** in pandas.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_027", "prompt": "You should **Compute the distinct value count in a column** in the latest version.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_028", "prompt": "Please **Retrieve the number of unique elements in a column** if you don't mind.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_029", "prompt": "Hey, can you **Retrieve the number of unique elements in a column** in pandas.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_030", "prompt": "Let's **Retrieve the number of unique elements in a column** when the data is large.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_031", "prompt": "Let's **Obtain the count of unique occurrences in a column** before continuing.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_032", "prompt": "In pandas, **Obtain the count of unique occurrences in a column** in the latest version.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_033", "prompt": "Make sure to **Obtain the count of unique occurrences in a column** in pandas.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_034", "prompt": "In pandas, **Identify the total unique values present in a column** when the data is large.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_035", "prompt": "You should **Identify the total unique values present in a column** in pandas.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_036", "prompt": "Please **Identify the total unique values present in a column** as soon as possible.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_037", "prompt": "Let's **Summarize the distinct values in a column by count** before continuing.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_038", "prompt": "In pandas, **Summarize the distinct values in a column by count** as soon as possible.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.value_counts/noise_039", "prompt": "Please **Summarize the distinct values in a column by count** without using loops.", "canonical_solution": "df.value_counts(sort=False)", "api_name": "df.value_counts"}
{"task_id": "df.astype/noise_010", "prompt": "Just go ahead and Convert the column to a different data type. when the data is large.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_011", "prompt": "Could you Convert the column to a different data type. thanks!", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_012", "prompt": "Kindly Convert the column to a different data type. for better performance.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_013", "prompt": "Could you Modify the data type of a column. as soon as possible.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_014", "prompt": "Let's Modify the data type of a column. in pandas.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_015", "prompt": "I want to Modify the data type of a column. without using loops.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_016", "prompt": "In pandas, Alter the column's data type. for better performance.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_017", "prompt": "In pandas, Alter the column's data type. thanks!", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_018", "prompt": "Try to Alter the column's data type. in pandas.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_019", "prompt": "Could you Update the column to a new data type. before continuing.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_020", "prompt": "Kindly Update the column to a new data type. in pandas.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_021", "prompt": "Hey, can you Update the column to a new data type. for better performance.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_022", "prompt": "In pandas, Cast the column to a different type. thanks!", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_023", "prompt": "In pandas, Cast the column to a different type. for better performance.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_024", "prompt": "Just go ahead and Cast the column to a different type. thanks!", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_025", "prompt": "In pandas, Change the dtype of a column. in pandas.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_026", "prompt": "Could you Change the dtype of a column. as soon as possible.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_027", "prompt": "Make sure to Change the dtype of a column. before continuing.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_028", "prompt": "You should Transform the column's data type. if you don't mind.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_029", "prompt": "Try to Transform the column's data type. thanks!", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_030", "prompt": "Try to Transform the column's data type. when the data is large.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_031", "prompt": "Make sure to Adjust the column's type to a different one. in pandas.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_032", "prompt": "Let's Adjust the column's type to a different one. for better performance.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_033", "prompt": "Could you Adjust the column's type to a different one. as soon as possible.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_034", "prompt": "You should Recast the column to another data type. in pandas.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_035", "prompt": "Please Recast the column to another data type. in the latest version.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_036", "prompt": "Kindly Recast the column to another data type. in the latest version.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_037", "prompt": "Try to Switch the data type of a column. for better performance.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_038", "prompt": "Let's Switch the data type of a column. when the data is large.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.astype/noise_039", "prompt": "Kindly Switch the data type of a column. for better performance.", "canonical_solution": "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes", "api_name": "df.astype"}
{"task_id": "df.replace/noise_010", "prompt": "Let's Substitute particular values in a column. for better performance.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_011", "prompt": "Please Substitute particular values in a column. when the data is large.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_012", "prompt": "Kindly Substitute particular values in a column. before continuing.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_013", "prompt": "Let's Update specific entries within a column. as soon as possible.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_014", "prompt": "Let's Update specific entries within a column. before continuing.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_015", "prompt": "Could you Update specific entries within a column. thanks!", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_016", "prompt": "You should Modify certain values in a column. for better performance.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_017", "prompt": "Try to Modify certain values in a column. before continuing.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_018", "prompt": "Just go ahead and Modify certain values in a column. thanks!", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_019", "prompt": "Could you Replace selected entries in a column. as soon as possible.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_020", "prompt": "Could you Replace selected entries in a column. without using loops.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_021", "prompt": "Try to Replace selected entries in a column. before continuing.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_022", "prompt": "Try to Change specific elements in a column. when the data is large.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_023", "prompt": "I want to Change specific elements in a column. thanks!", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_024", "prompt": "Hey, can you Change specific elements in a column. in the latest version.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_025", "prompt": "Try to Swap particular values in a column. in pandas.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_026", "prompt": "Hey, can you Swap particular values in a column. for better performance.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_027", "prompt": "Try to Swap particular values in a column. when the data is large.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_028", "prompt": "Please Overwrite certain entries in a column. without using loops.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_029", "prompt": "Make sure to Overwrite certain entries in a column. in pandas.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_030", "prompt": "In pandas, Overwrite certain entries in a column. without using loops.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_031", "prompt": "Try to Alter specific data points in a column. thanks!", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_032", "prompt": "I want to Alter specific data points in a column. in pandas.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_033", "prompt": "Make sure to Alter specific data points in a column. thanks!", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_034", "prompt": "You should Exchange designated values in a column. in pandas.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_035", "prompt": "Kindly Exchange designated values in a column. for better performance.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_036", "prompt": "Please Exchange designated values in a column. in pandas.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_037", "prompt": "Could you Transform specified entries in a column. for better performance.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_038", "prompt": "In pandas, Transform specified entries in a column. in the latest version.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.replace/noise_039", "prompt": "Could you Transform specified entries in a column. without using loops.", "canonical_solution": "df.replace(regex=r'^ba.$', value='new')", "api_name": "df.replace"}
{"task_id": "df.set_index/noise_010", "prompt": "Try to Make a column the DataFrame's index before continuing.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_011", "prompt": "Make sure to Make a column the DataFrame's index without using loops.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_012", "prompt": "Just go ahead and Make a column the DataFrame's index for better performance.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_013", "prompt": "Make sure to Assign a column to be the index of the DataFrame thanks!", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_014", "prompt": "Try to Assign a column to be the index of the DataFrame if you don't mind.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_015", "prompt": "Could you Assign a column to be the index of the DataFrame if you don't mind.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_016", "prompt": "You should Use a column as the DataFrame's index in the latest version.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_017", "prompt": "Just go ahead and Use a column as the DataFrame's index before continuing.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_018", "prompt": "In pandas, Use a column as the DataFrame's index as soon as possible.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_019", "prompt": "Let's Set the index of the DataFrame to a specific column for better performance.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_020", "prompt": "Make sure to Set the index of the DataFrame to a specific column thanks!", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_021", "prompt": "Kindly Set the index of the DataFrame to a specific column for better performance.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_022", "prompt": "Could you Change the DataFrame's index to a column without using loops.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_023", "prompt": "You should Change the DataFrame's index to a column if you don't mind.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_024", "prompt": "You should Change the DataFrame's index to a column before continuing.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_025", "prompt": "Just go ahead and Convert a column into the DataFrame's index as soon as possible.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_026", "prompt": "Could you Convert a column into the DataFrame's index in the latest version.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_027", "prompt": "Make sure to Convert a column into the DataFrame's index when the data is large.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_028", "prompt": "I want to Designate a column as the index in the DataFrame thanks!", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_029", "prompt": "Just go ahead and Designate a column as the index in the DataFrame before continuing.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_030", "prompt": "Please Designate a column as the index in the DataFrame before continuing.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_031", "prompt": "Let's Specify a column as the DataFrame's index when the data is large.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_032", "prompt": "Try to Specify a column as the DataFrame's index when the data is large.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_033", "prompt": "Hey, can you Specify a column as the DataFrame's index for better performance.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_034", "prompt": "Please Update the DataFrame's index using a column thanks!", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_035", "prompt": "You should Update the DataFrame's index using a column for better performance.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_036", "prompt": "Please Update the DataFrame's index using a column as soon as possible.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_037", "prompt": "Make sure to Switch the DataFrame's index to a column for better performance.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_038", "prompt": "You should Switch the DataFrame's index to a column thanks!", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.set_index/noise_039", "prompt": "Make sure to Switch the DataFrame's index to a column for better performance.", "canonical_solution": "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf", "api_name": "df.set_index"}
{"task_id": "df.reset_index/noise_010", "prompt": "Could you Reset the DataFrame's index. for better performance.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_011", "prompt": "Try to Reset the DataFrame's index. in pandas.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_012", "prompt": "Let's Reset the DataFrame's index. before continuing.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_013", "prompt": "Just go ahead and Restore the default index for the DataFrame. if you don't mind.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_014", "prompt": "Just go ahead and Restore the default index for the DataFrame. in pandas.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_015", "prompt": "Hey, can you Restore the default index for the DataFrame. for better performance.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_016", "prompt": "Hey, can you Clear the current index of the DataFrame. thanks!", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_017", "prompt": "Try to Clear the current index of the DataFrame. when the data is large.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_018", "prompt": "Make sure to Clear the current index of the DataFrame. in the latest version.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_019", "prompt": "Could you Reinitialize the DataFrame's index. for better performance.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_020", "prompt": "Kindly Reinitialize the DataFrame's index. before continuing.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_021", "prompt": "Try to Reinitialize the DataFrame's index. without using loops.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_022", "prompt": "Make sure to Remove the existing index and reset it to the default integer index. when the data is large.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_023", "prompt": "Please Remove the existing index and reset it to the default integer index. in the latest version.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_024", "prompt": "Could you Remove the existing index and reset it to the default integer index. before continuing.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_025", "prompt": "You should Convert the current index to default sequential numbering. in pandas.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_026", "prompt": "Make sure to Convert the current index to default sequential numbering. without using loops.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_027", "prompt": "In pandas, Convert the current index to default sequential numbering. in pandas.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_028", "prompt": "In pandas, Drop the current index and create a new default one. when the data is large.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_029", "prompt": "Please Drop the current index and create a new default one. as soon as possible.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_030", "prompt": "In pandas, Drop the current index and create a new default one. without using loops.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_031", "prompt": "Please Revert the DataFrame's index to its original state. for better performance.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_032", "prompt": "Please Revert the DataFrame's index to its original state. if you don't mind.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_033", "prompt": "Try to Revert the DataFrame's index to its original state. before continuing.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_034", "prompt": "Could you Reset the index labels to their default integer values. in pandas.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_035", "prompt": "Kindly Reset the index labels to their default integer values. as soon as possible.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_036", "prompt": "Could you Reset the index labels to their default integer values. before continuing.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_037", "prompt": "Let's Set the DataFrame's index back to the default range index. if you don't mind.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_038", "prompt": "I want to Set the DataFrame's index back to the default range index. in pandas.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.reset_index/noise_039", "prompt": "Kindly Set the DataFrame's index back to the default range index. in pandas.", "canonical_solution": "df.reset_index(level='class', col_level=1, col_fill='genus')", "api_name": "df.reset_index"}
{"task_id": "df.rename/noise_010", "prompt": "Try to Change the column names in a DataFrame as soon as possible.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_011", "prompt": "Hey, can you Change the column names in a DataFrame for better performance.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_012", "prompt": "I want to Change the column names in a DataFrame thanks!", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_013", "prompt": "Kindly Modify the column labels of a DataFrame as soon as possible.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_014", "prompt": "Kindly Modify the column labels of a DataFrame without using loops.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_015", "prompt": "Make sure to Modify the column labels of a DataFrame in pandas.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_016", "prompt": "Could you Update the headers of a DataFrame without using loops.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_017", "prompt": "Kindly Update the headers of a DataFrame as soon as possible.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_018", "prompt": "Please Update the headers of a DataFrame in pandas.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_019", "prompt": "Try to Alter the column identifiers in a DataFrame when the data is large.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_020", "prompt": "In pandas, Alter the column identifiers in a DataFrame when the data is large.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_021", "prompt": "Could you Alter the column identifiers in a DataFrame for better performance.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_022", "prompt": "Hey, can you Adjust the names of columns in a DataFrame as soon as possible.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_023", "prompt": "You should Adjust the names of columns in a DataFrame in the latest version.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_024", "prompt": "Just go ahead and Adjust the names of columns in a DataFrame if you don't mind.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_025", "prompt": "Kindly Replace the column titles in a DataFrame without using loops.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_026", "prompt": "You should Replace the column titles in a DataFrame before continuing.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_027", "prompt": "Kindly Replace the column titles in a DataFrame in pandas.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_028", "prompt": "Make sure to Redefine the column headings in a DataFrame in pandas.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_029", "prompt": "Try to Redefine the column headings in a DataFrame without using loops.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_030", "prompt": "Let's Redefine the column headings in a DataFrame in pandas.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_031", "prompt": "Let's Transform the column names in a DataFrame thanks!", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_032", "prompt": "In pandas, Transform the column names in a DataFrame in pandas.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_033", "prompt": "In pandas, Transform the column names in a DataFrame for better performance.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_034", "prompt": "Please Revise the column naming in a DataFrame for better performance.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_035", "prompt": "Let's Revise the column naming in a DataFrame if you don't mind.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_036", "prompt": "Hey, can you Revise the column naming in a DataFrame for better performance.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_037", "prompt": "Just go ahead and Reassign the names of columns in a DataFrame when the data is large.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_038", "prompt": "Please Reassign the names of columns in a DataFrame without using loops.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.rename/noise_039", "prompt": "Make sure to Reassign the names of columns in a DataFrame for better performance.", "canonical_solution": "df.rename(str.lower, axis='columns')", "api_name": "df.rename"}
{"task_id": "df.isnull/noise_010", "prompt": "Could you Identify any missing values in the DataFrame. thanks!", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_011", "prompt": "Just go ahead and Identify any missing values in the DataFrame. without using loops.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_012", "prompt": "In pandas, Identify any missing values in the DataFrame. for better performance.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_013", "prompt": "In pandas, Detect null or NaN values in the DataFrame. as soon as possible.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_014", "prompt": "In pandas, Detect null or NaN values in the DataFrame. in the latest version.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_015", "prompt": "Try to Detect null or NaN values in the DataFrame. in pandas.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_016", "prompt": "Kindly Find where data is missing in the DataFrame. when the data is large.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_017", "prompt": "Kindly Find where data is missing in the DataFrame. for better performance.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_018", "prompt": "Try to Find where data is missing in the DataFrame. without using loops.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_019", "prompt": "Could you Locate NaN entries in the DataFrame. when the data is large.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_020", "prompt": "Please Locate NaN entries in the DataFrame. for better performance.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_021", "prompt": "Try to Locate NaN entries in the DataFrame. in the latest version.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_022", "prompt": "Kindly Check if there are any null values in the DataFrame. before continuing.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_023", "prompt": "Hey, can you Check if there are any null values in the DataFrame. in pandas.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_024", "prompt": "In pandas, Check if there are any null values in the DataFrame. without using loops.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_025", "prompt": "Let's Scan the DataFrame for missing data. for better performance.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_026", "prompt": "In pandas, Scan the DataFrame for missing data. if you don't mind.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_027", "prompt": "Kindly Scan the DataFrame for missing data. as soon as possible.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_028", "prompt": "Hey, can you Examine the DataFrame for any absent values. if you don't mind.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_029", "prompt": "I want to Examine the DataFrame for any absent values. before continuing.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_030", "prompt": "Hey, can you Examine the DataFrame for any absent values. thanks!", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_031", "prompt": "I want to Determine whether the DataFrame contains missing entries. when the data is large.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_032", "prompt": "Please Determine whether the DataFrame contains missing entries. without using loops.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_033", "prompt": "Just go ahead and Determine whether the DataFrame contains missing entries. thanks!", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_034", "prompt": "Could you Search for NA or NaN values in the DataFrame. in pandas.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_035", "prompt": "Let's Search for NA or NaN values in the DataFrame. for better performance.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_036", "prompt": "Try to Search for NA or NaN values in the DataFrame. for better performance.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_037", "prompt": "I want to Verify the presence of missing data in the DataFrame. before continuing.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_038", "prompt": "Let's Verify the presence of missing data in the DataFrame. thanks!", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.isnull/noise_039", "prompt": "In pandas, Verify the presence of missing data in the DataFrame. without using loops.", "canonical_solution": "df.isna()", "api_name": "df.isnull"}
{"task_id": "df.sample/noise_010", "prompt": "Try to Select a random subset of rows from a DataFrame if you don't mind.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_011", "prompt": "Try to Select a random subset of rows from a DataFrame for better performance.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_012", "prompt": "Make sure to Select a random subset of rows from a DataFrame as soon as possible.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_013", "prompt": "Please Extract random rows from a DataFrame as soon as possible.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_014", "prompt": "In pandas, Extract random rows from a DataFrame for better performance.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_015", "prompt": "Hey, can you Extract random rows from a DataFrame before continuing.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_016", "prompt": "Could you Get a random sample of records from a DataFrame in pandas.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_017", "prompt": "Let's Get a random sample of records from a DataFrame without using loops.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_018", "prompt": "Hey, can you Get a random sample of records from a DataFrame in the latest version.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_019", "prompt": "You should Retrieve randomly chosen rows from a DataFrame thanks!", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_020", "prompt": "Try to Retrieve randomly chosen rows from a DataFrame before continuing.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_021", "prompt": "You should Retrieve randomly chosen rows from a DataFrame without using loops.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_022", "prompt": "Please Draw a random selection of rows from a DataFrame thanks!", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_023", "prompt": "In pandas, Draw a random selection of rows from a DataFrame if you don't mind.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_024", "prompt": "Please Draw a random selection of rows from a DataFrame when the data is large.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_025", "prompt": "Try to Pick random rows from a DataFrame without using loops.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_026", "prompt": "Make sure to Pick random rows from a DataFrame as soon as possible.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_027", "prompt": "In pandas, Pick random rows from a DataFrame thanks!", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_028", "prompt": "You should Generate a random sample of DataFrame rows as soon as possible.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_029", "prompt": "Could you Generate a random sample of DataFrame rows without using loops.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_030", "prompt": "In pandas, Generate a random sample of DataFrame rows when the data is large.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_031", "prompt": "Try to Obtain a random set of rows from a DataFrame for better performance.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_032", "prompt": "Kindly Obtain a random set of rows from a DataFrame thanks!", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_033", "prompt": "Make sure to Obtain a random set of rows from a DataFrame in pandas.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_034", "prompt": "Let's Randomly choose rows from a DataFrame in pandas.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_035", "prompt": "Could you Randomly choose rows from a DataFrame for better performance.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_036", "prompt": "Hey, can you Randomly choose rows from a DataFrame in the latest version.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_037", "prompt": "Make sure to Sample rows at random from a DataFrame when the data is large.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_038", "prompt": "Could you Sample rows at random from a DataFrame when the data is large.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.sample/noise_039", "prompt": "Just go ahead and Sample rows at random from a DataFrame without using loops.", "canonical_solution": "df.sample(n=2, weights='num_specimen_seen', random_state=1)", "api_name": "df.sample"}
{"task_id": "df.nunique/noise_010", "prompt": "In pandas, Calculate the count of distinct values for each column in pandas.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_011", "prompt": "Make sure to Calculate the count of distinct values for each column before continuing.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_012", "prompt": "Please Calculate the count of distinct values for each column in pandas.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_013", "prompt": "Let's Determine the number of unique entries in every column for better performance.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_014", "prompt": "Could you Determine the number of unique entries in every column for better performance.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_015", "prompt": "Kindly Determine the number of unique entries in every column thanks!", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_016", "prompt": "Let's Find how many different values exist per column for better performance.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_017", "prompt": "Kindly Find how many different values exist per column if you don't mind.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_018", "prompt": "Try to Find how many different values exist per column if you don't mind.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_019", "prompt": "Just go ahead and Compute the unique value count for each column in the latest version.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_020", "prompt": "I want to Compute the unique value count for each column for better performance.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_021", "prompt": "Let's Compute the unique value count for each column for better performance.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_022", "prompt": "Could you Get the distinct value tally for all columns if you don't mind.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_023", "prompt": "Make sure to Get the distinct value tally for all columns in the latest version.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_024", "prompt": "Just go ahead and Get the distinct value tally for all columns in pandas.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_025", "prompt": "You should Count unique elements in each column of the dataframe before continuing.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_026", "prompt": "Kindly Count unique elements in each column of the dataframe when the data is large.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_027", "prompt": "Please Count unique elements in each column of the dataframe before continuing.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_028", "prompt": "Could you Enumerate the number of non-repeating values per column thanks!", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_029", "prompt": "Kindly Enumerate the number of non-repeating values per column as soon as possible.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_030", "prompt": "In pandas, Enumerate the number of non-repeating values per column before continuing.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_031", "prompt": "Just go ahead and Summarize the unique occurrences in every column if you don't mind.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_032", "prompt": "Could you Summarize the unique occurrences in every column without using loops.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_033", "prompt": "Let's Summarize the unique occurrences in every column in the latest version.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_034", "prompt": "Kindly Identify the count of unique data points for each column for better performance.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_035", "prompt": "Hey, can you Identify the count of unique data points for each column in pandas.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_036", "prompt": "Could you Identify the count of unique data points for each column thanks!", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_037", "prompt": "Let's Measure the uniqueness of values column-wise when the data is large.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_038", "prompt": "Please Measure the uniqueness of values column-wise without using loops.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.nunique/noise_039", "prompt": "Could you Measure the uniqueness of values column-wise in pandas.", "canonical_solution": "df.nunique(axis=1)", "api_name": "df.nunique"}
{"task_id": "df.to_csv/noise_010", "prompt": "I want to Save the DataFrame as a CSV file. in the latest version.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_011", "prompt": "Hey, can you Save the DataFrame as a CSV file. when the data is large.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_012", "prompt": "Hey, can you Save the DataFrame as a CSV file. in pandas.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_013", "prompt": "Hey, can you Write the DataFrame to a CSV file. when the data is large.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_014", "prompt": "I want to Write the DataFrame to a CSV file. for better performance.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_015", "prompt": "Try to Write the DataFrame to a CSV file. without using loops.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_016", "prompt": "Let's Convert the DataFrame to a CSV file and save it. in pandas.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_017", "prompt": "I want to Convert the DataFrame to a CSV file and save it. as soon as possible.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_018", "prompt": "I want to Convert the DataFrame to a CSV file and save it. for better performance.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_019", "prompt": "Could you Store the DataFrame in a CSV format. for better performance.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_020", "prompt": "You should Store the DataFrame in a CSV format. in the latest version.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_021", "prompt": "Let's Store the DataFrame in a CSV format. thanks!", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_022", "prompt": "You should Export the DataFrame data to a comma-separated values file. before continuing.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_023", "prompt": "Hey, can you Export the DataFrame data to a comma-separated values file. if you don't mind.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_024", "prompt": "Make sure to Export the DataFrame data to a comma-separated values file. thanks!", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_025", "prompt": "Try to Dump the DataFrame into a CSV file. thanks!", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_026", "prompt": "In pandas, Dump the DataFrame into a CSV file. in the latest version.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_027", "prompt": "You should Dump the DataFrame into a CSV file. when the data is large.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_028", "prompt": "Kindly Generate a CSV file from the DataFrame. for better performance.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_029", "prompt": "Let's Generate a CSV file from the DataFrame. in the latest version.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_030", "prompt": "Try to Generate a CSV file from the DataFrame. thanks!", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_031", "prompt": "Kindly Output the DataFrame to a CSV file. in pandas.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_032", "prompt": "You should Output the DataFrame to a CSV file. if you don't mind.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_033", "prompt": "Could you Output the DataFrame to a CSV file. before continuing.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_034", "prompt": "You should Serialize the DataFrame to a CSV format. when the data is large.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_035", "prompt": "I want to Serialize the DataFrame to a CSV format. thanks!", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_036", "prompt": "In pandas, Serialize the DataFrame to a CSV format. before continuing.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_037", "prompt": "Kindly Save the contents of the DataFrame in a CSV file. as soon as possible.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_038", "prompt": "Kindly Save the contents of the DataFrame in a CSV file. when the data is large.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.to_csv/noise_039", "prompt": "Just go ahead and Save the contents of the DataFrame in a CSV file. without using loops.", "canonical_solution": "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)", "api_name": "df.to_csv"}
{"task_id": "df.from_dict/noise_010", "prompt": "I want to Generate a DataFrame using a dictionary in the latest version.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_011", "prompt": "Just go ahead and Generate a DataFrame using a dictionary when the data is large.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_012", "prompt": "Just go ahead and Generate a DataFrame using a dictionary as soon as possible.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_013", "prompt": "Try to Convert a dictionary into a DataFrame before continuing.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_014", "prompt": "Please Convert a dictionary into a DataFrame before continuing.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_015", "prompt": "In pandas, Convert a dictionary into a DataFrame as soon as possible.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_016", "prompt": "I want to Construct a DataFrame from a dict thanks!", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_017", "prompt": "Let's Construct a DataFrame from a dict when the data is large.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_018", "prompt": "In pandas, Construct a DataFrame from a dict without using loops.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_019", "prompt": "Please Build a pandas DataFrame from a dictionary before continuing.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_020", "prompt": "Hey, can you Build a pandas DataFrame from a dictionary thanks!", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_021", "prompt": "You should Build a pandas DataFrame from a dictionary as soon as possible.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_022", "prompt": "Please Create a DataFrame with data from a dictionary in pandas.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_023", "prompt": "I want to Create a DataFrame with data from a dictionary without using loops.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_024", "prompt": "Just go ahead and Create a DataFrame with data from a dictionary as soon as possible.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_025", "prompt": "Please Initialize a DataFrame using dictionary data thanks!", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_026", "prompt": "Try to Initialize a DataFrame using dictionary data in the latest version.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_027", "prompt": "Try to Initialize a DataFrame using dictionary data before continuing.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_028", "prompt": "In pandas, Form a DataFrame by passing a dictionary in pandas.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_029", "prompt": "Please Form a DataFrame by passing a dictionary if you don't mind.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_030", "prompt": "Kindly Form a DataFrame by passing a dictionary thanks!", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_031", "prompt": "Try to Make a pandas DataFrame from a dict input for better performance.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_032", "prompt": "Try to Make a pandas DataFrame from a dict input without using loops.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_033", "prompt": "You should Make a pandas DataFrame from a dict input without using loops.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_034", "prompt": "Try to Produce a DataFrame from dictionary values thanks!", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_035", "prompt": "In pandas, Produce a DataFrame from dictionary values thanks!", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_036", "prompt": "In pandas, Produce a DataFrame from dictionary values for better performance.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_037", "prompt": "Could you Transform a dictionary into a pandas DataFrame for better performance.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_038", "prompt": "Just go ahead and Transform a dictionary into a pandas DataFrame without using loops.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.from_dict/noise_039", "prompt": "Just go ahead and Transform a dictionary into a pandas DataFrame as soon as possible.", "canonical_solution": "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')", "api_name": "df.from_dict"}
{"task_id": "df.columns/noise_010", "prompt": "Kindly Retrieve the names of the columns in a DataFrame. thanks!", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_011", "prompt": "Could you Retrieve the names of the columns in a DataFrame. thanks!", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_012", "prompt": "Try to Retrieve the names of the columns in a DataFrame. without using loops.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_013", "prompt": "Try to Get the list of column labels from a DataFrame. when the data is large.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_014", "prompt": "You should Get the list of column labels from a DataFrame. as soon as possible.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_015", "prompt": "Hey, can you Get the list of column labels from a DataFrame. thanks!", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_016", "prompt": "Just go ahead and Extract the column headers of a DataFrame. in the latest version.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_017", "prompt": "Could you Extract the column headers of a DataFrame. for better performance.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_018", "prompt": "Try to Extract the column headers of a DataFrame. when the data is large.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_019", "prompt": "You should Obtain the column names associated with a DataFrame. as soon as possible.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_020", "prompt": "Hey, can you Obtain the column names associated with a DataFrame. when the data is large.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_021", "prompt": "Please Obtain the column names associated with a DataFrame. if you don't mind.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_022", "prompt": "Kindly Fetch the labels for all columns in a DataFrame. before continuing.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_023", "prompt": "You should Fetch the labels for all columns in a DataFrame. in the latest version.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_024", "prompt": "Just go ahead and Fetch the labels for all columns in a DataFrame. when the data is large.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_025", "prompt": "Kindly Display the names of the DataFrame's columns. for better performance.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_026", "prompt": "Kindly Display the names of the DataFrame's columns. before continuing.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_027", "prompt": "Please Display the names of the DataFrame's columns. thanks!", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_028", "prompt": "In pandas, Return the column titles of a DataFrame. when the data is large.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_029", "prompt": "Kindly Return the column titles of a DataFrame. as soon as possible.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_030", "prompt": "Could you Return the column titles of a DataFrame. in the latest version.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_031", "prompt": "Try to List all the column names present in the DataFrame. if you don't mind.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_032", "prompt": "I want to List all the column names present in the DataFrame. in the latest version.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_033", "prompt": "Let's List all the column names present in the DataFrame. without using loops.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_034", "prompt": "Hey, can you Check what columns are available in the DataFrame. in pandas.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_035", "prompt": "Just go ahead and Check what columns are available in the DataFrame. without using loops.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_036", "prompt": "Just go ahead and Check what columns are available in the DataFrame. in pandas.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_037", "prompt": "Kindly Inspect the column headings of a DataFrame. before continuing.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_038", "prompt": "Just go ahead and Inspect the column headings of a DataFrame. if you don't mind.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.columns/noise_039", "prompt": "You should Inspect the column headings of a DataFrame. if you don't mind.", "canonical_solution": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns", "api_name": "df.columns"}
{"task_id": "df.index/noise_010", "prompt": "In pandas, Retrieve the index of a DataFrame. without using loops.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_011", "prompt": "Let's Retrieve the index of a DataFrame. when the data is large.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_012", "prompt": "Make sure to Retrieve the index of a DataFrame. in the latest version.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_013", "prompt": "In pandas, Get the index from a DataFrame. in pandas.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_014", "prompt": "You should Get the index from a DataFrame. thanks!", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_015", "prompt": "Make sure to Get the index from a DataFrame. without using loops.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_016", "prompt": "Just go ahead and Obtain the index of a pandas DataFrame. thanks!", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_017", "prompt": "You should Obtain the index of a pandas DataFrame. for better performance.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_018", "prompt": "In pandas, Obtain the index of a pandas DataFrame. in pandas.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_019", "prompt": "Kindly Extract the index of a DataFrame. thanks!", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_020", "prompt": "Hey, can you Extract the index of a DataFrame. in pandas.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_021", "prompt": "Kindly Extract the index of a DataFrame. as soon as possible.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_022", "prompt": "Try to Return the index of a DataFrame. thanks!", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_023", "prompt": "You should Return the index of a DataFrame. without using loops.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_024", "prompt": "Please Return the index of a DataFrame. thanks!", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_025", "prompt": "Make sure to Access the DataFrame's index. as soon as possible.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_026", "prompt": "Just go ahead and Access the DataFrame's index. before continuing.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_027", "prompt": "Just go ahead and Access the DataFrame's index. if you don't mind.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_028", "prompt": "Let's Fetch the index of a DataFrame. before continuing.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_029", "prompt": "Please Fetch the index of a DataFrame. if you don't mind.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_030", "prompt": "You should Fetch the index of a DataFrame. in the latest version.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_031", "prompt": "Try to Display the index of a DataFrame. without using loops.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_032", "prompt": "I want to Display the index of a DataFrame. in the latest version.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_033", "prompt": "In pandas, Display the index of a DataFrame. in the latest version.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_034", "prompt": "Hey, can you Check the index of a DataFrame. before continuing.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_035", "prompt": "I want to Check the index of a DataFrame. when the data is large.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_036", "prompt": "Could you Check the index of a DataFrame. in the latest version.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_037", "prompt": "Make sure to View the index of a DataFrame. in pandas.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_038", "prompt": "Hey, can you View the index of a DataFrame. in pandas.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.index/noise_039", "prompt": "You should View the index of a DataFrame. in the latest version.", "canonical_solution": "df.index = [100, 200, 300]\ndf", "api_name": "df.index"}
{"task_id": "df.memory_usage/noise_010", "prompt": "Make sure to Retrieve the memory consumption of a DataFrame. in the latest version.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_011", "prompt": "Just go ahead and Retrieve the memory consumption of a DataFrame. for better performance.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_012", "prompt": "Could you Retrieve the memory consumption of a DataFrame. if you don't mind.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_013", "prompt": "Hey, can you Calculate the memory usage of a pandas DataFrame. before continuing.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_014", "prompt": "Try to Calculate the memory usage of a pandas DataFrame. without using loops.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_015", "prompt": "Make sure to Calculate the memory usage of a pandas DataFrame. in pandas.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_016", "prompt": "In pandas, Determine how much memory a DataFrame occupies. before continuing.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_017", "prompt": "Try to Determine how much memory a DataFrame occupies. without using loops.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_018", "prompt": "Try to Determine how much memory a DataFrame occupies. in pandas.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_019", "prompt": "Hey, can you Fetch the memory footprint of a DataFrame. before continuing.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_020", "prompt": "I want to Fetch the memory footprint of a DataFrame. if you don't mind.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_021", "prompt": "Let's Fetch the memory footprint of a DataFrame. in the latest version.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_022", "prompt": "You should Obtain the amount of memory used by a DataFrame. thanks!", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_023", "prompt": "Kindly Obtain the amount of memory used by a DataFrame. when the data is large.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_024", "prompt": "Kindly Obtain the amount of memory used by a DataFrame. for better performance.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_025", "prompt": "Hey, can you Measure the memory utilization of a DataFrame. without using loops.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_026", "prompt": "Try to Measure the memory utilization of a DataFrame. as soon as possible.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_027", "prompt": "Make sure to Measure the memory utilization of a DataFrame. as soon as possible.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_028", "prompt": "Let's Check the memory allocation for a given DataFrame. thanks!", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_029", "prompt": "Try to Check the memory allocation for a given DataFrame. in pandas.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_030", "prompt": "Try to Check the memory allocation for a given DataFrame. when the data is large.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_031", "prompt": "Try to Assess the memory requirements of a DataFrame. before continuing.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_032", "prompt": "Just go ahead and Assess the memory requirements of a DataFrame. if you don't mind.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_033", "prompt": "I want to Assess the memory requirements of a DataFrame. as soon as possible.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_034", "prompt": "Kindly Display the memory usage statistics of a DataFrame. thanks!", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_035", "prompt": "Please Display the memory usage statistics of a DataFrame. in the latest version.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_036", "prompt": "Try to Display the memory usage statistics of a DataFrame. thanks!", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_037", "prompt": "Kindly Return the memory consumption details for a DataFrame. when the data is large.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_038", "prompt": "Let's Return the memory consumption details for a DataFrame. as soon as possible.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
{"task_id": "df.memory_usage/noise_039", "prompt": "You should Return the memory consumption details for a DataFrame. for better performance.", "canonical_solution": "df.memory_usage(deep=True)", "api_name": "df.memory_usage"}
