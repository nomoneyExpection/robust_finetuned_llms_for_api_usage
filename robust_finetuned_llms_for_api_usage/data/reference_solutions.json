{
  "df.merge": {
    "canonical_solutions": [
      "df1.merge(df2, how='left', on='a')",
      "df1 = pd.DataFrame({'left': ['foo', 'bar']})\ndf2 = pd.DataFrame({'right': [7, 8]})\ndf1\ndf2",
      "df1.merge(df2, how='cross')"
    ]
  },
  "df.groupby": {
    "canonical_solutions": [
      "df.groupby(by=\"a\").sum()",
      "df.groupby(by=[\"b\"]).sum()",
      "l = [[\"a\", 12, 12], [None, 12.3, 33.], [\"b\", 12.3, 123], [\"a\", 1, 1]]\ndf = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])"
    ]
  },
  "df.pivot": {
    "canonical_solutions": [
      "df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])",
      "df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n\"bar\": ['A', 'A', 'B', 'C'],\n\"baz\": [1, 2, 3, 4]})\ndf",
      "df = pd.DataFrame({\n\"lev1\": [1, 1, 1, 2, 2, 2],\n\"lev2\": [1, 1, 2, 1, 1, 2],\n\"lev3\": [1, 2, 1, 2, 1, 2],\n\"lev4\": [1, 2, 3, 4, 5, 6],\n\"values\": [0, 1, 2, 3, 4, 5]})\ndf"
    ]
  },
  "df.apply": {
    "canonical_solutions": [
      "df.apply(np.sqrt)",
      "df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\ndf",
      "df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)"
    ]
  },
  "df.loc": {
    "canonical_solutions": [
      "tuples = [\n('cobra', 'mark i'), ('cobra', 'mark ii'),\n('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n('viper', 'mark ii'), ('viper', 'mark iii')\n]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20],\n[1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf",
      "df.loc['cobra']",
      "df.loc[['viper', 'sidewinder']]"
    ]
  },
  "df.dropna": {
    "canonical_solutions": [
      "df.dropna(how='all')",
      "df.dropna(subset=['name', 'toy'])",
      "df.dropna()"
    ]
  },
  "df.fillna": {
    "canonical_solutions": [
      "df.fillna(value=values, limit=1)",
      "df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\ndf.fillna(df2)",
      "df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n[3, 4, np.nan, 1],\n[np.nan, np.nan, np.nan, np.nan],\n[np.nan, 3, np.nan, 4]],\ncolumns=list(\"ABCD\"))\ndf"
    ]
  },
  "df.sort_values": {
    "canonical_solutions": [
      "df = pd.DataFrame({\n'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n'col2': [2, 1, 9, 8, 7, 4],\n'col3': [0, 1, 9, 4, 2, 3],\n'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n})\ndf",
      "df.sort_values(by=['col1', 'col2'])",
      "df.sort_values(by='col4', key=lambda col: col.str.lower())"
    ]
  },
  "df.query": {
    "canonical_solutions": [
      "df[df.A > df.B]",
      "df[df.B == df['C C']]",
      "df = pd.DataFrame({'A': range(1, 6),\n'B': range(10, 0, -2),\n'C C': range(10, 5, -1)})\ndf\ndf.query('A > B')"
    ]
  },
  "df.duplicated": {
    "canonical_solutions": [
      "df.duplicated(subset=['brand'])",
      "df.duplicated(keep='last')",
      "df = pd.DataFrame({\n'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n'rating': [4, 4, 3.5, 15, 5]\n})\ndf"
    ]
  },
  "df.value_counts": {
    "canonical_solutions": [
      "df.value_counts(sort=False)",
      "df.value_counts(\"first_name\")",
      "df.value_counts(ascending=True)"
    ]
  },
  "df.astype": {
    "canonical_solutions": [
      "d = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf.dtypes",
      "df.astype('int32').dtypes",
      "ser.astype('category')"
    ]
  },
  "df.replace": {
    "canonical_solutions": [
      "df.replace(regex=r'^ba.$', value='new')",
      "df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})",
      "df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n'B': ['abc', 'bar', 'xyz']})\ndf.replace(to_replace=r'^ba.$', value='new', regex=True)"
    ]
  },
  "df.set_index": {
    "canonical_solutions": [
      "df = pd.DataFrame({'month': [1, 4, 7, 10],\n'year': [2012, 2014, 2013, 2014],\n'sale': [55, 40, 84, 31]})\ndf",
      "df.set_index('month')",
      "df.set_index(['year', 'month'])"
    ]
  },
  "df.reset_index": {
    "canonical_solutions": [
      "df.reset_index(level='class', col_level=1, col_fill='genus')",
      "df.reset_index(drop=True)",
      "df.reset_index(level='class', col_level=1, col_fill='species')"
    ]
  },
  "df.rename": {
    "canonical_solutions": [
      "df.rename(str.lower, axis='columns')",
      "df.rename({1: 2, 2: 4}, axis='index')",
      "df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\ndf.rename(columns={\"A\": \"a\", \"B\": \"c\"})"
    ]
  },
  "df.isnull": {
    "canonical_solutions": [
      "df.isna()",
      "ser.isna()",
      "df = pd.DataFrame(dict(age=[5, 6, np.nan],\nborn=[pd.NaT, pd.Timestamp('1939-05-27'),\npd.Timestamp('1940-04-25')],\nname=['Alfred', 'Batman', ''],\ntoy=[None, 'Batmobile', 'Joker']))\ndf"
    ]
  },
  "df.sample": {
    "canonical_solutions": [
      "df.sample(n=2, weights='num_specimen_seen', random_state=1)",
      "df.sample(frac=2, replace=True, random_state=1)",
      "df['num_legs'].sample(n=3, random_state=1)"
    ]
  },
  "df.nunique": {
    "canonical_solutions": [
      "df.nunique(axis=1)",
      "df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})\ndf.nunique()"
    ]
  },
  "df.to_csv": {
    "canonical_solutions": [
      "df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n'mask': ['red', 'purple'],\n'weapon': ['sai', 'bo staff']})\ndf.to_csv('out.csv', index=False)",
      "import os\nos.makedirs('folder/subfolder', exist_ok=True)\ndf.to_csv('folder/subfolder/out.csv')",
      "df.to_csv(index=False)\ncompression_opts = dict(method='zip',\narchive_name='out.csv')\ndf.to_csv('out.zip', index=False,\ncompression=compression_opts)"
    ]
  },
  "df.from_dict": {
    "canonical_solutions": [
      "data = {'index': [('a', 'b'), ('a', 'c')],\n'columns': [('x', 1), ('y', 2)],\n'data': [[1, 3], [2, 4]],\n'index_names': ['n1', 'n2'],\n'column_names': ['z1', 'z2']}\npd.DataFrame.from_dict(data, orient='tight')",
      "data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\npd.DataFrame.from_dict(data)",
      "data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\npd.DataFrame.from_dict(data, orient='index')"
    ]
  },
  "df.columns": {
    "canonical_solutions": [
      "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf\ndf.columns"
    ]
  },
  "df.index": {
    "canonical_solutions": [
      "df.index = [100, 200, 300]\ndf",
      "df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],\n'Age': [25, 30, 35],\n'Location': ['Seattle', 'New York', 'Kona']},\nindex=([10, 20, 30]))\ndf.index"
    ]
  },
  "df.memory_usage": {
    "canonical_solutions": [
      "df.memory_usage(deep=True)",
      "df['object'].astype('category').memory_usage(deep=True)",
      "df.memory_usage(index=False)"
    ]
  }
}