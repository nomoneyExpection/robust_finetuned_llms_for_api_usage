{
    "merge": {
        "from_doc": [
            ">>> df1.merge(df2, how='left', on='a')\n      a  b  c\n0   foo  1  3.0\n1   bar  2  NaN",
            ">>> df1 = pd.DataFrame({'left': ['foo', 'bar']})\n>>> df2 = pd.DataFrame({'right': [7, 8]})\n>>> df1\n    left\n0   foo\n1   bar\n>>> df2\n    right\n0   7\n1   8",
            ">>> df1.merge(df2, how='cross')\n   left  right\n0   foo      7\n1   foo      8\n2   bar      7\n3   bar      8",
            ">>> df1.merge(df2, left_on='lkey', right_on='rkey',\n...           suffixes=('_left', '_right'))\n  lkey  value_left rkey  value_right\n0  foo           1  foo            5\n1  foo           1  foo            8\n2  bar           2  bar            6\n3  baz           3  baz            7\n4  foo           5  foo            5\n5  foo           5  foo            8",
            ">>> df1.merge(df2, how='inner', on='a')\n      a  b  c\n0   foo  1  3",
            ">>> df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n>>> df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n>>> df1\n      a  b\n0   foo  1\n1   bar  2\n>>> df2\n      a  c\n0   foo  3\n1   baz  4",
            ">>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\nTraceback (most recent call last):\n...\nValueError: columns overlap but no suffix specified:\n    Index(['value'], dtype='object')",
            ">>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [1, 2, 3, 5]})\n>>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [5, 6, 7, 8]})\n>>> df1\n    lkey value\n0   foo      1\n1   bar      2\n2   baz      3\n3   foo      5\n>>> df2\n    rkey value\n0   foo      5\n1   bar      6\n2   baz      7\n3   foo      8",
            ">>> df1.merge(df2, left_on='lkey', right_on='rkey')\n  lkey  value_x rkey  value_y\n0  foo        1  foo        5\n1  foo        1  foo        8\n2  bar        2  bar        6\n3  baz        3  baz        7\n4  foo        5  foo        5\n5  foo        5  foo        8"
        ]
    },
    "groupby": {
        "from_doc": [
            ">>> df.groupby(by=\"a\").sum()\n    b     c\na\na   13.0   13.0\nb   12.3  123.0",
            ">>> df.groupby(by=[\"b\"]).sum()\n    a   c\nb\n1.0 2   3\n2.0 2   5",
            ">>> l = [[\"a\", 12, 12], [None, 12.3, 33.], [\"b\", 12.3, 123], [\"a\", 1, 1]]\n>>> df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])",
            ">>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n>>> df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0",
            ">>> df.groupby(by=[\"b\"], dropna=False).sum()\n    a   c\nb\n1.0 2   3\n2.0 2   5\nNaN 1   4",
            ">>> df.groupby(by=\"a\", dropna=False).sum()\n    b     c\na\na   13.0   13.0\nb   12.3  123.0\nNaN 12.3   33.0",
            ">>> df.groupby(\"Animal\", group_keys=False)[['Max Speed']].apply(lambda x: x)\n   Max Speed\n0      380.0\n1      370.0\n2       24.0\n3       26.0",
            ">>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n...                   index=index)\n>>> df\n                Max Speed\nAnimal Type\nFalcon Captive      390.0\n       Wild         350.0\nParrot Captive       30.0\n       Wild          20.0\n>>> df.groupby(level=0).mean()\n        Max Speed\nAnimal\nFalcon      370.0\nParrot       25.0\n>>> df.groupby(level=\"Type\").mean()\n         Max Speed\nType\nCaptive      210.0\nWild         185.0",
            ">>> l = [[1, 2, 3], [1, None, 4], [2, 1, 3], [1, 2, 2]]\n>>> df = pd.DataFrame(l, columns=[\"a\", \"b\", \"c\"])",
            ">>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df.groupby(\"Animal\", group_keys=True)[['Max Speed']].apply(lambda x: x)\n          Max Speed\nAnimal\nFalcon 0      380.0\n       1      370.0\nParrot 2       24.0\n       3       26.0"
        ]
    },
    "pivot": {
        "from_doc": [
            ">>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n      baz       zoo\nbar   A  B  C   A  B  C\nfoo\none   1  2  3   x  y  z\ntwo   4  5  6   q  w  t",
            ">>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n...                    \"bar\": ['A', 'A', 'B', 'C'],\n...                    \"baz\": [1, 2, 3, 4]})\n>>> df\n   foo bar  baz\n0  one   A    1\n1  one   A    2\n2  two   B    3\n3  two   C    4",
            ">>> df = pd.DataFrame({\n...        \"lev1\": [1, 1, 1, 2, 2, 2],\n...        \"lev2\": [1, 1, 2, 1, 1, 2],\n...        \"lev3\": [1, 2, 1, 2, 1, 2],\n...        \"lev4\": [1, 2, 3, 4, 5, 6],\n...        \"values\": [0, 1, 2, 3, 4, 5]})\n>>> df\n    lev1 lev2 lev3 lev4 values\n0   1    1    1    1    0\n1   1    1    2    2    1\n2   1    2    1    3    2\n3   2    1    2    4    3\n4   2    1    1    5    4\n5   2    2    2    6    5",
            ">>> df.pivot(index=[\"lev1\", \"lev2\"], columns=[\"lev3\"], values=\"values\")\n      lev3    1    2\nlev1  lev2\n   1     1  0.0  1.0\n         2  2.0  NaN\n   2     1  4.0  3.0\n         2  NaN  5.0",
            ">>> df.pivot(index=\"lev1\", columns=[\"lev2\", \"lev3\"], values=\"values\")\nlev2    1         2\nlev3    1    2    1    2\nlev1\n1     0.0  1.0  2.0  NaN\n2     4.0  3.0  NaN  5.0",
            ">>> df.pivot(index='foo', columns='bar', values='baz')\nTraceback (most recent call last):\n   ...\nValueError: Index contains duplicate entries, cannot reshape",
            ">>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n...                            'two'],\n...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n...                    'baz': [1, 2, 3, 4, 5, 6],\n...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n>>> df\n    foo   bar  baz  zoo\n0   one   A    1    x\n1   one   B    2    y\n2   one   C    3    z\n3   two   A    4    q\n4   two   B    5    w\n5   two   C    6    t",
            ">>> df.pivot(index='foo', columns='bar')['baz']\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6",
            ">>> df.pivot(index='foo', columns='bar', values='baz')\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6"
        ]
    },
    "apply": {
        "from_doc": [
            ">>> df.apply(np.sqrt)\n     A    B\n0  2.0  3.0\n1  2.0  3.0\n2  2.0  3.0",
            ">>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n>>> df\n   A  B\n0  4  9\n1  4  9\n2  4  9",
            ">>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n   foo  bar\n0    1    2\n1    1    2\n2    1    2",
            ">>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n   0  1\n0  1  2\n1  1  2\n2  1  2",
            ">>> df.apply(np.sum, axis=1)\n0    13\n1    13\n2    13\ndtype: int64",
            ">>> df.apply(lambda x: [1, 2], axis=1)\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\ndtype: object",
            ">>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n   A  B\n0  1  2\n1  1  2\n2  1  2",
            ">>> df.apply(np.sum, axis=0)\nA    12\nB    27\ndtype: int64"
        ]
    },
    "loc": {
        "from_doc": [
            ">>> tuples = [\n...     ('cobra', 'mark i'), ('cobra', 'mark ii'),\n...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n...     ('viper', 'mark ii'), ('viper', 'mark iii')\n... ]\n>>> index = pd.MultiIndex.from_tuples(tuples)\n>>> values = [[12, 2], [0, 4], [10, 20],\n...           [1, 4], [7, 1], [16, 36]]\n>>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n>>> df\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36",
            ">>> df.loc['cobra']\n         max_speed  shield\nmark i          12       2\nmark ii          0       4",
            ">>> df.loc[['viper', 'sidewinder']]\n            max_speed  shield\nviper               4       5\nsidewinder          7       8",
            ">>> df.loc[\"viper\", \"shield\"] += 5\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       5\nsidewinder          0       0",
            ">>> df.loc[df['shield'] > 35] = 0\n>>> df\n            max_speed  shield\ncobra              30      10\nviper               0       0\nsidewinder          0       0",
            ">>> df.loc[('cobra', 'mark i'), 'shield']\n2",
            ">>> shuffled_df = df.loc[[\"viper\", \"cobra\", \"sidewinder\"]]\n>>> df.loc[:] += shuffled_df\n>>> df\n            max_speed  shield\ncobra              60      20\nviper               0      10\nsidewinder          0       0",
            ">>> df.loc['cobra':'viper', 'max_speed']\ncobra    1\nviper    4\nName: max_speed, dtype: int64",
            ">>> df.loc[('cobra', 'mark ii')]\nmax_speed    0\nshield       4\nName: (cobra, mark ii), dtype: int64",
            ">>> df.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]\n            max_speed  shield\nviper          4       5",
            ">>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...                   index=[7, 8, 9], columns=['max_speed', 'shield'])\n>>> df\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8",
            ">>> df.loc[pd.Series([False, True, False],\n...                  index=['viper', 'sidewinder', 'cobra'])]\n                     max_speed  shield\nsidewinder          7       8",
            ">>> df.loc['viper']\nmax_speed    4\nshield       5\nName: viper, dtype: int64",
            ">>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                    max_speed  shield\ncobra      mark i          12       2\n           mark ii          0       4\nsidewinder mark i          10      20\n           mark ii          1       4\nviper      mark ii          7       1",
            ">>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...                   index=['cobra', 'viper', 'sidewinder'],\n...                   columns=['max_speed', 'shield'])\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4       5\nsidewinder          7       8",
            ">>> df.loc['cobra', 'shield']\n2",
            ">>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n>>> df\n            max_speed  shield\ncobra               1       2\nviper               4      50\nsidewinder          7      50",
            ">>> df.loc[:, 'max_speed'] = 30\n>>> df\n            max_speed  shield\ncobra              30      10\nviper              30      50\nsidewinder         30      50",
            ">>> df.loc[[('cobra', 'mark ii')]]\n               max_speed  shield\ncobra mark ii          0       4",
            ">>> df.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]\n            max_speed  shield\ncobra               1       2\nsidewinder          7       8",
            ">>> df.loc[df['shield'] > 6]\n            max_speed  shield\nsidewinder          7       8",
            ">>> df.loc[[False, False, True]]\n            max_speed  shield\nsidewinder          7       8",
            ">>> df.loc['cobra', 'mark i']\nmax_speed    12\nshield        2\nName: (cobra, mark i), dtype: int64",
            ">>> df.loc[lambda df: df['shield'] == 8]\n            max_speed  shield\nsidewinder          7       8",
            ">>> df.loc['cobra'] = 10\n>>> df\n            max_speed  shield\ncobra              10      10\nviper               4      50\nsidewinder          7      50",
            ">>> df.loc[('cobra', 'mark i'):'viper']\n                     max_speed  shield\ncobra      mark i           12       2\n           mark ii           0       4\nsidewinder mark i           10      20\n           mark ii           1       4\nviper      mark ii           7       1\n           mark iii         16      36",
            ">>> df.loc[7:9]\n   max_speed  shield\n7          1       2\n8          4       5\n9          7       8",
            ">>> df.loc[df['shield'] > 6, ['max_speed']]\n            max_speed\nsidewinder          7",
            ">>> df.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\n       max_speed  shield\nfoo\ncobra          1       2\nviper          4       5"
        ]
    },
    "dropna": {
        "from_doc": [
            ">>> df.dropna(how='all')\n       name        toy       born\n0    Alfred        NaN        NaT\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT",
            ">>> df.dropna(subset=['name', 'toy'])\n       name        toy       born\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT",
            ">>> df.dropna()\n     name        toy       born\n1  Batman  Batmobile 1940-04-25",
            ">>> df.dropna(axis='columns')\n       name\n0    Alfred\n1    Batman\n2  Catwoman",
            ">>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n...                             pd.NaT]})\n>>> df\n       name        toy       born\n0    Alfred        NaN        NaT\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT",
            ">>> df.dropna(thresh=2)\n       name        toy       born\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT"
        ]
    },
    "fillna": {
        "from_doc": [
            ">>> df.fillna(value=values, limit=1)\n     A    B    C    D\n0  0.0  2.0  2.0  0.0\n1  3.0  4.0  NaN  1.0\n2  NaN  1.0  NaN  3.0\n3  NaN  3.0  NaN  4.0",
            ">>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list(\"ABCE\"))\n>>> df.fillna(df2)\n     A    B    C    D\n0  0.0  2.0  0.0  0.0\n1  3.0  4.0  0.0  1.0\n2  0.0  0.0  0.0  NaN\n3  0.0  3.0  0.0  4.0",
            ">>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, np.nan],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list(\"ABCD\"))\n>>> df\n     A    B   C    D\n0  NaN  2.0 NaN  0.0\n1  3.0  4.0 NaN  1.0\n2  NaN  NaN NaN  NaN\n3  NaN  3.0 NaN  4.0",
            ">>> df.fillna(0)\n     A    B    C    D\n0  0.0  2.0  0.0  0.0\n1  3.0  4.0  0.0  1.0\n2  0.0  0.0  0.0  0.0\n3  0.0  3.0  0.0  4.0",
            ">>> values = {\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3}\n>>> df.fillna(value=values)\n     A    B    C    D\n0  0.0  2.0  2.0  0.0\n1  3.0  4.0  2.0  1.0\n2  0.0  1.0  2.0  3.0\n3  0.0  3.0  2.0  4.0"
        ]
    },
    "sort_values": {
        "from_doc": [
            ">>> df = pd.DataFrame({\n...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n...     'col2': [2, 1, 9, 8, 7, 4],\n...     'col3': [0, 1, 9, 4, 2, 3],\n...     'col4': ['a', 'B', 'c', 'D', 'e', 'F']\n... })\n>>> df\n  col1  col2  col3 col4\n0    A     2     0    a\n1    A     1     1    B\n2    B     9     9    c\n3  NaN     8     4    D\n4    D     7     2    e\n5    C     4     3    F",
            ">>> df.sort_values(by=['col1', 'col2'])\n  col1  col2  col3 col4\n1    A     1     1    B\n0    A     2     0    a\n2    B     9     9    c\n5    C     4     3    F\n4    D     7     2    e\n3  NaN     8     4    D",
            ">>> df.sort_values(by='col4', key=lambda col: col.str.lower())\n   col1  col2  col3 col4\n0    A     2     0    a\n1    A     1     1    B\n2    B     9     9    c\n3  NaN     8     4    D\n4    D     7     2    e\n5    C     4     3    F",
            ">>> df = pd.DataFrame({\n...    \"time\": ['0hr', '128hr', '72hr', '48hr', '96hr'],\n...    \"value\": [10, 20, 30, 40, 50]\n... })\n>>> df\n    time  value\n0    0hr     10\n1  128hr     20\n2   72hr     30\n3   48hr     40\n4   96hr     50\n>>> from natsort import index_natsorted\n>>> df.sort_values(\n...     by=\"time\",\n...     key=lambda x: np.argsort(index_natsorted(df[\"time\"]))\n... )\n    time  value\n0    0hr     10\n3   48hr     40\n2   72hr     30\n4   96hr     50\n1  128hr     20",
            ">>> df.sort_values(by=['col1'])\n  col1  col2  col3 col4\n0    A     2     0    a\n1    A     1     1    B\n2    B     9     9    c\n5    C     4     3    F\n4    D     7     2    e\n3  NaN     8     4    D",
            ">>> df.sort_values(by='col1', ascending=False, na_position='first')\n  col1  col2  col3 col4\n3  NaN     8     4    D\n4    D     7     2    e\n5    C     4     3    F\n2    B     9     9    c\n0    A     2     0    a\n1    A     1     1    B",
            ">>> df.sort_values(by='col1', ascending=False)\n  col1  col2  col3 col4\n4    D     7     2    e\n5    C     4     3    F\n2    B     9     9    c\n0    A     2     0    a\n1    A     1     1    B\n3  NaN     8     4    D"
        ]
    },
    "query": {
        "from_doc": [
            ">>> df[df.A > df.B]\n   A  B  C C\n4  5  2    6",
            ">>> df[df.B == df['C C']]\n   A   B  C C\n0  1  10   10",
            ">>> df = pd.DataFrame({'A': range(1, 6),\n...                    'B': range(10, 0, -2),\n...                    'C C': range(10, 5, -1)})\n>>> df\n   A   B  C C\n0  1  10   10\n1  2   8    9\n2  3   6    8\n3  4   4    7\n4  5   2    6\n>>> df.query('A > B')\n   A  B  C C\n4  5  2    6",
            ">>> df.query('B == `C C`')\n   A   B  C C\n0  1  10   10"
        ]
    },
    "duplicated": {
        "from_doc": [
            ">>> df.duplicated(subset=['brand'])\n0    False\n1     True\n2    False\n3     True\n4     True\ndtype: bool",
            ">>> df.duplicated(keep='last')\n0     True\n1    False\n2    False\n3    False\n4    False\ndtype: bool",
            ">>> df = pd.DataFrame({\n...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],\n...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],\n...     'rating': [4, 4, 3.5, 15, 5]\n... })\n>>> df\n    brand style  rating\n0  Yum Yum   cup     4.0\n1  Yum Yum   cup     4.0\n2  Indomie   cup     3.5\n3  Indomie  pack    15.0\n4  Indomie  pack     5.0",
            ">>> df.duplicated(keep=False)\n0     True\n1     True\n2    False\n3    False\n4    False\ndtype: bool",
            ">>> df.duplicated()\n0    False\n1     True\n2    False\n3    False\n4    False\ndtype: bool"
        ]
    },
    "value_counts": {
        "from_doc": [
            ">>> df.value_counts(sort=False)\nnum_legs  num_wings\n2         2            1\n4         0            2\n6         0            1\nName: count, dtype: int64",
            ">>> df.value_counts(\"first_name\")\nfirst_name\nJohn    2\nAnne    1\nBeth    1\nName: count, dtype: int64",
            ">>> df.value_counts(ascending=True)\nnum_legs  num_wings\n2         2            1\n6         0            1\n4         0            2\nName: count, dtype: int64",
            ">>> df = pd.DataFrame({'first_name': ['John', 'Anne', 'John', 'Beth'],\n...                    'middle_name': ['Smith', pd.NA, pd.NA, 'Louise']})\n>>> df\n  first_name middle_name\n0       John       Smith\n1       Anne        <NA>\n2       John        <NA>\n3       Beth      Louise",
            ">>> df.value_counts()\nfirst_name  middle_name\nBeth        Louise         1\nJohn        Smith          1\nName: count, dtype: int64",
            ">>> df = pd.DataFrame({'num_legs': [2, 4, 4, 6],\n...                    'num_wings': [2, 0, 0, 0]},\n...                   index=['falcon', 'dog', 'cat', 'ant'])\n>>> df\n        num_legs  num_wings\nfalcon         2          2\ndog            4          0\ncat            4          0\nant            6          0",
            ">>> df.value_counts(dropna=False)\nfirst_name  middle_name\nAnne        NaN            1\nBeth        Louise         1\nJohn        Smith          1\n            NaN            1\nName: count, dtype: int64",
            ">>> df.value_counts()\nnum_legs  num_wings\n4         0            2\n2         2            1\n6         0            1\nName: count, dtype: int64",
            ">>> df.value_counts(normalize=True)\nnum_legs  num_wings\n4         0            0.50\n2         2            0.25\n6         0            0.25\nName: proportion, dtype: float64"
        ]
    },
    "astype": {
        "from_doc": [
            ">>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object",
            ">>> df.astype('int32').dtypes\ncol1    int32\ncol2    int32\ndtype: object",
            ">>> ser.astype('category')\n0    1\n1    2\ndtype: category\nCategories (2, int32): [1, 2]",
            ">>> from pandas.api.types import CategoricalDtype\n>>> cat_dtype = CategoricalDtype(\n...     categories=[2, 1], ordered=True)\n>>> ser.astype(cat_dtype)\n0    1\n1    2\ndtype: category\nCategories (2, int64): [2 < 1]",
            ">>> ser_date = pd.Series(pd.date_range('20200101', periods=3))\n>>> ser_date\n0   2020-01-01\n1   2020-01-02\n2   2020-01-03\ndtype: datetime64[ns]",
            ">>> df.astype({'col1': 'int32'}).dtypes\ncol1    int32\ncol2    int64\ndtype: object",
            ">>> ser = pd.Series([1, 2], dtype='int32')\n>>> ser\n0    1\n1    2\ndtype: int32\n>>> ser.astype('int64')\n0    1\n1    2\ndtype: int64"
        ]
    },
    "replace": {
        "from_doc": [
            ">>> df.replace(regex=r'^ba.$', value='new')\n        A    B\n0   new  abc\n1   foo  new\n2  bait  xyz",
            ">>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n        A    B\n0   new  abc\n1   xyz  new\n2  bait  xyz",
            ">>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n...                    'B': ['abc', 'bar', 'xyz']})\n>>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n        A    B\n0   new  abc\n1   foo  new\n2  bait  xyz",
            ">>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n        A    B\n0   new  abc\n1   new  new\n2  bait  xyz",
            ">>> df.replace({'A': {0: 100, 4: 400}})\n        A  B  C\n0  100  5  a\n1    1  6  b\n2    2  7  c\n3    3  8  d\n4  400  9  e",
            ">>> s.replace('a', None)\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object",
            ">>> s = pd.Series([10, 'a', 'a', 'b', 'a'])",
            ">>> s.replace({'a': None})\n0      10\n1    None\n2    None\n3       b\n4    None\ndtype: object",
            ">>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n    A  B  C\n0  4  5  a\n1  3  6  b\n2  2  7  c\n3  1  8  d\n4  4  9  e",
            ">>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)\n    A  B  C\n0  0  e  f\n1  1  e  g\n2  2  e  e\n3  3  d  e\n4  4  e  e",
            ">>> s = pd.Series([1, 2, 3, 4, 5])\n>>> s.replace(1, 5)\n0    5\n1    2\n2    3\n3    4\n4    5\ndtype: int64",
            ">>> df.replace({'A': 0, 'B': 5}, 100)\n        A    B  C\n0  100  100  a\n1    1    6  b\n2    2    7  c\n3    3    8  d\n4    4    9  e",
            ">>> s.replace('a')\n0    10\n1    10\n2    10\n3     b\n4     b\ndtype: object",
            ">>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n        A    B\n0   new  abc\n1   foo  bar\n2  bait  xyz",
            ">>> s.replace([1, 2], method='bfill')\n0    3\n1    3\n2    3\n3    4\n4    5\ndtype: int64",
            ">>> df.replace({0: 10, 1: 100})\n        A  B  C\n0   10  5  a\n1  100  6  b\n2    2  7  c\n3    3  8  d\n4    4  9  e",
            ">>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': ['a', 'b', 'c', 'd', 'e'],\n...                    'C': ['f', 'g', 'h', 'i', 'j']})",
            ">>> df.replace([0, 1, 2, 3], 4)\n    A  B  C\n0  4  5  a\n1  4  6  b\n2  4  7  c\n3  4  8  d\n4  4  9  e",
            ">>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n...                    'B': [5, 6, 7, 8, 9],\n...                    'C': ['a', 'b', 'c', 'd', 'e']})\n>>> df.replace(0, 5)\n    A  B  C\n0  5  5  a\n1  1  6  b\n2  2  7  c\n3  3  8  d\n4  4  9  e",
            ">>> df.replace(to_replace='^[a-g]', value='e', regex=True)\n    A  B  C\n0  0  e  e\n1  1  e  e\n2  2  e  h\n3  3  e  i\n4  4  e  j"
        ]
    },
    "set_index": {
        "from_doc": [
            ">>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n...                    'year': [2012, 2014, 2013, 2014],\n...                    'sale': [55, 40, 84, 31]})\n>>> df\n   month  year  sale\n0      1  2012    55\n1      4  2014    40\n2      7  2013    84\n3     10  2014    31",
            ">>> df.set_index('month')\n       year  sale\nmonth\n1      2012    55\n4      2014    40\n7      2013    84\n10     2014    31",
            ">>> df.set_index(['year', 'month'])\n            sale\nyear  month\n2012  1     55\n2014  4     40\n2013  7     84\n2014  10    31",
            ">>> s = pd.Series([1, 2, 3, 4])\n>>> df.set_index([s, s**2])\n      month  year  sale\n1 1       1  2012    55\n2 4       4  2014    40\n3 9       7  2013    84\n4 16     10  2014    31",
            ">>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n         month  sale\n   year\n1  2012  1      55\n2  2014  4      40\n3  2013  7      84\n4  2014  10     31"
        ]
    },
    "reset_index": {
        "from_doc": [
            ">>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                genus  speed species\n                class    max    type\nname\nfalcon           bird  389.0     fly\nparrot           bird   24.0     fly\nlion           mammal   80.5     run\nmonkey         mammal    NaN    jump",
            ">>> df.reset_index(drop=True)\n    class  max_speed\n0    bird      389.0\n1    bird       24.0\n2  mammal       80.5\n3  mammal        NaN",
            ">>> df.reset_index(level='class', col_level=1, col_fill='species')\n              species  speed species\n                class    max    type\nname\nfalcon           bird  389.0     fly\nparrot           bird   24.0     fly\nlion           mammal   80.5     run\nmonkey         mammal    NaN    jump",
            ">>> df.reset_index(level='class', col_level=1)\n                speed species\n         class    max    type\nname\nfalcon    bird  389.0     fly\nparrot    bird   24.0     fly\nlion    mammal   80.5     run\nmonkey  mammal    NaN    jump",
            ">>> df = pd.DataFrame([('bird', 389.0),\n...                    ('bird', 24.0),\n...                    ('mammal', 80.5),\n...                    ('mammal', np.nan)],\n...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n...                   columns=('class', 'max_speed'))\n>>> df\n         class  max_speed\nfalcon    bird      389.0\nparrot    bird       24.0\nlion    mammal       80.5\nmonkey  mammal        NaN",
            ">>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n...                                    ('bird', 'parrot'),\n...                                    ('mammal', 'lion'),\n...                                    ('mammal', 'monkey')],\n...                                   names=['class', 'name'])\n>>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n...                                      ('species', 'type')])\n>>> df = pd.DataFrame([(389.0, 'fly'),\n...                    (24.0, 'fly'),\n...                    (80.5, 'run'),\n...                    (np.nan, 'jump')],\n...                   index=index,\n...                   columns=columns)\n>>> df\n               speed species\n                 max    type\nclass  name\nbird   falcon  389.0     fly\n       parrot   24.0     fly\nmammal lion     80.5     run\n       monkey    NaN    jump",
            ">>> df.reset_index(level='class')\n         class  speed species\n                  max    type\nname\nfalcon    bird  389.0     fly\nparrot    bird   24.0     fly\nlion    mammal   80.5     run\nmonkey  mammal    NaN    jump",
            ">>> df.reset_index(names=['classes', 'names'])\n  classes   names  speed species\n                     max    type\n0    bird  falcon  389.0     fly\n1    bird  parrot   24.0     fly\n2  mammal    lion   80.5     run\n3  mammal  monkey    NaN    jump",
            ">>> df.reset_index()\n    index   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal        NaN"
        ]
    },
    "rename": {
        "from_doc": [
            ">>> df.rename(str.lower, axis='columns')\n   a  b\n0  1  4\n1  2  5\n2  3  6",
            ">>> df.rename({1: 2, 2: 4}, axis='index')\n   A  B\n0  1  4\n2  2  5\n4  3  6",
            ">>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n>>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n   a  c\n0  1  4\n1  2  5\n2  3  6",
            ">>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\nTraceback (most recent call last):\nKeyError: ['C'] not found in axis",
            ">>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n   A  B\nx  1  4\ny  2  5\nz  3  6",
            ">>> df.index\nRangeIndex(start=0, stop=3, step=1)\n>>> df.rename(index=str).index\nIndex(['0', '1', '2'], dtype='object')"
        ]
    },
    "concat": {},
    "isnull": {
        "from_doc": [
            ">>> df.isna()\n     age   born   name    toy\n0  False   True  False   True\n1  False  False  False  False\n2   True  False  False  False",
            ">>> ser.isna()\n0    False\n1    False\n2     True\ndtype: bool",
            ">>> df = pd.DataFrame(dict(age=[5, 6, np.nan],\n...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),\n...                              pd.Timestamp('1940-04-25')],\n...                        name=['Alfred', 'Batman', ''],\n...                        toy=[None, 'Batmobile', 'Joker']))\n>>> df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker",
            ">>> ser = pd.Series([5, 6, np.nan])\n>>> ser\n0    5.0\n1    6.0\n2    NaN\ndtype: float64"
        ]
    },
    "sample": {
        "from_doc": [
            ">>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\nfish           0          0                  8",
            ">>> df.sample(frac=2, replace=True, random_state=1)\n        num_legs  num_wings  num_specimen_seen\ndog            4          0                  2\nfish           0          0                  8\nfalcon         2          2                 10\nfalcon         2          2                 10\nfish           0          0                  8\ndog            4          0                  2\nfish           0          0                  8\ndog            4          0                  2",
            ">>> df['num_legs'].sample(n=3, random_state=1)\nfish      0\nspider    8\nfalcon    2\nName: num_legs, dtype: int64",
            ">>> df.sample(frac=0.5, replace=True, random_state=1)\n      num_legs  num_wings  num_specimen_seen\ndog          4          0                  2\nfish         0          0                  8",
            ">>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n...                    'num_wings': [2, 0, 0, 0],\n...                    'num_specimen_seen': [10, 2, 1, 8]},\n...                   index=['falcon', 'dog', 'spider', 'fish'])\n>>> df\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\ndog            4          0                  2\nspider         8          0                  1\nfish           0          0                  8"
        ]
    },
    "nunique": {
        "from_doc": [
            ">>> df.nunique(axis=1)\n0    1\n1    2\n2    2\ndtype: int64",
            ">>> df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})\n>>> df.nunique()\nA    3\nB    2\ndtype: int64"
        ]
    },
    "to_csv": {
        "from_doc": [
            ">>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n>>> df.to_csv('out.csv', index=False)",
            ">>> import os  \n>>> os.makedirs('folder/subfolder', exist_ok=True)  \n>>> df.to_csv('folder/subfolder/out.csv')",
            ">>> df.to_csv(index=False)\n'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n>>> compression_opts = dict(method='zip',\n...                         archive_name='out.csv')  \n>>> df.to_csv('out.zip', index=False,\n...           compression=compression_opts)",
            ">>> from pathlib import Path  \n>>> filepath = Path('folder/subfolder/out.csv')  \n>>> filepath.parent.mkdir(parents=True, exist_ok=True)  \n>>> df.to_csv(filepath)"
        ]
    },
    "from_dict": {
        "from_doc": [
            ">>> data = {'index': [('a', 'b'), ('a', 'c')],\n...         'columns': [('x', 1), ('y', 2)],\n...         'data': [[1, 3], [2, 4]],\n...         'index_names': ['n1', 'n2'],\n...         'column_names': ['z1', 'z2']}\n>>> pd.DataFrame.from_dict(data, orient='tight')\nz1     x  y\nz2     1  2\nn1 n2\na  b   1  3\n   c   2  4",
            ">>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n>>> pd.DataFrame.from_dict(data)\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d",
            ">>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n>>> pd.DataFrame.from_dict(data, orient='index')\n       0  1  2  3\nrow_1  3  2  1  0\nrow_2  a  b  c  d",
            ">>> pd.DataFrame.from_dict(data, orient='index',\n...                        columns=['A', 'B', 'C', 'D'])\n       A  B  C  D\nrow_1  3  2  1  0\nrow_2  a  b  c  d"
        ]
    },
    "columns": {
        "from_doc": [
            ">>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\n>>> df\n     A  B\n0    1  3\n1    2  4\n>>> df.columns\nIndex(['A', 'B'], dtype='object')"
        ]
    },
    "index": {
        "from_doc": [
            ">>> df.index = [100, 200, 300]\n>>> df\n    Name  Age Location\n100  Alice   25  Seattle\n200    Bob   30 New York\n300  Aritra  35    Kona",
            ">>> df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],\n...                    'Age': [25, 30, 35],\n...                    'Location': ['Seattle', 'New York', 'Kona']},\n...                   index=([10, 20, 30]))\n>>> df.index\nIndex([10, 20, 30], dtype='int64')"
        ]
    },
    "memory_usage": {
        "from_doc": [
            ">>> df.memory_usage(deep=True)\nIndex            128\nint64          40000\nfloat64        40000\ncomplex128     80000\nobject        180000\nbool            5000\ndtype: int64",
            ">>> df['object'].astype('category').memory_usage(deep=True)\n5244",
            ">>> df.memory_usage(index=False)\nint64         40000\nfloat64       40000\ncomplex128    80000\nobject        40000\nbool           5000\ndtype: int64",
            ">>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n>>> data = dict([(t, np.ones(shape=5000, dtype=int).astype(t))\n...              for t in dtypes])\n>>> df = pd.DataFrame(data)\n>>> df.head()\n   int64  float64            complex128  object  bool\n0      1      1.0              1.0+0.0j       1  True\n1      1      1.0              1.0+0.0j       1  True\n2      1      1.0              1.0+0.0j       1  True\n3      1      1.0              1.0+0.0j       1  True\n4      1      1.0              1.0+0.0j       1  True",
            ">>> df.memory_usage()\nIndex           128\nint64         40000\nfloat64       40000\ncomplex128    80000\nobject        40000\nbool           5000\ndtype: int64"
        ]
    }
}