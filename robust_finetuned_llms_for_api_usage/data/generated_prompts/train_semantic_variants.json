[
  {
    "api_name": "df.head",
    "instruction": "display the first few rows of a DataFrame",
    "variants": [
      "Show the initial rows of the DataFrame.",
      "Print the first few records from the DataFrame.",
      "Display the top rows of the DataFrame.",
      "Output the beginning of the DataFrame.",
      "View the first several rows of the DataFrame.",
      "Preview the DataFrame by showing the first rows.",
      "Retrieve and display the DataFrame's first entries.",
      "List the starting rows of the DataFrame.",
      "Exhibit the earliest rows in the DataFrame.",
      "Present the initial portion of the DataFrame.",
      "Render the first few lines of the DataFrame.",
      "Show a glimpse of the DataFrame's first rows.",
      "Display the leading rows of the DataFrame.",
      "Print out the first n rows of the DataFrame.",
      "Output the DataFrame's head."
    ]
  },
  {
    "api_name": "df.tail",
    "instruction": "display the last few rows of a DataFrame",
    "variants": [
      "Show the final rows of the DataFrame.",
      "Print the last several rows of the DataFrame.",
      "Display the tail of the DataFrame.",
      "Output the last few entries in the DataFrame.",
      "Retrieve and show the last rows of the DataFrame.",
      "View the ending rows of the DataFrame.",
      "Present the last N rows of the DataFrame.",
      "Render the trailing rows of the DataFrame.",
      "Exhibit the bottom rows of the DataFrame.",
      "Show the last records in the DataFrame.",
      "Print the tail end of the DataFrame.",
      "Display the final few records from the DataFrame.",
      "Output the last portion of the DataFrame.",
      "List the last few DataFrame rows.",
      "Show the concluding rows of the DataFrame."
    ]
  },
  {
    "api_name": "df.describe",
    "instruction": "generate descriptive statistics of a DataFrame",
    "variants": [
      "Compute summary statistics for the DataFrame.",
      "Calculate descriptive stats for the DataFrame.",
      "Display statistical summaries of the DataFrame.",
      "Generate a statistical summary of the DataFrame.",
      "Output descriptive statistics for the DataFrame.",
      "Provide summary metrics for the DataFrame.",
      "Analyze the DataFrame using descriptive statistics.",
      "Retrieve key statistics from the DataFrame.",
      "Summarize the DataFrame numerically.",
      "Extract statistical insights from the DataFrame.",
      "Show descriptive analytics for the DataFrame.",
      "Report summary statistics for the DataFrame.",
      "Evaluate the DataFrame with statistical measures.",
      "Present an overview of the DataFrame's statistics.",
      "Create a statistical breakdown of the DataFrame."
    ]
  },
  {
    "api_name": "df.info",
    "instruction": "print summary information about a DataFrame",
    "variants": [
      "Display the summary details of the DataFrame.",
      "Show an overview of the DataFrame's information.",
      "Output descriptive statistics for the DataFrame.",
      "Print a concise summary of the DataFrame.",
      "Generate a summary report of the DataFrame.",
      "Display the DataFrame's metadata and statistics.",
      "Show key details about the DataFrame.",
      "Print basic information about the DataFrame.",
      "Output a statistical summary of the DataFrame.",
      "Display the structure and summary of the DataFrame.",
      "Show a summary of the DataFrame's contents.",
      "Print an overview of the DataFrame's data.",
      "Generate a high-level summary of the DataFrame.",
      "Display summary statistics for the DataFrame.",
      "Output a brief summary of the DataFrame's attributes."
    ]
  },
  {
    "api_name": "df.corr",
    "instruction": "compute pairwise correlation of columns",
    "variants": [
      "Calculate the correlation between each pair of columns.",
      "Determine the pairwise correlations among columns.",
      "Compute the correlation matrix for all columns.",
      "Find the correlation coefficients between every two columns.",
      "Generate a correlation matrix for the dataframe columns.",
      "Assess the pairwise column correlations.",
      "Measure the correlation between all column pairs.",
      "Compute inter-column correlation values.",
      "Derive the correlation relationships between columns.",
      "Obtain a correlation matrix showing column dependencies.",
      "Evaluate the pairwise correlations across columns.",
      "Calculate the Pearson correlation between columns.",
      "Generate pairwise correlation coefficients for the dataset columns.",
      "Compute the correlation scores for every column combination.",
      "Analyze the correlation between each pair of variables in the dataframe."
    ]
  },
  {
    "api_name": "df.cov",
    "instruction": "compute pairwise covariance of columns",
    "variants": [
      "Calculate the covariance between each pair of columns.",
      "Determine the pairwise covariance for all column combinations.",
      "Compute the covariance matrix for the columns.",
      "Find the covariances between every pair of columns.",
      "Generate a covariance matrix from the columns.",
      "Assess the pairwise column covariances.",
      "Measure the covariance among all column pairs.",
      "Derive the covariance relationships between columns.",
      "Calculate inter-column covariances.",
      "Obtain the covariance values for each column pair.",
      "Construct a covariance matrix across all columns.",
      "Evaluate the covariance between every two columns.",
      "Compute covariances for each combination of columns.",
      "Extract the pairwise covariance matrix of the columns.",
      "Quantify the covariance between all column pairs."
    ]
  },
  {
    "api_name": "df.diff",
    "instruction": "calculate the difference of a DataFrame element compared with another element",
    "variants": [
      "Compute the difference between two elements in a DataFrame.",
      "Find the difference of one DataFrame element relative to another.",
      "Subtract one DataFrame element from another and return the result.",
      "Determine the numerical difference between two elements in a DataFrame.",
      "Calculate the delta between two specified elements in a DataFrame.",
      "Measure the difference in value between two DataFrame elements.",
      "Evaluate the subtraction of one DataFrame element from another.",
      "Compute the offset between two elements in a DataFrame.",
      "Obtain the difference between two selected elements in a DataFrame.",
      "Subtract a DataFrame element from another and output the difference.",
      "Calculate the gap between two elements in a DataFrame.",
      "Identify the difference in magnitude between two DataFrame elements.",
      "Derive the result of subtracting one DataFrame element from another.",
      "Compute the variance between two elements in a DataFrame.",
      "Return the difference when comparing two elements in a DataFrame."
    ]
  },
  {
    "api_name": "df.rank",
    "instruction": "compute numerical data ranks along axis",
    "variants": [
      "Rank numerical values along the specified axis.",
      "Calculate the rank of numeric data across a given axis.",
      "Determine the ordinal ranking of numerical data along an axis.",
      "Assign ranks to numerical values along the chosen dimension.",
      "Compute the order of numerical data sorted along the axis.",
      "Generate rankings for numeric values along the specified axis.",
      "Evaluate the relative positions of numerical data along an axis.",
      "Produce rank-order statistics for numerical data across an axis.",
      "Obtain the ranked sequence of numeric values along the axis.",
      "Derive the positional ranking of numerical data along a given axis.",
      "Compute percentile ranks for numerical data along the axis.",
      "Assign ordinal positions to numerical values along the axis.",
      "Calculate the sorted rank order of numeric data along the axis.",
      "Determine the hierarchical ordering of numerical data along the axis.",
      "Rank the numeric entries along the specified dimension."
    ]
  },
  {
    "api_name": "df.rolling",
    "instruction": "provide rolling window calculations",
    "variants": [
      "Compute rolling window statistics.",
      "Perform calculations over a moving window.",
      "Generate rolling window aggregations.",
      "Calculate metrics across sliding windows.",
      "Apply rolling window operations.",
      "Execute moving window computations.",
      "Derive rolling statistical measures.",
      "Implement sliding window calculations.",
      "Produce rolling averages and other metrics.",
      "Compute moving averages and rolling stats.",
      "Analyze data using rolling windows.",
      "Calculate rolling aggregations over a specified window.",
      "Generate time-based rolling computations.",
      "Apply window-based statistical functions.",
      "Perform rolling analysis on the dataset."
    ]
  },
  {
    "api_name": "df.expanding",
    "instruction": "provide expanding window calculations",
    "variants": [
      "Generate expanding window computations.",
      "Compute expanding window statistics.",
      "Calculate expanding window metrics.",
      "Perform expanding window operations.",
      "Return expanding window aggregations.",
      "Show expanding window results.",
      "Execute expanding window functions.",
      "Derive expanding window values.",
      "Apply expanding window analysis.",
      "Output expanding window calculations.",
      "Construct expanding window summaries.",
      "Implement expanding window transformations.",
      "Display expanding window aggregations.",
      "Produce expanding window statistics.",
      "Retrieve expanding window computations."
    ]
  },
  {
    "api_name": "df.ewm",
    "instruction": "provide exponential weighted functions",
    "variants": [
      "List the exponential weighted functions available.",
      "Show all exponential weighted functions.",
      "Give me the exponential weighted functions in pandas.",
      "What are the exponential weighted functions provided?",
      "Display the available exponential weighted functions.",
      "Can you enumerate the exponential weighted functions?",
      "Provide a list of functions for exponential weighting.",
      "Name the exponential weighted functions in the API.",
      "What exponential weighted functions does pandas offer?",
      "Share the supported exponential weighted functions.",
      "Detail the exponential weighted functions accessible.",
      "Indicate the available exponential weighted functions.",
      "Return all exponential weighted functions in the library.",
      "Present the exponential weighted functions that can be used.",
      "Outline the exponential weighted functions included."
    ]
  },
  {
    "api_name": "df.interpolate",
    "instruction": "interpolate missing values",
    "variants": [
      "Fill in the missing values using interpolation.",
      "Estimate the missing data points through interpolation.",
      "Use interpolation to replace the NaN values.",
      "Apply interpolation to fill the gaps in the data.",
      "Compute missing entries by interpolation.",
      "Perform interpolation to complete the missing values.",
      "Insert interpolated values where data is missing.",
      "Replace missing entries with interpolated estimates.",
      "Fill missing data points using an interpolation method.",
      "Use linear or other interpolation to handle missing values.",
      "Estimate missing values by applying interpolation techniques.",
      "Interpolate the NaN entries in the dataset.",
      "Fill in the blanks in the data using interpolation.",
      "Generate estimated values for missing data via interpolation.",
      "Complete the dataset by interpolating missing values."
    ]
  },
  {
    "api_name": "df.bfill",
    "instruction": "fill missing values using backward fill",
    "variants": [
      "Replace NaN values with the next valid observation using backward fill.",
      "Use backfill to impute missing data.",
      "Forward fill missing values in reverse order.",
      "Fill NA entries by propagating the next non-null value backward.",
      "Apply bfill to handle missing data.",
      "Use backward fill to replace missing values with subsequent data.",
      "Propagate next observed values to fill gaps in the data.",
      "Impute nulls by carrying the next available value backward.",
      "Replace blanks using the backward fill method.",
      "Fill missing entries by taking the next value in reverse direction.",
      "Use the bfill method to populate NaN values.",
      "Perform a backward fill operation to complete missing data.",
      "Substitute absent values with the next valid entry via backfill.",
      "Backward propagate non-null values to fill NA positions.",
      "Fill empty cells using the next observed value in reverse order."
    ]
  },
  {
    "api_name": "df.ffill",
    "instruction": "fill missing values using forward fill",
    "variants": [
      "Replace missing values with the previous known value.",
      "Use forward fill to handle NaN entries.",
      "Propagate the last valid observation to fill gaps.",
      "Apply forward filling for missing data.",
      "Fill NA values by carrying the last valid entry forward.",
      "Use ffill to impute missing entries.",
      "Forward-fill the null values in the dataset.",
      "Replace NaN values by forward propagation.",
      "Impute missing data using the forward fill method.",
      "Fill in missing values using the preceding non-null value.",
      "Forward-fill to complete the missing entries.",
      "Use pandas ffill to replace missing data.",
      "Populate NA values by copying the last available value forward.",
      "Apply forward-fill imputation to handle missing data.",
      "Fill gaps in the data by forward-filling NaN values."
    ]
  },
  {
    "api_name": "df.cumsum",
    "instruction": "compute cumulative sum",
    "variants": [
      "Calculate the running total.",
      "Determine the accumulated sum.",
      "Find the cumulative total.",
      "Compute the progressive sum.",
      "Generate the running summation.",
      "Derive the aggregated sum over time.",
      "Evaluate the cumulative addition.",
      "Calculate the rolling sum.",
      "Obtain the sequential summation.",
      "Compute the running accumulation.",
      "Determine the step-by-step total.",
      "Find the successive addition result.",
      "Generate the incremental sum.",
      "Calculate the accumulated total.",
      "Compute the sum with accumulation."
    ]
  },
  {
    "api_name": "df.cumprod",
    "instruction": "compute cumulative product",
    "variants": [
      "Calculate the cumulative product.",
      "Determine the running product.",
      "Find the accumulated product.",
      "Compute the progressive product.",
      "Generate the cumulative multiplication result.",
      "Evaluate the product over successive accumulations.",
      "Derive the running multiplicative total.",
      "Compute the product cumulatively.",
      "Calculate the aggregated product over elements.",
      "Obtain the cumulative multiplicative sum.",
      "Compute the product in a cumulative manner.",
      "Find the step-by-step multiplicative accumulation.",
      "Generate the product with cumulative aggregation.",
      "Calculate the rolling product.",
      "Determine the product with successive multiplication."
    ]
  },
  {
    "api_name": "df.cummax",
    "instruction": "compute cumulative maximum",
    "variants": [
      "Calculate the running maximum.",
      "Determine the cumulative highest values.",
      "Find the rolling maximum accumulation.",
      "Compute the maximum value up to each point.",
      "Generate the cumulative peak values.",
      "Track the progressive maximum.",
      "Evaluate the running highest value.",
      "Derive the accumulated maximum.",
      "Obtain the cumulative max over the sequence.",
      "Compute the maximum observed so far at each step.",
      "Calculate the running record high.",
      "Identify the step-wise maximum accumulation.",
      "Return the expanding maximum.",
      "Compute the max value cumulatively.",
      "Generate the maximum cumulative result."
    ]
  },
  {
    "api_name": "df.cummin",
    "instruction": "compute cumulative minimum",
    "variants": [
      "Calculate the running minimum.",
      "Find the cumulative minimum.",
      "Determine the minimum up to each point.",
      "Compute the rolling minimum cumulatively.",
      "Obtain the minimum value accumulated so far.",
      "Generate the progressively decreasing minimum.",
      "Track the minimum value over a cumulative window.",
      "Return the minimum encountered at each step.",
      "Apply a cumulative minimum operation.",
      "Derive the minimum values in a forward-filling manner.",
      "Compute the ongoing minimum across the dataset.",
      "Extract the minimum cumulated over the sequence.",
      "Evaluate the minimum value up to the current position.",
      "Calculate the minimum so far at each step.",
      "Retrieve the successively decreasing minimum values."
    ]
  },
  {
    "api_name": "df.clip",
    "instruction": "trim values at input thresholds",
    "variants": [
      "Clip values to specified thresholds",
      "Limit values to given upper and lower bounds",
      "Constrain values within input threshold ranges",
      "Bound values at provided cutoff points",
      "Censor values outside the specified thresholds",
      "Restrict values to the given minimum and maximum limits",
      "Truncate values beyond the input boundaries",
      "Cap values at the defined threshold levels",
      "Filter values to stay within the provided range",
      "Threshold values at the input limits",
      "Cut off values outside the given thresholds",
      "Squeeze values into the specified range",
      "Normalize values to the input bounds",
      "Adjust values to fit within the defined thresholds",
      "Enforce value constraints based on input limits"
    ]
  },
  {
    "api_name": "df.mask",
    "instruction": "replace values where condition is True",
    "variants": [
      "Substitute values when the condition is met.",
      "Update values for rows that satisfy the condition.",
      "Replace entries where the specified condition holds.",
      "Modify values in cases where the condition is True.",
      "Change values based on a given condition.",
      "Swap values where the criteria are satisfied.",
      "Overwrite values if the condition evaluates to True.",
      "Alter data entries where the condition applies.",
      "Replace instances where the condition is valid.",
      "Assign new values to rows meeting the condition.",
      "Transform values where the condition is fulfilled.",
      "Apply replacements to records matching the condition.",
      "Set new values for elements that pass the condition.",
      "Replace data points in rows where the condition is True.",
      "Modify records only if the condition is satisfied."
    ]
  },
  {
    "api_name": "df.where",
    "instruction": "replace values where condition is False",
    "variants": [
      "Substitute values when the condition evaluates to False.",
      "Update values where the specified condition is not met.",
      "Replace entries if the condition returns False.",
      "Modify values for rows where the condition is False.",
      "Change values in cases where the condition fails.",
      "Overwrite values when the condition is not satisfied.",
      "Swap values where the given condition is False.",
      "Alter values for records that do not meet the condition.",
      "Replace data points where the condition does not hold.",
      "Assign new values when the condition is False.",
      "Transform values for entries failing the condition.",
      "Update cells where the condition is not True.",
      "Replace elements where the condition is invalid.",
      "Fill values in positions where the condition evaluates to False.",
      "Override values if the condition is unmet."
    ]
  },
  {
    "api_name": "df.select_dtypes",
    "instruction": "select columns based on data types",
    "variants": [
      "Filter columns by their data types",
      "Choose columns according to their dtype",
      "Extract columns based on their data type",
      "Select dataframe columns by dtype",
      "Retrieve columns matching specified data types",
      "Pick columns depending on their data type",
      "Isolate columns by their dtype",
      "Subset columns using data type criteria",
      "Return columns of specific data types",
      "Filter dataframe columns by their dtype",
      "Extract only columns with certain data types",
      "Select specific dtypes from the dataframe",
      "Choose columns where dtype matches a condition",
      "Retrieve only columns of a given data type",
      "Subset the dataframe by column data types"
    ]
  },
  {
    "api_name": "df.insert",
    "instruction": "insert a column into a DataFrame",
    "variants": [
      "Add a new column to a DataFrame.",
      "Append a column to a DataFrame.",
      "Place a column in a DataFrame.",
      "Include a column in a DataFrame.",
      "Inject a column into a DataFrame.",
      "Embed a column in a DataFrame.",
      "Incorporate a column into a DataFrame.",
      "Introduce a column to a DataFrame.",
      "Add a new data column to a DataFrame.",
      "Insert a new column into a DataFrame.",
      "Attach a column to a DataFrame.",
      "Put a column into a DataFrame.",
      "Add an additional column to a DataFrame.",
      "Create and insert a column in a DataFrame.",
      "Supply a new column to a DataFrame."
    ]
  },
  {
    "api_name": "df.drop",
    "instruction": "drop specified labels from rows or columns",
    "variants": [
      "Remove specific labels from rows or columns.",
      "Delete specified labels along rows or columns.",
      "Eliminate given labels from the rows or columns.",
      "Exclude certain labels in rows or columns.",
      "Drop selected labels from either rows or columns.",
      "Strip away specified labels from rows/columns.",
      "Omit designated labels from rows or columns.",
      "Filter out particular labels in rows or columns.",
      "Remove predefined labels from rows or columns.",
      "Discard indicated labels along rows or columns.",
      "Erase specified labels from rows or columns.",
      "Cut out certain labels from rows or columns.",
      "Expunge selected labels from rows/columns.",
      "Drop assigned labels from rows or columns.",
      "Prune specified labels from rows or columns."
    ]
  },
  {
    "api_name": "df.pop",
    "instruction": "remove and return a column from a DataFrame",
    "variants": [
      "Drop a column from a DataFrame and return it.",
      "Extract and delete a column from a DataFrame.",
      "Remove a column from a DataFrame and retrieve it.",
      "Delete a column from a DataFrame and get its values.",
      "Pop a column from a DataFrame.",
      "Take out a column from a DataFrame and return it.",
      "Isolate a column by removing it from a DataFrame and returning it.",
      "Detach a column from a DataFrame and provide it as output.",
      "Eliminate a column from a DataFrame while returning its contents.",
      "Withdraw a column from a DataFrame and output it.",
      "Cut out a column from a DataFrame and return the removed data.",
      "Strip a column from a DataFrame and pass it back.",
      "Pluck a column from a DataFrame and yield it.",
      "Separate a column from a DataFrame and make it available.",
      "Retrieve a column by removing it from the DataFrame."
    ]
  },
  {
    "api_name": "df.equals",
    "instruction": "test if two DataFrames are equal",
    "variants": [
      "Check whether two DataFrames are identical.",
      "Verify if two DataFrames have the same content.",
      "Compare two DataFrames for equality.",
      "Determine if two DataFrames are the same.",
      "Assess whether two DataFrames match exactly.",
      "Confirm that two DataFrames are equal.",
      "Evaluate if two DataFrames contain identical data.",
      "Check for equality between two DataFrames.",
      "Test whether two DataFrames have identical values.",
      "See if two DataFrames are equivalent.",
      "Validate if two DataFrames are equal in content.",
      "Examine if two DataFrames are the same in all aspects.",
      "Determine whether two DataFrames are indistinguishable.",
      "Compare if two DataFrames have matching rows and columns.",
      "Inspect if two DataFrames are equal in structure and data."
    ]
  },
  {
    "api_name": "df.iterrows",
    "instruction": "iterate over DataFrame rows as (index, Series)",
    "variants": [
      "Loop through each row in the DataFrame, returning (index, Series) pairs.",
      "Traverse the DataFrame rows, yielding each row as an (index, Series) tuple.",
      "Iterate through the rows of the DataFrame, accessing them as (index, Series).",
      "Enumerate DataFrame rows, providing each as an (index, Series) combination.",
      "Step through each row in the DataFrame, retrieving (index, Series) for each.",
      "Scan the DataFrame rows, obtaining (index, Series) for every iteration.",
      "Process each row in the DataFrame as an (index, Series) pair.",
      "Cycle through the DataFrame's rows, extracting (index, Series) entries.",
      "Move through the DataFrame row-wise, returning (index, Series) elements.",
      "Navigate the DataFrame rows, generating (index, Series) for each row.",
      "Go over every row in the DataFrame, fetching (index, Series) sequentially.",
      "Access each row in the DataFrame as an (index, Series) structure.",
      "Walk through the DataFrame rows, collecting (index, Series) pairs.",
      "Examine each row in the DataFrame, handling them as (index, Series).",
      "Progress through the DataFrame rows, yielding (index, Series) at each step."
    ]
  },
  {
    "api_name": "df.itertuples",
    "instruction": "iterate over DataFrame rows as namedtuples",
    "variants": [
      "Loop through DataFrame rows using namedtuples.",
      "Traverse DataFrame rows as namedtuples.",
      "Iterate through DataFrame rows represented as namedtuples.",
      "Process each row in a DataFrame as a namedtuple.",
      "Step through DataFrame rows using namedtuple objects.",
      "Access DataFrame rows as namedtuples in a loop.",
      "Cycle over DataFrame rows with namedtuple conversion.",
      "Enumerate DataFrame rows as namedtuples.",
      "Move through DataFrame rows by converting them to namedtuples.",
      "Scan DataFrame rows by treating them as namedtuples.",
      "Navigate DataFrame rows as namedtuples sequentially.",
      "Parse DataFrame rows into namedtuples and iterate.",
      "Handle DataFrame rows by looping through namedtuples.",
      "Progress through each row of a DataFrame as a namedtuple.",
      "Walk through DataFrame rows using namedtuple representations."
    ]
  },
  {
    "api_name": "df.pipe",
    "instruction": "apply a function chain-style",
    "variants": [
      "Apply a function in a chained manner.",
      "Use method chaining to apply a function.",
      "Execute a function in a pipeline fashion.",
      "Apply a function sequentially in a chain.",
      "Perform a function application using method chaining.",
      "Chain operations and apply a function.",
      "Apply a function as part of a method chain.",
      "Use a fluent interface to apply a function.",
      "Apply a function within a sequence of chained methods.",
      "Implement function application in a chained operation.",
      "Apply a function in a dot-chaining style.",
      "Process data by chaining a function call.",
      "Apply a function through successive method calls.",
      "Use chaining syntax to apply a function.",
      "Apply a function as part of a method-call chain."
    ]
  },
  {
    "api_name": "df.sort_index",
    "instruction": "sort a DataFrame by its index",
    "variants": [
      "Arrange the DataFrame based on its index.",
      "Order the DataFrame by its index.",
      "Sort the DataFrame rows according to the index.",
      "Reorder the DataFrame using its index.",
      "Sort the DataFrame based on index values.",
      "Organize the DataFrame by the index.",
      "Sort the DataFrame with respect to its index.",
      "Rearrange the DataFrame by its index.",
      "Sort the DataFrame rows by their index labels.",
      "Sort the DataFrame along its index.",
      "Sort the DataFrame according to the index.",
      "Sort the DataFrame by the row labels.",
      "Index-sort the DataFrame.",
      "Sort the DataFrame rows in index order.",
      "Arrange the DataFrame rows by their index."
    ]
  },
  {
    "api_name": "df.swapaxes",
    "instruction": "interchange axes",
    "variants": [
      "Swap the axes.",
      "Exchange the axes.",
      "Reverse the axes.",
      "Transpose the axes.",
      "Flip the axes.",
      "Switch the axes.",
      "Rotate the axes.",
      "Change the axis order.",
      "Reorder the axes.",
      "Invert the axes.",
      "Alter the axis positions.",
      "Shift the axes.",
      "Permute the axes.",
      "Move the axes.",
      "Reposition the axes."
    ]
  },
  {
    "api_name": "df.transpose",
    "instruction": "transpose the rows and columns",
    "variants": [
      "Swap the rows and columns.",
      "Convert rows to columns and columns to rows.",
      "Flip the dataframe along its diagonal.",
      "Interchange rows with columns.",
      "Pivot the rows into columns and vice versa.",
      "Rotate the dataframe to switch rows and columns.",
      "Invert the rows and columns.",
      "Reverse the row and column positions.",
      "Transform the rows into columns and columns into rows.",
      "Exchange rows for columns.",
      "Perform a matrix transposition on the dataframe.",
      "Reorient the dataframe by swapping rows and columns.",
      "Turn the rows into columns and the columns into rows.",
      "Switch the axis so that rows become columns and columns become rows.",
      "Apply a transpose operation to interchange rows and columns."
    ]
  },
  {
    "api_name": "df.T",
    "instruction": "transpose the rows and columns (shortcut)",
    "variants": [
      "Swap rows and columns (quick method).",
      "Flip the dataframe's axes (shortcut).",
      "Interchange rows and columns (fast way).",
      "Rotate the dataframe to switch rows and columns (shortcut).",
      "Use the transpose operation on the dataframe (quickly).",
      "Convert rows to columns and vice versa (shortcut).",
      "Apply the .T property to the dataframe.",
      "Invert the rows and columns (fast method).",
      "Switch the dataframe’s orientation (shortcut).",
      "Transpose the data (quick command).",
      "Exchange rows and columns (efficiently).",
      "Use pandas' transpose function (shortcut).",
      "Quickly flip rows and columns.",
      "Reverse the row-column arrangement (shortcut).",
      "Apply axis transposition (fast approach)."
    ]
  },
  {
    "api_name": "df.nlargest",
    "instruction": "return the largest n elements",
    "variants": [
      "Retrieve the top n largest elements.",
      "Fetch the n biggest elements.",
      "Get the largest n values.",
      "Return the n maximum elements.",
      "Extract the top n entries by size.",
      "Obtain the n greatest elements.",
      "Select the largest n items.",
      "Find the biggest n elements.",
      "Return the n highest values.",
      "Provide the top n largest entries.",
      "Give the n most significant elements.",
      "Identify the largest n components.",
      "List the top n elements in descending order.",
      "Output the n elements with the highest magnitude.",
      "Deliver the n largest members."
    ]
  },
  {
    "api_name": "df.nsmallest",
    "instruction": "return the smallest n elements",
    "variants": [
      "Retrieve the n smallest elements.",
      "Get the minimal n values.",
      "Fetch the bottom n elements.",
      "Return the n least values.",
      "Extract the smallest n items.",
      "Obtain the n minimum entries.",
      "Find the tiniest n elements.",
      "Select the n lowest values.",
      "Provide the least n elements.",
      "List the n smallest entries.",
      "Output the minimal n records.",
      "Identify the bottom n items.",
      "Collect the smallest n data points.",
      "Generate the n least values.",
      "Compute the n smallest elements."
    ]
  },
  {
    "api_name": "df.style",
    "instruction": "access the Styler object to style the DataFrame",
    "variants": [
      "Use the Styler object to format the DataFrame.",
      "Apply styling to the DataFrame using the Styler object.",
      "Access the Styler to customize the appearance of the DataFrame.",
      "Style the DataFrame by utilizing the Styler object.",
      "Modify the DataFrame's styling with the Styler object.",
      "Employ the Styler to apply visual formatting to the DataFrame.",
      "Retrieve the Styler object to enhance the DataFrame's presentation.",
      "Adjust the DataFrame's styling via the Styler object.",
      "Use Styler to apply CSS-based styling to the DataFrame.",
      "Access the Styler to change the visual display of the DataFrame.",
      "Apply custom styling to the DataFrame using Styler.",
      "Format the DataFrame by calling its Styler object.",
      "Utilize the Styler to modify the DataFrame's visual output.",
      "Call the Styler object to style the DataFrame.",
      "Enhance the DataFrame's appearance by accessing the Styler."
    ]
  },
  {
    "api_name": "df.to_dict",
    "instruction": "convert a DataFrame to a dictionary",
    "variants": [
      "Transform the DataFrame into a dictionary.",
      "Change the DataFrame into a dictionary format.",
      "Convert the given DataFrame to a dict.",
      "Turn the DataFrame into a dictionary.",
      "Create a dictionary from the DataFrame.",
      "Generate a dictionary representation of the DataFrame.",
      "Map the DataFrame to a dictionary.",
      "Export the DataFrame as a dictionary.",
      "Represent the DataFrame as a dictionary.",
      "Parse the DataFrame into a dictionary.",
      "Serialize the DataFrame to a dictionary.",
      "Extract the DataFrame into a dictionary.",
      "Render the DataFrame in dictionary form.",
      "Translate the DataFrame into a dictionary.",
      "Reformat the DataFrame as a dictionary."
    ]
  },
  {
    "api_name": "df.to_numpy",
    "instruction": "convert the DataFrame to a NumPy array",
    "variants": [
      "Transform the DataFrame into a NumPy array.",
      "Change the DataFrame to a NumPy array.",
      "Turn the DataFrame into a NumPy array.",
      "Convert the DataFrame into a NumPy array.",
      "Extract the DataFrame as a NumPy array.",
      "Export the DataFrame to a NumPy array.",
      "Generate a NumPy array from the DataFrame.",
      "Cast the DataFrame to a NumPy array.",
      "Obtain a NumPy array representation of the DataFrame.",
      "Retrieve the DataFrame values as a NumPy array.",
      "Render the DataFrame as a NumPy array.",
      "Translate the DataFrame into a NumPy array.",
      "Get the NumPy array equivalent of the DataFrame.",
      "Reproduce the DataFrame as a NumPy array.",
      "Switch the DataFrame to a NumPy array."
    ]
  },
  {
    "api_name": "df.to_excel",
    "instruction": "write a DataFrame to an Excel file",
    "variants": [
      "Save a DataFrame to an Excel file.",
      "Export a DataFrame to an Excel spreadsheet.",
      "Store the DataFrame in an Excel file.",
      "Write the DataFrame data to an Excel document.",
      "Output the DataFrame to an Excel file.",
      "Dump the DataFrame into an Excel sheet.",
      "Convert the DataFrame to an Excel file.",
      "Serialize the DataFrame to an Excel workbook.",
      "Save the DataFrame as an Excel file.",
      "Export the DataFrame to a .xlsx file.",
      "Write the DataFrame contents to an Excel file.",
      "Generate an Excel file from the DataFrame.",
      "Persist the DataFrame in an Excel format.",
      "Record the DataFrame in an Excel spreadsheet.",
      "Transfer the DataFrame data to an Excel file."
    ]
  },
  {
    "api_name": "df.corr",
    "instruction": "compute pairwise correlation of columns in a DataFrame",
    "variants": [
      "Calculate the pairwise correlation between columns in a DataFrame.",
      "Determine the correlation coefficients for all column pairs in a DataFrame.",
      "Compute the correlation matrix for the columns of a DataFrame.",
      "Find the pairwise correlations among DataFrame columns.",
      "Generate a correlation matrix showing relationships between DataFrame columns.",
      "Assess the correlation between each pair of columns in a DataFrame.",
      "Measure the pairwise column correlations in a DataFrame.",
      "Obtain the correlation values for every column combination in a DataFrame.",
      "Evaluate the inter-column correlations in a DataFrame.",
      "Derive the pairwise correlation coefficients for DataFrame columns.",
      "Check the correlation between all column pairs in a DataFrame.",
      "Compute the correlation scores between each pair of DataFrame columns.",
      "Analyze the pairwise column-wise correlations in a DataFrame.",
      "Construct a correlation matrix from DataFrame columns.",
      "Retrieve the correlation measures for all column pairs in a DataFrame."
    ]
  },
  {
    "api_name": "df.cov",
    "instruction": "compute pairwise covariance of columns in a DataFrame",
    "variants": [
      "Calculate the covariance between pairs of columns in a DataFrame.",
      "Determine the pairwise covariances among DataFrame columns.",
      "Compute the covariance matrix for all columns in a DataFrame.",
      "Find the covariance for each pair of columns in a DataFrame.",
      "Generate a covariance matrix from DataFrame columns.",
      "Assess the pairwise column covariances in a DataFrame.",
      "Measure the covariance between every two columns in a DataFrame.",
      "Compute the inter-column covariance for a DataFrame.",
      "Derive the covariance matrix of DataFrame columns.",
      "Evaluate covariance relationships between DataFrame columns.",
      "Obtain the covariance for all column pairs in a DataFrame.",
      "Construct a covariance matrix for the columns of a DataFrame.",
      "Calculate covariances across all column combinations in a DataFrame.",
      "Retrieve pairwise covariance values for DataFrame columns.",
      "Analyze the covariance between different columns in a DataFrame."
    ]
  },
  {
    "api_name": "df.rank",
    "instruction": "rank elements within each column of a DataFrame",
    "variants": [
      "Assign ranks to the values in each column of the DataFrame.",
      "Compute the rank of elements column-wise in the DataFrame.",
      "Determine the ranking of values for every column in the DataFrame.",
      "Rank data entries within each column of the DataFrame.",
      "Generate ordinal rankings for elements in every column of the DataFrame.",
      "Calculate the position of each value relative to others in its column.",
      "Produce a ranked order of entries for each column in the DataFrame.",
      "Evaluate the rank of each element within its respective column.",
      "Apply ranking to values in all columns of the DataFrame.",
      "Return the rank of DataFrame entries on a per-column basis.",
      "Sort and assign ranks to elements in each column of the DataFrame.",
      "Obtain the ranked sequence of values for every column.",
      "Derive the ordinal position of each value within its column.",
      "Perform a ranking operation across all columns of the DataFrame.",
      "Establish a rank order for elements in each DataFrame column."
    ]
  },
  {
    "api_name": "df.mode",
    "instruction": "get the mode of each column in a DataFrame",
    "variants": [
      "Calculate the most frequent value for every column in the DataFrame.",
      "Determine the mode for all columns in the DataFrame.",
      "Find the mode of each column in the DataFrame.",
      "Retrieve the most common value in every column of the DataFrame.",
      "Compute the mode values across all columns in the DataFrame.",
      "Identify the highest frequency value for each column in the DataFrame.",
      "Extract the modal value from every column in the DataFrame.",
      "Obtain the mode for every column in the DataFrame.",
      "Return the most frequently occurring value for each column in the DataFrame.",
      "Derive the mode for each column in the DataFrame.",
      "Generate the mode statistics for all columns in the DataFrame.",
      "Fetch the mode of every column in the DataFrame.",
      "Compute the most common entry in each column of the DataFrame.",
      "Summarize each column in the DataFrame by its mode.",
      "Analyze the DataFrame to find the mode of each column."
    ]
  },
  {
    "api_name": "df.describe",
    "instruction": "generate descriptive statistics for a DataFrame",
    "variants": [
      "Compute summary statistics for the DataFrame.",
      "Calculate descriptive statistics for the given DataFrame.",
      "Provide statistical summaries of the DataFrame.",
      "Generate a statistical summary of the DataFrame.",
      "Display descriptive stats for the DataFrame.",
      "Return key statistical measures for the DataFrame.",
      "Produce summary metrics for the DataFrame.",
      "Extract descriptive statistics from the DataFrame.",
      "Summarize the DataFrame with statistical measures.",
      "Obtain statistical descriptions of the DataFrame.",
      "Evaluate the DataFrame using descriptive statistics.",
      "Report summary statistics for the DataFrame.",
      "Analyze the DataFrame by generating descriptive stats.",
      "Retrieve statistical summaries for the DataFrame.",
      "List the main statistical properties of the DataFrame."
    ]
  },
  {
    "api_name": "df.hist",
    "instruction": "plot histogram of DataFrame columns",
    "variants": [
      "Create a histogram for the columns in the DataFrame.",
      "Generate histogram plots for the DataFrame columns.",
      "Visualize the distribution of DataFrame columns using histograms.",
      "Plot histograms for each column in the DataFrame.",
      "Display the frequency distribution of DataFrame columns as histograms.",
      "Construct histogram charts for the columns of the DataFrame.",
      "Use the DataFrame columns to produce histogram plots.",
      "Render histograms representing the data in the DataFrame columns.",
      "Illustrate the DataFrame columns with histogram graphics.",
      "Show histograms for all columns in the DataFrame.",
      "Draw histogram plots from the DataFrame columns.",
      "Map the distribution of DataFrame columns via histograms.",
      "Present DataFrame column data as histogram visualizations.",
      "Plot frequency distributions for each DataFrame column.",
      "Generate histogram representations of the DataFrame columns."
    ]
  },
  {
    "api_name": "df.boxplot",
    "instruction": "draw a boxplot from DataFrame columns",
    "variants": [
      "Create a boxplot using DataFrame columns.",
      "Generate a boxplot from the columns of a DataFrame.",
      "Plot a boxplot with DataFrame columns.",
      "Visualize DataFrame columns as a boxplot.",
      "Construct a boxplot from the given DataFrame columns.",
      "Display a boxplot using the specified DataFrame columns.",
      "Render a boxplot based on DataFrame columns.",
      "Produce a boxplot from the columns in the DataFrame.",
      "Make a boxplot using the DataFrame's columns.",
      "Show a boxplot derived from DataFrame columns.",
      "Build a boxplot with the columns of the DataFrame.",
      "Illustrate the DataFrame columns in a boxplot.",
      "Use DataFrame columns to create a boxplot.",
      "Generate a box-and-whisker plot from DataFrame columns.",
      "Plot a box-and-whisker diagram using DataFrame columns."
    ]
  },
  {
    "api_name": "df.plot",
    "instruction": "plot data from a DataFrame",
    "variants": [
      "Visualize the DataFrame's data.",
      "Create a plot using the DataFrame.",
      "Generate a graph from the DataFrame.",
      "Display a chart for the DataFrame's data.",
      "Plot the information stored in the DataFrame.",
      "Render a visualization of the DataFrame.",
      "Produce a graphical representation of the DataFrame.",
      "Show a plot derived from the DataFrame.",
      "Construct a figure using the DataFrame's data.",
      "Illustrate the DataFrame's contents with a plot.",
      "Draw a chart based on the DataFrame.",
      "Plot the DataFrame's records graphically.",
      "Create a visualization from the DataFrame's data.",
      "Graph the values in the DataFrame.",
      "Generate a plot from the DataFrame's information."
    ]
  },
  {
    "api_name": "df.diff",
    "instruction": "calculate the difference of a DataFrame element compared with another element in the same column",
    "variants": [
      "Compute the difference between two elements in the same column of a DataFrame.",
      "Find the difference between a DataFrame element and another element in its column.",
      "Determine the difference between two values in the same column of a DataFrame.",
      "Subtract one DataFrame element from another in the same column.",
      "Calculate the delta between two elements in a single DataFrame column.",
      "Measure the difference between a value and another value in the same DataFrame column.",
      "Compute the offset between two entries in the same column of a DataFrame.",
      "Subtract a DataFrame element from another element within its column.",
      "Evaluate the difference between two cells in the same column of a DataFrame.",
      "Find the numerical gap between two elements in a DataFrame column.",
      "Calculate the deviation between a DataFrame element and another in its column.",
      "Determine the subtraction result of two values in the same DataFrame column.",
      "Compute the distance between two elements in a single column of a DataFrame.",
      "Subtract one row's value from another row's value in the same DataFrame column.",
      "Assess the difference between two data points in the same column of a DataFrame."
    ]
  },
  {
    "api_name": "df.pct_change",
    "instruction": "calculate percentage change between the current and a prior element",
    "variants": [
      "Compute the percentage difference between the current and previous element.",
      "Determine the percent change from the prior element to the current one.",
      "Find the relative percentage change between the current and preceding value.",
      "Calculate the growth rate in percentage terms between consecutive elements.",
      "Measure the percentage shift from the previous to the current element.",
      "Derive the percent variation between the current and the prior entry.",
      "Assess the percentage difference between successive elements.",
      "Compute the rate of change as a percentage between the current and previous value.",
      "Evaluate the proportional change in percent between adjacent elements.",
      "Quantify the percentage increase or decrease from the prior to the current element.",
      "Determine the percentage deviation between the current and preceding data point.",
      "Calculate the percent delta between the current and the previous entry.",
      "Find the percentage change relative to the prior element.",
      "Compute the fractional change expressed as a percentage between consecutive elements.",
      "Measure the percentage difference compared to the preceding value."
    ]
  },
  {
    "api_name": "df.cumsum",
    "instruction": "compute cumulative sum of DataFrame columns",
    "variants": [
      "Calculate the running total for each column in the DataFrame.",
      "Determine the cumulative sum across all columns in the DataFrame.",
      "Compute the progressive sum for every column in the DataFrame.",
      "Find the accumulated sum for each column in the DataFrame.",
      "Generate the cumulative summation of DataFrame columns.",
      "Obtain the running summation for all columns in the DataFrame.",
      "Compute the cumulative total for each DataFrame column.",
      "Return the aggregated sum over columns in the DataFrame.",
      "Calculate the rolling sum for each column in the DataFrame.",
      "Sum the values progressively across DataFrame columns.",
      "Produce the cumulative addition of DataFrame columns.",
      "Evaluate the running accumulation of sums for each column.",
      "Compute the step-by-step sum for all columns in the DataFrame.",
      "Apply a cumulative summation operation to DataFrame columns.",
      "Derive the accumulated totals for each column in the DataFrame."
    ]
  },
  {
    "api_name": "df.cumprod",
    "instruction": "compute cumulative product of DataFrame columns",
    "variants": [
      "Calculate the cumulative product for each column in the DataFrame.",
      "Find the running product across DataFrame columns.",
      "Compute the element-wise cumulative product of all columns in the DataFrame.",
      "Generate the cumulative product for every column in the DataFrame.",
      "Determine the progressive product of values in each DataFrame column.",
      "Compute the column-wise cumulative product of the DataFrame.",
      "Calculate the running multiplication for all columns in the DataFrame.",
      "Obtain the cumulative product along each column of the DataFrame.",
      "Produce the cumulative product for the columns in the DataFrame.",
      "Evaluate the cumulative product for every column in the DataFrame.",
      "Return the cumulative product across DataFrame columns.",
      "Compute the accumulating product for each column in the DataFrame.",
      "Derive the cumulative product per column in the DataFrame.",
      "Calculate the sequential product for all DataFrame columns.",
      "Generate the running product for each column in the DataFrame."
    ]
  },
  {
    "api_name": "df.eval",
    "instruction": "evaluate an expression in the context of a DataFrame",
    "variants": [
      "Compute an expression within a DataFrame's context.",
      "Assess an expression using a DataFrame as the reference.",
      "Execute an expression in the scope of a DataFrame.",
      "Calculate an expression relative to a DataFrame.",
      "Evaluate a formula in the context of a given DataFrame.",
      "Apply an expression to a DataFrame for evaluation.",
      "Run an expression with respect to a DataFrame.",
      "Process an expression within a DataFrame environment.",
      "Resolve an expression based on a DataFrame’s data.",
      "Determine the result of an expression using DataFrame values.",
      "Analyze an expression in a DataFrame setting.",
      "Interpret an expression within the DataFrame’s namespace.",
      "Perform expression evaluation in a DataFrame framework.",
      "Carry out an expression evaluation in the context of a DataFrame.",
      "Validate an expression against a DataFrame’s contents."
    ]
  },
  {
    "api_name": "df.explode",
    "instruction": "transform each element of a list-like to a row",
    "variants": [
      "Convert each item in a list-like structure into individual rows.",
      "Map every element of a list-like object to a separate row.",
      "Expand list-like entries so that each element becomes a row.",
      "Transform list-like values such that each entry forms its own row.",
      "Flatten list-like data to produce one row per element.",
      "Split list-like elements into distinct rows.",
      "Decompose list-like objects into separate rows for each element.",
      "Unnest list-like structures, creating a row for each item.",
      "Reshape list-like data to have each element as an independent row.",
      "Break down list-like columns so that each value occupies its own row.",
      "Explode list-like entries into multiple rows, one per element.",
      "Distribute elements of a list-like structure across individual rows.",
      "Separate each component of a list-like into its own row.",
      "Reformat list-like sequences to generate one row per entry.",
      "Unpack list-like collections into rows, each containing a single element."
    ]
  },
  {
    "api_name": "df.mask",
    "instruction": "replace values where a condition is True",
    "variants": [
      "Substitute values when a specific condition is met.",
      "Update values based on a given condition.",
      "Modify entries where a certain criterion holds True.",
      "Replace data entries if they satisfy a particular condition.",
      "Change values in a DataFrame where a condition evaluates to True.",
      "Overwrite entries that meet a specified requirement.",
      "Swap values in cases where a condition is satisfied.",
      "Alter DataFrame elements when a given predicate is True.",
      "Transform values that fulfill a certain logical condition.",
      "Set new values where a Boolean condition returns True.",
      "Apply replacements to rows that match a specified criterion.",
      "Assign different values to cells meeting a condition.",
      "Replace entries in a DataFrame if a test condition passes.",
      "Modify records where a logical expression evaluates to True.",
      "Update only the values that satisfy a predefined condition."
    ]
  },
  {
    "api_name": "df.aggregate",
    "instruction": "apply one or more operations over the specified axis of a DataFrame",
    "variants": [
      "Perform operations along the designated axis of a DataFrame.",
      "Execute one or more functions over the specified axis in a DataFrame.",
      "Apply operations across the chosen axis of a DataFrame.",
      "Run one or more computations over the given axis of a DataFrame.",
      "Carry out operations on the specified axis of a DataFrame.",
      "Use functions along the selected axis of a DataFrame.",
      "Conduct operations over the defined axis of a DataFrame.",
      "Process data along the indicated axis of a DataFrame.",
      "Implement one or more transformations over the specified axis in a DataFrame.",
      "Apply computations across the given axis of a DataFrame.",
      "Perform aggregations or other operations over the designated DataFrame axis.",
      "Execute calculations along the specified axis of a DataFrame.",
      "Run transformations over the chosen axis in a DataFrame.",
      "Apply a function or multiple functions across the defined DataFrame axis.",
      "Process DataFrame data along the specified axis using one or more operations."
    ]
  },
  {
    "api_name": "df.transform",
    "instruction": "apply a function to each group and return a DataFrame with the same shape",
    "variants": [
      "**Use a function on every group and produce a DataFrame of identical dimensions.**",
      "**Apply a function to each grouped subset and return a DataFrame with matching shape.**",
      "**Execute a function per group and generate a DataFrame with unchanged structure.**",
      "**Run a function across all groups and output a DataFrame preserving the original shape.**",
      "**Process each group with a function and yield a DataFrame retaining the same form.**",
      "**Perform a function on each group and ensure the returned DataFrame has the same shape.**",
      "**Transform every group using a function and maintain the DataFrame’s original dimensions.**",
      "**Compute a function for each group and return a DataFrame with an unchanged layout.**",
      "**Map a function to each group and produce a DataFrame with identical shape.**",
      "**Evaluate a function on all groups and return a DataFrame with the same structure.**",
      "**Apply a custom function to grouped data and retain the DataFrame’s original shape.**",
      "**Process grouped data with a function and return a DataFrame of the same size.**",
      "**Iterate over each group, apply a function, and return a DataFrame with matching dimensions.**",
      "**Perform an operation per group and ensure the resulting DataFrame has the same form.**",
      "**Call a function on every group and return a DataFrame with unchanged shape.**"
    ]
  },
  {
    "api_name": "df.bfill",
    "instruction": "backward fill missing values in a DataFrame",
    "variants": [
      "Fill missing values in a DataFrame using backward filling.",
      "Use bfill to replace NaN values in the DataFrame.",
      "Perform a backward fill on missing data in the DataFrame.",
      "Replace missing values with the next valid observation in the DataFrame.",
      "Apply backfill to handle NaN entries in the DataFrame.",
      "Use backward fill to impute missing values in the DataFrame.",
      "Propagate non-null values forward to fill gaps in the DataFrame.",
      "Backfill NaN entries in the DataFrame using the next available value.",
      "Replace NA values by carrying the next observation backward in the DataFrame.",
      "Use `method='bfill'` to fill missing data in the DataFrame.",
      "Perform a backfill operation to impute missing DataFrame values.",
      "Fill gaps in the DataFrame by propagating values backward.",
      "Impute missing entries in the DataFrame using backward filling.",
      "Apply the bfill method to replace missing values in the DataFrame.",
      "Use backward propagation to fill NaN values in the DataFrame."
    ]
  },
  {
    "api_name": "df.ffill",
    "instruction": "forward fill missing values in a DataFrame",
    "variants": [
      "Fill NaN values in a DataFrame using the forward-fill method.",
      "Propagate non-null values forward to fill missing data in the DataFrame.",
      "Replace missing values in a DataFrame with the last observed value.",
      "Forward-fill null entries in the DataFrame.",
      "Carry the last valid observation forward to fill gaps in the DataFrame.",
      "Use forward filling to impute missing values in the DataFrame.",
      "Apply the ffill method to replace NaN values in the DataFrame.",
      "Complete missing DataFrame entries by forward propagation.",
      "Fill in missing data points using the previous valid value in the DataFrame.",
      "Use forward fill to handle NaN values in the DataFrame.",
      "Replace NaNs in the DataFrame by copying the preceding non-null value forward.",
      "Perform forward fill imputation on the DataFrame.",
      "Forward propagate non-missing values to fill NaNs in the DataFrame.",
      "Use the ffill operation to complete missing data in the DataFrame.",
      "Fill DataFrame gaps by carrying the last known value forward."
    ]
  },
  {
    "api_name": "df.clip",
    "instruction": "limit values in a DataFrame to a specified range",
    "variants": [
      "Restrict DataFrame values to a defined range",
      "Constrain DataFrame values within a specified range",
      "Clip values in a DataFrame to a minimum and maximum threshold",
      "Bound DataFrame values within a given range",
      "Filter DataFrame values to stay within upper and lower limits",
      "Cap DataFrame values to a specified minimum and maximum",
      "Trim DataFrame values to fall within a set range",
      "Enforce a value range on a DataFrame",
      "Adjust DataFrame values to stay within a defined interval",
      "Set upper and lower bounds for DataFrame values",
      "Ensure DataFrame values do not exceed a given range",
      "Normalize DataFrame values within specified limits",
      "Confine DataFrame values to a predefined range",
      "Apply a value ceiling and floor to a DataFrame",
      "Keep DataFrame values within a specified minimum and maximum range"
    ]
  },
  {
    "api_name": "df.reindex",
    "instruction": "conform a DataFrame to a new index",
    "variants": [
      "Align a DataFrame with a different index.",
      "Adjust a DataFrame to match a specified index.",
      "Reindex a DataFrame to a new set of labels.",
      "Modify a DataFrame to follow a given index.",
      "Transform a DataFrame to conform to a target index.",
      "Update a DataFrame’s index to a new one.",
      "Adapt a DataFrame to a different index structure.",
      "Change a DataFrame’s index to match another.",
      "Reconform a DataFrame to an alternate index.",
      "Make a DataFrame compatible with a new index.",
      "Shift a DataFrame’s indexing to a different set of labels.",
      "Restructure a DataFrame according to a desired index.",
      "Map a DataFrame to a new index configuration.",
      "Refit a DataFrame to an updated index.",
      "Synchronize a DataFrame with a different index."
    ]
  },
  {
    "api_name": "df.insert",
    "instruction": "insert a column into a DataFrame at a specified location",
    "variants": [
      "Add a column to a DataFrame at a specific position.",
      "Place a new column in a DataFrame at a given index.",
      "Insert a new column into a pandas DataFrame at a particular location.",
      "Add a column to a DataFrame at a designated spot.",
      "Embed a column in a DataFrame at the specified position.",
      "Introduce a column into a DataFrame at a chosen index.",
      "Append a column to a DataFrame at a certain location.",
      "Inject a column into a DataFrame at the desired position.",
      "Incorporate a new column in a DataFrame at a given place.",
      "Position a column in a DataFrame at a specified index.",
      "Set a column into a DataFrame at a particular place.",
      "Slide a column into a DataFrame at a predefined location.",
      "Add a new column to a DataFrame at an exact position.",
      "Insert a column at a specific point in a DataFrame.",
      "Place a column at a certain point in a pandas DataFrame."
    ]
  },
  {
    "api_name": "df.pop",
    "instruction": "remove a column from a DataFrame and return it",
    "variants": [
      "Delete a column from a DataFrame and output it.",
      "Drop a column from a DataFrame and return the removed column.",
      "Extract and remove a column from a DataFrame.",
      "Eliminate a column from a DataFrame and get it as output.",
      "Take out a column from a DataFrame and return it.",
      "Strip a column from a DataFrame and provide it as the result.",
      "Remove a specified column from a DataFrame and retrieve it.",
      "Pop a column from a DataFrame and return the deleted column.",
      "Exclude a column from a DataFrame and return the excluded column.",
      "Cut out a column from a DataFrame and obtain it.",
      "Detach a column from a DataFrame and return the detached column.",
      "Withdraw a column from a DataFrame and return the withdrawn column.",
      "Omit a column from a DataFrame and return the omitted column.",
      "Expunge a column from a DataFrame and return the expunged column.",
      "Isolate and remove a column from a DataFrame, then return it."
    ]
  },
  {
    "api_name": "df.drop_duplicates",
    "instruction": "remove duplicate rows from a DataFrame",
    "variants": [
      "Drop duplicate rows in the DataFrame.",
      "Eliminate duplicate rows from the DataFrame.",
      "Delete repeated rows in the DataFrame.",
      "Filter out duplicate rows in the DataFrame.",
      "Remove repeated rows from the DataFrame.",
      "Strip the DataFrame of duplicate rows.",
      "Clean the DataFrame by removing duplicate rows.",
      "Deduplicate the DataFrame rows.",
      "Exclude duplicate rows from the DataFrame.",
      "Drop rows with duplicate values in the DataFrame.",
      "Remove redundant rows from the DataFrame.",
      "Keep only unique rows in the DataFrame.",
      "Get rid of duplicate entries in the DataFrame.",
      "Retain only distinct rows in the DataFrame.",
      "Clear the DataFrame of any duplicate rows."
    ]
  },
  {
    "api_name": "df.memory_usage",
    "instruction": "return memory usage of each column",
    "variants": [
      "Show the memory consumption for every column.",
      "Display the memory usage per column.",
      "Retrieve the memory footprint of each column.",
      "Provide the memory allocation for all columns.",
      "List the memory usage for every column in the DataFrame.",
      "Compute the memory used by each column.",
      "Output the memory consumption of all columns.",
      "Return the memory usage breakdown by column.",
      "Get the memory usage statistics for each column.",
      "Report the memory utilization of every column.",
      "Extract the memory footprint for each column.",
      "Determine how much memory each column occupies.",
      "Fetch the memory allocation details per column.",
      "Calculate the memory usage for individual columns.",
      "Summarize the memory consumption across all columns."
    ]
  },
  {
    "api_name": "df.nsmallest",
    "instruction": "return the first n rows ordered by columns in ascending order",
    "variants": [
      "Fetch the initial n rows sorted by columns in ascending order.",
      "Retrieve the top n rows ordered by columns in ascending sequence.",
      "Get the first n rows arranged by columns in increasing order.",
      "Return the leading n rows sorted in ascending order by columns.",
      "Extract the first n rows ordered by columns from lowest to highest.",
      "Obtain the earliest n rows sorted by columns in ascending fashion.",
      "Display the first n rows organized by columns in ascending sequence.",
      "List the initial n rows sorted in ascending order based on columns.",
      "Provide the first n rows ordered by columns in an ascending manner.",
      "Query the first n rows sorted by columns in ascending arrangement.",
      "Yield the top n rows arranged by columns in ascending order.",
      "Collect the first n rows sorted in ascending order by columns.",
      "Generate the first n rows ordered by columns from smallest to largest.",
      "Show the initial n rows sorted by columns in increasing sequence.",
      "Output the first n rows arranged in ascending order by columns."
    ]
  },
  {
    "api_name": "df.nlargest",
    "instruction": "return the first n rows ordered by columns in descending order",
    "variants": [
      "Fetch the initial n rows sorted by columns in descending order.",
      "Retrieve the top n rows arranged by columns in descending sequence.",
      "Get the first n rows ordered by specified columns in descending fashion.",
      "Return the earliest n rows sorted in descending order based on columns.",
      "Extract the first n rows with column values sorted in descending order.",
      "Display the top n rows ordered by columns from highest to lowest.",
      "Provide the first n rows sorted in descending order by the given columns.",
      "Obtain the initial n entries sorted by columns in decreasing order.",
      "List the first n rows arranged by columns in descending sequence.",
      "Generate the top n rows ordered by columns in descending manner.",
      "Output the first n rows sorted in descending order of the columns.",
      "Show the initial n rows ordered by columns in descending rank.",
      "Query the first n rows sorted by columns in descending arrangement.",
      "Collect the top n rows sorted in descending order by columns.",
      "Yield the first n rows arranged by columns in descending sort order."
    ]
  },
  {
    "api_name": "df.where",
    "instruction": "replace values where the condition is False",
    "variants": [
      "Substitute values when the condition evaluates to False.",
      "Update values for rows where the condition is not True.",
      "Replace entries in cases where the condition is False.",
      "Modify values where the specified condition fails.",
      "Change values for records that do not meet the condition.",
      "Overwrite values in positions where the condition is False.",
      "Swap values in locations where the condition is not satisfied.",
      "Alter data points where the condition does not hold.",
      "Replace elements that do not fulfill the given condition.",
      "Set new values for rows where the condition is unmet.",
      "Exchange values when the condition is not valid.",
      "Assign replacements where the condition is False.",
      "Transform values in cases where the condition is invalid.",
      "Revise entries for instances where the condition is False.",
      "Fill values only where the condition is not True."
    ]
  },
  {
    "api_name": "df.align",
    "instruction": "align two objects on their axes with specified join method",
    "variants": [
      "Align two objects along their axes using a specified join method.",
      "Synchronize the axes of two objects with a given join technique.",
      "Match the axes of two objects by applying a designated join strategy.",
      "Coordinate the axes of two objects with a specified join approach.",
      "Adjust two objects to align their axes using a particular join method.",
      "Bring two objects into alignment along their axes with a specified join type.",
      "Harmonize the axes of two objects by applying a chosen join method.",
      "Set the alignment of two objects on their axes with a defined join procedure.",
      "Align two objects axis-wise using a provided join mechanism.",
      "Ensure two objects share axis alignment via a specified join technique.",
      "Join two objects along their axes according to a given alignment method.",
      "Realign the axes of two objects using a predefined join process.",
      "Make two objects axis-aligned by executing a specified join operation.",
      "Orient two objects along their axes with a defined join policy.",
      "Configure the axes alignment of two objects with a particular join mode."
    ]
  },
  {
    "api_name": "df.compare",
    "instruction": "compare two DataFrames and show the differences",
    "variants": [
      "Identify and display the discrepancies between two DataFrames.",
      "Highlight the differences between two pandas DataFrames.",
      "Show where two DataFrames do not match.",
      "Compare DataFrames and output the variations.",
      "Detect and present the dissimilarities in two DataFrames.",
      "Find and list the differing elements in two DataFrames.",
      "Contrast two DataFrames and reveal the inconsistencies.",
      "Check for differences between two DataFrames and display them.",
      "Analyze two DataFrames and show where they diverge.",
      "Examine two DataFrames for mismatches and report them.",
      "Compare two DataFrames and return the differing records.",
      "Display the rows or values that differ between two DataFrames.",
      "Perform a diff operation on two DataFrames and show the results.",
      "Extract and present the non-matching parts of two DataFrames.",
      "Evaluate two DataFrames and indicate the points of difference."
    ]
  },
  {
    "api_name": "df.combine_first",
    "instruction": "update null elements with value in the same location from another DataFrame",
    "variants": [
      "Replace null values in a DataFrame with corresponding values from another DataFrame.",
      "Fill missing elements in one DataFrame with values from the same positions in another DataFrame.",
      "Update NaN entries in a DataFrame using values from the same locations in a different DataFrame.",
      "Substitute null entries in a DataFrame with matching values from another DataFrame.",
      "Overwrite missing data in one DataFrame with values from corresponding cells in another DataFrame.",
      "Set null elements in a DataFrame to the values found in the same positions of another DataFrame.",
      "Replace NA values in a DataFrame with values from the same indices in a separate DataFrame.",
      "Fill NaN values in a DataFrame with corresponding entries from another DataFrame.",
      "Update blank cells in one DataFrame with values from the same locations in another DataFrame.",
      "Backfill null entries in a DataFrame using aligned values from another DataFrame.",
      "Replace missing values in a DataFrame with non-null values from the same coordinates in another DataFrame.",
      "Fill in nulls in one DataFrame with the values from the corresponding positions in a second DataFrame.",
      "Override NaN elements in a DataFrame with values from the same rows and columns in another DataFrame.",
      "Patch null entries in a DataFrame using values from the identical locations in another DataFrame.",
      "Substitute NA elements in a DataFrame with values from the same indices and columns in another DataFrame."
    ]
  },
  {
    "api_name": "df.update",
    "instruction": "update a DataFrame in place using non-null values from another DataFrame",
    "variants": [
      "Modify a DataFrame directly by incorporating non-null values from a different DataFrame.",
      "Update a DataFrame in-place with non-empty values from another DataFrame.",
      "Overwrite a DataFrame's values in place using non-null entries from a second DataFrame.",
      "Apply non-missing values from one DataFrame to another DataFrame, modifying it directly.",
      "Replace values in a DataFrame with corresponding non-null values from another DataFrame in place.",
      "Merge non-null values from a source DataFrame into a target DataFrame, updating it directly.",
      "Use non-empty data from one DataFrame to update another DataFrame without creating a new object.",
      "In-place update of a DataFrame with valid (non-null) values from a separate DataFrame.",
      "Synchronize a DataFrame with non-null values from another DataFrame, modifying it in place.",
      "Populate missing values in a DataFrame with corresponding non-null values from another DataFrame directly.",
      "Alter a DataFrame by filling it with non-null values from a different DataFrame in place.",
      "Directly update a DataFrame using non-empty cells from another DataFrame.",
      "Combine DataFrames by updating the original with non-null values from the second DataFrame in place.",
      "Transfer non-missing values from one DataFrame to another, modifying the latter directly.",
      "Override a DataFrame's values in place, but only where the source DataFrame has non-null data."
    ]
  },
  {
    "api_name": "df.corrwith",
    "instruction": "compute pairwise correlation with another DataFrame or Series",
    "variants": [
      "Calculate the pairwise correlation between this DataFrame and another DataFrame or Series.",
      "Determine the correlation coefficients between this DataFrame and another DataFrame or Series.",
      "Compute the correlation matrix for this DataFrame and another DataFrame or Series.",
      "Find the pairwise correlation values between this DataFrame and another DataFrame or Series.",
      "Measure the correlation between this DataFrame and another DataFrame or Series.",
      "Generate pairwise correlation scores between this DataFrame and another DataFrame or Series.",
      "Assess the correlation relationships between this DataFrame and another DataFrame or Series.",
      "Evaluate the pairwise correlations of this DataFrame with another DataFrame or Series.",
      "Identify the correlation measures between this DataFrame and another DataFrame or Series.",
      "Derive the correlation statistics between this DataFrame and another DataFrame or Series.",
      "Check for pairwise correlations between this DataFrame and another DataFrame or Series.",
      "Analyze the correlation between this DataFrame and another DataFrame or Series.",
      "Quantify the pairwise correlations between this DataFrame and another DataFrame or Series.",
      "Compute the inter-correlations between this DataFrame and another DataFrame or Series.",
      "Obtain the correlation values between this DataFrame and another DataFrame or Series."
    ]
  },
  {
    "api_name": "df.select_dtypes",
    "instruction": "return a subset of the DataFrame including/excluding columns of specific data types",
    "variants": [
      "Filter the DataFrame to include or exclude columns based on their data types.",
      "Extract a portion of the DataFrame containing or omitting columns with specified data types.",
      "Select columns from the DataFrame by including or excluding certain data types.",
      "Retrieve a subset of the DataFrame that has or lacks columns of particular data types.",
      "Return a DataFrame with columns either included or excluded based on their data types.",
      "Generate a subset of the DataFrame where columns match or do not match given data types.",
      "Isolate columns in the DataFrame by including or excluding specific data types.",
      "Obtain a filtered DataFrame consisting of (or excluding) columns with certain data types.",
      "Create a subset of the DataFrame by keeping or dropping columns of specified data types.",
      "Return a DataFrame slice that includes or excludes columns based on data type criteria.",
      "Produce a DataFrame containing only columns that meet (or do not meet) data type conditions.",
      "Subset the DataFrame to include or exclude columns depending on their data types.",
      "Get a reduced DataFrame with columns selectively included/excluded by data type.",
      "Filter out or retain DataFrame columns based on their data types.",
      "Construct a new DataFrame by including or excluding columns of specified data types."
    ]
  },
  {
    "api_name": "df.isin",
    "instruction": "check whether each element in the DataFrame is contained in values",
    "variants": [
      "Verify if each element in the DataFrame exists within the specified values.",
      "Determine whether every item in the DataFrame is present in the given values.",
      "Check if all elements in the DataFrame are included in the provided values.",
      "Assess whether each entry in the DataFrame is part of the specified values.",
      "Test if every value in the DataFrame appears in the given set of values.",
      "Evaluate whether all DataFrame elements are contained within the values provided.",
      "Confirm if each cell in the DataFrame is found in the listed values.",
      "Inspect whether every element in the DataFrame belongs to the given values.",
      "Examine if all values in the DataFrame are members of the specified set.",
      "Validate whether each entry in the DataFrame is among the provided values.",
      "Check for the presence of every DataFrame element in the given values.",
      "Query whether each value in the DataFrame exists in the defined set.",
      "Scan the DataFrame to see if all elements are part of the specified values.",
      "Analyze whether every item in the DataFrame is included in the given list.",
      "Identify if each element in the DataFrame is contained within the provided values."
    ]
  },
  {
    "api_name": "df.duplicated",
    "instruction": "find duplicate rows in a DataFrame",
    "variants": [
      "Identify duplicated rows in the DataFrame.",
      "Locate rows with duplicates in the DataFrame.",
      "Detect duplicate entries in the DataFrame.",
      "Check for repeated rows in the DataFrame.",
      "Find rows that are duplicated in the DataFrame.",
      "Retrieve all duplicate rows from the DataFrame.",
      "Search for duplicate records in the DataFrame.",
      "List all duplicated rows in the DataFrame.",
      "Extract rows that appear more than once in the DataFrame.",
      "Determine which rows are duplicates in the DataFrame.",
      "Flag duplicate rows in the DataFrame.",
      "Discover repeated records in the DataFrame.",
      "Return all duplicate rows present in the DataFrame.",
      "Query the DataFrame for duplicate rows.",
      "Filter and display duplicate rows in the DataFrame."
    ]
  },
  {
    "api_name": "df.truncate",
    "instruction": "truncate a DataFrame before and after some index value",
    "variants": [
      "Trim a DataFrame around a specific index value.",
      "Slice a DataFrame to exclude rows before and after a certain index.",
      "Cut off a DataFrame outside a given index range.",
      "Filter a DataFrame to keep only rows within a specified index interval.",
      "Remove rows from a DataFrame beyond certain index bounds.",
      "Restrict a DataFrame to a particular index range by truncation.",
      "Clip a DataFrame at specified start and end index points.",
      "Drop rows outside a given index threshold in a DataFrame.",
      "Shorten a DataFrame by discarding rows before and after a defined index.",
      "Reduce a DataFrame to only entries between two index values.",
      "Keep only the middle section of a DataFrame based on index.",
      "Exclude DataFrame rows outside a selected index span.",
      "Narrow down a DataFrame to a subset between two index markers.",
      "Crop a DataFrame to rows within a specific index boundary.",
      "Limit a DataFrame to a range of indices, removing the rest."
    ]
  },
  {
    "api_name": "df.applymap",
    "instruction": "apply a function to a DataFrame elementwise",
    "variants": [
      "Execute a function on each element of a DataFrame.",
      "Perform an operation on every element in a DataFrame.",
      "Apply a custom function to each value in a DataFrame.",
      "Run a function over all elements of a DataFrame.",
      "Process each DataFrame element using a specified function.",
      "Map a function to every cell in a DataFrame.",
      "Iterate over all DataFrame elements and apply a function.",
      "Transform each value in a DataFrame with a given function.",
      "Compute a function for every individual element in a DataFrame.",
      "Evaluate a function on each entry of a DataFrame.",
      "Use a function to modify each element in a DataFrame.",
      "Pass each DataFrame element through a function.",
      "Operate on every value in a DataFrame with a function.",
      "Apply a transformation to each cell in a DataFrame.",
      "Process all DataFrame elements with a function in an elementwise manner."
    ]
  },
  {
    "api_name": "df.pipe",
    "instruction": "apply a function or method to a DataFrame",
    "variants": [
      "Execute a function on a DataFrame.",
      "Perform a method or function on a DataFrame.",
      "Use a function to transform a DataFrame.",
      "Apply a custom operation to a DataFrame.",
      "Run a function across a DataFrame.",
      "Call a method on a DataFrame.",
      "Process a DataFrame using a function.",
      "Map a function over a DataFrame.",
      "Implement a function on DataFrame elements.",
      "Pass a function to a DataFrame for execution.",
      "Operate on a DataFrame with a given function.",
      "Invoke a function on DataFrame rows or columns.",
      "Compute values in a DataFrame using a function.",
      "Transform DataFrame data by applying a function.",
      "Evaluate a function over a DataFrame's contents."
    ]
  },
  {
    "api_name": "df.convert_dtypes",
    "instruction": "convert columns to best possible dtypes",
    "variants": [
      "Optimize the data types of the columns.",
      "Convert columns to their most suitable dtypes.",
      "Change column dtypes to the most efficient ones.",
      "Infer and apply the best data types for columns.",
      "Automatically adjust column dtypes for optimal performance.",
      "Update column data types to the most appropriate ones.",
      "Set columns to their ideal dtypes.",
      "Transform columns to the best-fitting data types.",
      "Convert each column to its most efficient dtype.",
      "Improve column dtypes by automatic detection.",
      "Modify dtypes to the best possible for each column.",
      "Adjust data types of columns for better efficiency.",
      "Infer the best dtypes for all columns.",
      "Optimize DataFrame columns by converting dtypes.",
      "Change column types to the most space-efficient dtypes."
    ]
  },
  {
    "api_name": "df.cov",
    "instruction": "compute pairwise covariance of columns",
    "variants": [
      "Calculate the covariance between each pair of columns.",
      "Compute the covariance matrix for all columns.",
      "Determine the pairwise covariances among columns.",
      "Generate a covariance matrix for the dataset columns.",
      "Find the covariance between every two columns.",
      "Measure the pairwise covariance across columns.",
      "Evaluate the covariance for all column pairs.",
      "Construct a covariance matrix from the columns.",
      "Compute covariances between each column combination.",
      "Derive the pairwise column covariances.",
      "Assess the covariance relationships between columns.",
      "Calculate inter-column covariances.",
      "Obtain the covariance matrix for the given columns.",
      "Compute the covariances for every pair of variables in the columns.",
      "Generate pairwise covariance estimates for the columns."
    ]
  },
  {
    "api_name": "df.mode",
    "instruction": "return the mode(s) of each column",
    "variants": [
      "Compute the most frequent value(s) for every column.",
      "Find the mode(s) for each column in the DataFrame.",
      "Determine the most common value(s) in every column.",
      "Retrieve the mode(s) for all columns.",
      "Calculate the highest frequency value(s) for each column.",
      "Identify the predominant value(s) in every column.",
      "Extract the mode value(s) from each column.",
      "Return the most repeated value(s) per column.",
      "Get the statistical mode(s) for every column.",
      "Provide the frequentist value(s) for each column.",
      "Output the value(s) that appear most often in each column.",
      "List the mode(s) across all columns.",
      "Display the most occurring value(s) in every column.",
      "Generate the modes for each column in the dataset.",
      "Report the modal value(s) for all columns."
    ]
  },
  {
    "api_name": "df.rank",
    "instruction": "compute numerical data ranks along axis",
    "variants": [
      "Rank numerical values along the specified axis.",
      "Assign ranks to the data points along the given axis.",
      "Determine the ordinal ranking of numerical data across the axis.",
      "Calculate the rank of each element along the chosen axis.",
      "Compute the position-based order of values along an axis.",
      "Generate rankings for numerical entries along the axis.",
      "Evaluate the relative ranking of data along the specified dimension.",
      "Obtain the sorted order indices for numerical data along the axis.",
      "Derive rank values for elements in the dataset along an axis.",
      "Produce the ordinal positions of numerical values along the axis.",
      "Compute the rank-ordering of numbers along a given axis.",
      "Assign sequential ranks based on value order along the axis.",
      "Determine the positional ranks of numerical entries along an axis.",
      "Calculate the order of values when ranked along the axis.",
      "Generate a ranked representation of the data along the specified axis."
    ]
  },
  {
    "api_name": "df.describe",
    "instruction": "generate descriptive statistics of a DataFrame",
    "variants": [
      "Compute summary statistics for the DataFrame.",
      "Display statistical summaries of the DataFrame.",
      "Calculate descriptive statistics for the DataFrame.",
      "Provide an overview of the DataFrame's statistics.",
      "Show key statistical measures of the DataFrame.",
      "Generate a statistical summary of the DataFrame.",
      "Return descriptive analytics for the DataFrame.",
      "Summarize the DataFrame using statistics.",
      "Extract statistical insights from the DataFrame.",
      "Produce a statistical breakdown of the DataFrame.",
      "Obtain summary metrics for the DataFrame.",
      "Retrieve the descriptive statistics of the DataFrame.",
      "Analyze the DataFrame with summary statistics.",
      "Present the descriptive stats for the DataFrame.",
      "Evaluate the DataFrame statistically."
    ]
  },
  {
    "api_name": "df.itertuples",
    "instruction": "iterate over DataFrame rows as namedtuples",
    "variants": [
      "Loop through DataFrame rows as namedtuples.",
      "Iterate over each row in the DataFrame using namedtuples.",
      "Traverse DataFrame rows as namedtuples.",
      "Process DataFrame rows by converting them to namedtuples.",
      "Go through every row in the DataFrame as a namedtuple.",
      "Step through DataFrame rows represented as namedtuples.",
      "Cycle over DataFrame rows, treating them as namedtuples.",
      "Access each row in the DataFrame in the form of namedtuples.",
      "Navigate through DataFrame rows using namedtuples.",
      "Enumerate DataFrame rows as namedtuples.",
      "Scan DataFrame rows by converting them to namedtuples.",
      "Move through DataFrame rows while representing them as namedtuples.",
      "Parse DataFrame rows as namedtuples during iteration.",
      "Run through DataFrame rows and handle them as namedtuples.",
      "Walk through the DataFrame rows, casting them to namedtuples."
    ]
  },
  {
    "api_name": "df.memory_usage",
    "instruction": "get memory usage of each column",
    "variants": [
      "Retrieve the memory consumption for every column.",
      "Calculate the memory usage per column.",
      "Obtain the memory footprint of each column.",
      "Fetch the memory allocation for all columns.",
      "Determine how much memory each column uses.",
      "Measure the memory usage for every column.",
      "Return the memory utilization of each column.",
      "Extract the memory usage statistics for all columns.",
      "Check the memory consumption column-wise.",
      "Compute the memory usage for individual columns.",
      "Display the memory usage breakdown by column.",
      "Assess the memory requirements for each column.",
      "Report the memory usage for every column.",
      "Enumerate the memory usage per column.",
      "Analyze the memory allocation across all columns."
    ]
  },
  {
    "api_name": "df.empty",
    "instruction": "check if the DataFrame is empty",
    "variants": [
      "Verify whether the DataFrame has no rows.",
      "Determine if the DataFrame is devoid of data.",
      "Check whether the DataFrame contains zero entries.",
      "Assess if the DataFrame has no records.",
      "Confirm that the DataFrame has no elements.",
      "Test if the DataFrame is unpopulated.",
      "Inspect if the DataFrame is blank.",
      "Check if the DataFrame has an empty structure.",
      "Evaluate whether the DataFrame has no content.",
      "Detect if the DataFrame is without any data.",
      "Examine if the DataFrame is null.",
      "Validate if the DataFrame lacks rows.",
      "Determine whether the DataFrame is not populated.",
      "Check if there are no observations in the DataFrame.",
      "Assess whether the DataFrame has a length of zero."
    ]
  },
  {
    "api_name": "df.equals",
    "instruction": "test if two DataFrames are element-wise equal",
    "variants": [
      "Check whether two DataFrames have identical elements.",
      "Verify if two DataFrames are equal element by element.",
      "Determine if all corresponding elements in two DataFrames match.",
      "Compare two DataFrames to see if their elements are the same.",
      "Assess whether two DataFrames contain identical values in all positions.",
      "Test for exact equality between the elements of two DataFrames.",
      "Confirm if two DataFrames are identical in terms of their element values.",
      "Evaluate whether two DataFrames have the same values in every cell.",
      "Check if two DataFrames are indistinguishable based on their element values.",
      "Examine if two DataFrames have matching values at every corresponding position.",
      "Determine whether two DataFrames are fully equivalent in their element-wise values.",
      "Validate if the contents of two DataFrames are exactly the same.",
      "Inspect if two DataFrames have no differences in their element values.",
      "Compare two DataFrames to confirm they are element-wise identical.",
      "Test whether two DataFrames share the exact same values in all entries."
    ]
  },
  {
    "api_name": "df.pop",
    "instruction": "remove and return a column from the DataFrame",
    "variants": [
      "Delete a column from the DataFrame and return it.",
      "Extract and drop a column from the DataFrame.",
      "Pop a column out of the DataFrame.",
      "Remove a column from the DataFrame and retrieve it.",
      "Take out a column from the DataFrame and return it.",
      "Drop a column from the DataFrame and get its contents.",
      "Eliminate a column from the DataFrame and yield it.",
      "Strip a column from the DataFrame and provide it as output.",
      "Retrieve a column by removing it from the DataFrame.",
      "Pluck a column from the DataFrame and return it.",
      "Cut out a column from the DataFrame and hand it back.",
      "Withdraw a column from the DataFrame and return its values.",
      "Detach a column from the DataFrame and output it.",
      "Lift a column from the DataFrame and pass it back.",
      "Pull out a column from the DataFrame and return it."
    ]
  },
  {
    "api_name": "df.all",
    "instruction": "check if all elements are True in each column",
    "variants": [
      "Verify whether all values in every column are True.",
      "Determine if each column contains exclusively True elements.",
      "Check that all entries in every column evaluate to True.",
      "Confirm all columns consist entirely of True values.",
      "Assess whether all elements in each column are True.",
      "Test if every value in all columns is True.",
      "Examine each column to ensure all elements are True.",
      "Inspect whether all items in every column are True.",
      "Validate that all columns have only True entries.",
      "Check for the presence of any non-True values in each column.",
      "Ensure that no column contains elements other than True.",
      "Determine if all columns satisfy the condition of being entirely True.",
      "Evaluate whether all data in every column is True.",
      "Confirm the absence of False or non-True values in all columns.",
      "Check if every column's elements uniformly evaluate to True."
    ]
  },
  {
    "api_name": "df.any",
    "instruction": "check if any element is True in each column",
    "variants": [
      "Determine if any value is True in each column.",
      "Verify whether any element evaluates to True per column.",
      "Check for the presence of at least one True value in every column.",
      "Identify if any entry is True for each column.",
      "Assess whether any cell contains True in all columns.",
      "Test if there exists a True value in each column.",
      "Find if any row has a True value for every column.",
      "Confirm if at least one True exists per column.",
      "Detect the presence of any True element column-wise.",
      "Evaluate if each column contains at least one True.",
      "Check if any non-False value exists in every column.",
      "See whether there is any True value across columns.",
      "Inspect if any column contains a True entry.",
      "Determine whether any True values are present per column.",
      "Check column-wise if there is a single True element."
    ]
  },
  {
    "api_name": "df.dot",
    "instruction": "compute the matrix multiplication between DataFrame and another",
    "variants": [
      "Perform matrix multiplication on the DataFrame with another DataFrame.",
      "Calculate the matrix product of the DataFrame and another DataFrame.",
      "Multiply the DataFrame with another DataFrame using matrix multiplication.",
      "Compute the dot product between the DataFrame and another DataFrame.",
      "Execute matrix multiplication for the DataFrame and another DataFrame.",
      "Determine the matrix multiplication result of the DataFrame and another.",
      "Apply matrix multiplication to the DataFrame and another DataFrame.",
      "Multiply the two DataFrames using matrix multiplication.",
      "Find the matrix product of the given DataFrame and another.",
      "Carry out matrix multiplication between the DataFrame and another.",
      "Use matrix multiplication to combine the DataFrame with another.",
      "Generate the matrix multiplication output of the DataFrame and another.",
      "Compute the dot product of the two DataFrames.",
      "Calculate the matrix product between the two DataFrames.",
      "Perform a dot product operation on the DataFrame and another DataFrame."
    ]
  }
]