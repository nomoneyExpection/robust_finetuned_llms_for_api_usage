[重试 1/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[重试 2/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[重试 3/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[失败] 最终失败：You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: merge two pandas DataFrames on a common key
[ERROR] 无法生成变体 - instruction: merge two pandas DataFrames on a common key
[重试 1/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[重试 2/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[重试 3/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[失败] 最终失败：You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: group a DataFrame by a column and compute the mean
[ERROR] 无法生成变体 - instruction: group a DataFrame by a column and compute the mean
[重试 1/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[重试 2/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[重试 3/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[失败] 最终失败：You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: pivot a DataFrame with new index and columns
[ERROR] 无法生成变体 - instruction: pivot a DataFrame with new index and columns
[重试 1/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
[重试 2/3] 请求失败: 400 Client Error: Bad Request for url: https://api.siliconflow.cn/v1/chat/completions
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: merge two pandas DataFrames on a common key

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Combine two pandas DataFrames using a shared key column.  
2. Join two DataFrames in pandas based on a common column.  
3. Perform a merge operation on two pandas DataFrames using a matching key.  
4. Merge two DataFrames by aligning rows with identical keys.  
5. Use pandas to concatenate two DataFrames along a common key column.  
6. Inner join two pandas DataFrames on a shared identifier.  
7. Link two DataFrames in pandas by merging them on a mutual key.  
8. Combine two DataFrames by matching values in a key column.  
9. Execute a DataFrame merge in pandas using a common field.  
10. Align and merge two pandas DataFrames based on a shared column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: group a DataFrame by a column and compute the mean

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Compute the average after grouping a DataFrame by a specific column.  
2. Group the DataFrame by a column and calculate the mean values.  
3. Aggregate a DataFrame by a column and find the mean.  
4. Calculate the mean for each group after grouping a DataFrame by a column.  
5. Summarize a DataFrame by a column using the mean.  
6. Split a DataFrame by a column and compute the average for each group.  
7. Apply the mean function to a DataFrame grouped by a column.  
8. Perform a group-by operation on a DataFrame and derive the mean.  
9. Group rows in a DataFrame by a column and determine the mean.  
10. Use the group-by method on a DataFrame and compute the mean values.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: pivot a DataFrame with new index and columns

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Transform a DataFrame into a pivoted layout with specified index and columns.  
2. Reshape a DataFrame by setting new index and column labels using pivot.  
3. Use the pivot function to reorganize a DataFrame with custom index and columns.  
4. Convert a DataFrame into a pivot table with designated index and column fields.  
5. Rearrange a DataFrame by pivoting it around new index and column values.  
6. Apply a pivot operation to a DataFrame to redefine its index and columns.  
7. Reconfigure a DataFrame by pivoting it with updated index and column parameters.  
8. Restructure a DataFrame using pivot, assigning new index and column identifiers.  
9. Perform a pivot transformation on a DataFrame to modify its index and columns.  
10. Flip a DataFrame into a new format with specified index and column mappings.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function to each row of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Execute a function on every row in a DataFrame.  
2. Perform a function operation for each row in the DataFrame.  
3. Iterate over each row in the DataFrame and apply a function.  
4. Use a function to process every row of the DataFrame.  
5. Map a function across all rows of the DataFrame.  
6. For each row in the DataFrame, run a specified function.  
7. Apply a custom function row-wise to the DataFrame.  
8. Process the DataFrame row by row using a given function.  
9. Transform each row in the DataFrame by applying a function.  
10. Evaluate a function on every individual row of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: select specific rows and columns from a DataFrame using labels

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Filter rows and columns in a DataFrame by their labels.  
2. Extract specific rows and columns from a DataFrame using label-based indexing.  
3. Retrieve selected rows and columns from a DataFrame using their labels.  
4. Use label indexing to pick certain rows and columns in a DataFrame.  
5. Select rows and columns from a DataFrame based on their labels.  
6. Access specific rows and columns in a DataFrame using label references.  
7. Choose particular rows and columns from a DataFrame by label.  
8. Subset a DataFrame by selecting rows and columns with label-based methods.  
9. Isolate specific rows and columns in a DataFrame using their label identifiers.  
10. Query a DataFrame for designated rows and columns using label criteria.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: remove rows with missing values from a DataFrame

=== Response ===
1. Drop rows containing NaN values from the DataFrame  
2. Eliminate rows with missing data in the DataFrame  
3. Remove all rows that have null values in the DataFrame  
4. Delete rows with any NA values from the DataFrame  
5. Filter out rows that contain missing values in the DataFrame  
6. Exclude rows with empty or NaN entries from the DataFrame  
7. Strip away rows that have any missing values in the DataFrame  
8. Clean the DataFrame by dropping rows with NaN entries  
9. Omit rows where any cell is NaN in the DataFrame  
10. Discard rows with incomplete data from the DataFrame
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: fill missing values in a DataFrame with a specified value

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Replace NaN values in a DataFrame with a given value.  
2. Substitute missing data in a DataFrame with a specified value.  
3. Fill NA/NaN entries in a DataFrame with a predefined value.  
4. Impute null values in a DataFrame with a chosen value.  
5. Populate empty cells in a DataFrame with a particular value.  
6. Complete missing entries in a DataFrame using a specified replacement.  
7. Set a default value for all missing data points in a DataFrame.  
8. Replace absent values in a DataFrame with a designated value.  
9. Fill DataFrame gaps with a specified constant.  
10. Use a given value to replace all null entries in a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: sort a DataFrame by one or more columns

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Arrange a DataFrame based on one or multiple columns.  
2. Order a DataFrame using specified column(s).  
3. Reorganize a DataFrame by sorting along one or more columns.  
4. Sort the rows of a DataFrame according to one or more column values.  
5. Rearrange a DataFrame in ascending or descending order of selected columns.  
6. Rank a DataFrame by values in one or more columns.  
7. Sort the entries in a DataFrame based on column(s).  
8. Reorder a DataFrame by sorting one or more columns.  
9. Organize a DataFrame by arranging rows according to column values.  
10. Apply sorting to a DataFrame using one or more columns as the key.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: filter a DataFrame using a condition

=== Response ===
Here are 10 semantically equivalent variations of the instruction "filter a DataFrame using a condition":  

1. Select rows from a DataFrame based on a condition.  
2. Extract rows from a DataFrame that meet a specific criteria.  
3. Apply a filter to a DataFrame to retrieve matching rows.  
4. Subset a DataFrame according to a given condition.  
5. Retrieve only the rows in a DataFrame that satisfy a condition.  
6. Use a boolean condition to filter rows in a DataFrame.  
7. Query a DataFrame to get rows that match a certain condition.  
8. Filter out rows in a DataFrame that do not meet a specified condition.  
9. Conditionally select data from a DataFrame.  
10. Restrict a DataFrame to rows that fulfill a particular requirement.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: identify duplicate rows in a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction:  

1. Find duplicate rows in a DataFrame  
2. Detect duplicated rows in a DataFrame  
3. Locate duplicate entries in a DataFrame  
4. Check for duplicate rows in a DataFrame  
5. Flag repeated rows in a DataFrame  
6. Identify rows with duplicates in a DataFrame  
7. Determine duplicate records in a DataFrame  
8. Extract duplicate rows from a DataFrame  
9. Search for duplicated rows in a DataFrame  
10. Return all duplicate rows in a DataFrame
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: count unique values in a column

=== Response ===
Here are 10 semantically equivalent variations of the instruction "count unique values in a column":  

1. **Determine the number of distinct values in a column**  
2. **Find the count of unique entries in a column**  
3. **Calculate how many different values exist in a column**  
4. **Get the unique value count for a column**  
5. **Count the number of non-duplicate values in a column**  
6. **Compute the distinct value count in a column**  
7. **Retrieve the number of unique elements in a column**  
8. **Obtain the count of unique occurrences in a column**  
9. **Identify the total unique values present in a column**  
10. **Summarize the distinct values in a column by count**  

Let me know if you'd like additional variations!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: change the data type of a column

=== Response ===
Here are 10 semantically equivalent variations of the instruction "change the data type of a column":  

1. Convert the column to a different data type.  
2. Modify the data type of a column.  
3. Alter the column's data type.  
4. Update the column to a new data type.  
5. Cast the column to a different type.  
6. Change the dtype of a column.  
7. Transform the column's data type.  
8. Adjust the column's type to a different one.  
9. Recast the column to another data type.  
10. Switch the data type of a column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace specific values in a column

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Substitute particular values in a column.  
2. Update specific entries within a column.  
3. Modify certain values in a column.  
4. Replace selected entries in a column.  
5. Change specific elements in a column.  
6. Swap particular values in a column.  
7. Overwrite certain entries in a column.  
8. Alter specific data points in a column.  
9. Exchange designated values in a column.  
10. Transform specified entries in a column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: set a column as the index of the DataFrame

=== Response ===
1. Make a column the DataFrame's index  
2. Assign a column to be the index of the DataFrame  
3. Use a column as the DataFrame's index  
4. Set the index of the DataFrame to a specific column  
5. Change the DataFrame's index to a column  
6. Convert a column into the DataFrame's index  
7. Designate a column as the index in the DataFrame  
8. Specify a column as the DataFrame's index  
9. Update the DataFrame's index using a column  
10. Switch the DataFrame's index to a column
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: reset the index of the DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "reset the index of the DataFrame":  

1. Reset the DataFrame's index.  
2. Restore the default index for the DataFrame.  
3. Clear the current index of the DataFrame.  
4. Reinitialize the DataFrame's index.  
5. Remove the existing index and reset it to the default integer index.  
6. Convert the current index to default sequential numbering.  
7. Drop the current index and create a new default one.  
8. Revert the DataFrame's index to its original state.  
9. Reset the index labels to their default integer values.  
10. Set the DataFrame's index back to the default range index.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: rename columns in a DataFrame

=== Response ===
1. Change the column names in a DataFrame  
2. Modify the column labels of a DataFrame  
3. Update the headers of a DataFrame  
4. Alter the column identifiers in a DataFrame  
5. Adjust the names of columns in a DataFrame  
6. Replace the column titles in a DataFrame  
7. Redefine the column headings in a DataFrame  
8. Transform the column names in a DataFrame  
9. Revise the column naming in a DataFrame  
10. Reassign the names of columns in a DataFrame
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: concatenate multiple DataFrames

=== Response ===
Here are 10 semantically equivalent variations of the instruction "concatenate multiple DataFrames":  

1. Combine several DataFrames into one.  
2. Merge multiple DataFrames together.  
3. Join multiple DataFrames into a single DataFrame.  
4. Stack multiple DataFrames vertically or horizontally.  
5. Append multiple DataFrames into one combined DataFrame.  
6. Unite several DataFrames into a single structure.  
7. Link multiple DataFrames sequentially.  
8. Bind multiple DataFrames row-wise or column-wise.  
9. Aggregate multiple DataFrames into one unified DataFrame.  
10. Chain multiple DataFrames together into a single DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: check for missing values in a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "check for missing values in a DataFrame":  

1. Identify any missing values in the DataFrame.  
2. Detect null or NaN values in the DataFrame.  
3. Find where data is missing in the DataFrame.  
4. Locate NaN entries in the DataFrame.  
5. Check if there are any null values in the DataFrame.  
6. Scan the DataFrame for missing data.  
7. Examine the DataFrame for any absent values.  
8. Determine whether the DataFrame contains missing entries.  
9. Search for NA or NaN values in the DataFrame.  
10. Verify the presence of missing data in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: randomly sample rows from a DataFrame

=== Response ===
1. Select a random subset of rows from a DataFrame  
2. Extract random rows from a DataFrame  
3. Get a random sample of records from a DataFrame  
4. Retrieve randomly chosen rows from a DataFrame  
5. Draw a random selection of rows from a DataFrame  
6. Pick random rows from a DataFrame  
7. Generate a random sample of DataFrame rows  
8. Obtain a random set of rows from a DataFrame  
9. Randomly choose rows from a DataFrame  
10. Sample rows at random from a DataFrame
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: count the number of unique values per column

=== Response ===
1. Calculate the count of distinct values for each column  
2. Determine the number of unique entries in every column  
3. Find how many different values exist per column  
4. Compute the unique value count for each column  
5. Get the distinct value tally for all columns  
6. Count unique elements in each column of the dataframe  
7. Enumerate the number of non-repeating values per column  
8. Summarize the unique occurrences in every column  
9. Identify the count of unique data points for each column  
10. Measure the uniqueness of values column-wise
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: export a DataFrame to a CSV file

=== Response ===
Here are 10 semantically equivalent variations of the instruction "export a DataFrame to a CSV file":  

1. Save the DataFrame as a CSV file.  
2. Write the DataFrame to a CSV file.  
3. Convert the DataFrame to a CSV file and save it.  
4. Store the DataFrame in a CSV format.  
5. Export the DataFrame data to a comma-separated values file.  
6. Dump the DataFrame into a CSV file.  
7. Generate a CSV file from the DataFrame.  
8. Output the DataFrame to a CSV file.  
9. Serialize the DataFrame to a CSV format.  
10. Save the contents of the DataFrame in a CSV file.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: create a DataFrame from a dictionary

=== Response ===
1. Generate a DataFrame using a dictionary  
2. Convert a dictionary into a DataFrame  
3. Construct a DataFrame from a dict  
4. Build a pandas DataFrame from a dictionary  
5. Create a DataFrame with data from a dictionary  
6. Initialize a DataFrame using dictionary data  
7. Form a DataFrame by passing a dictionary  
8. Make a pandas DataFrame from a dict input  
9. Produce a DataFrame from dictionary values  
10. Transform a dictionary into a pandas DataFrame
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: access the column names of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "access the column names of a DataFrame":  

1. Retrieve the names of the columns in a DataFrame.  
2. Get the list of column labels from a DataFrame.  
3. Extract the column headers of a DataFrame.  
4. Obtain the column names associated with a DataFrame.  
5. Fetch the labels for all columns in a DataFrame.  
6. Display the names of the DataFrame's columns.  
7. Return the column titles of a DataFrame.  
8. List all the column names present in the DataFrame.  
9. Check what columns are available in the DataFrame.  
10. Inspect the column headings of a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: access the index of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "access the index of a DataFrame":  

1. Retrieve the index of a DataFrame.  
2. Get the index from a DataFrame.  
3. Obtain the index of a pandas DataFrame.  
4. Extract the index of a DataFrame.  
5. Return the index of a DataFrame.  
6. Access the DataFrame's index.  
7. Fetch the index of a DataFrame.  
8. Display the index of a DataFrame.  
9. Check the index of a DataFrame.  
10. View the index of a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: get memory usage of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "get memory usage of a DataFrame":  

1. Retrieve the memory consumption of a DataFrame.  
2. Calculate the memory usage of a pandas DataFrame.  
3. Determine how much memory a DataFrame occupies.  
4. Fetch the memory footprint of a DataFrame.  
5. Obtain the amount of memory used by a DataFrame.  
6. Measure the memory utilization of a DataFrame.  
7. Check the memory allocation for a given DataFrame.  
8. Assess the memory requirements of a DataFrame.  
9. Display the memory usage statistics of a DataFrame.  
10. Return the memory consumption details for a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: merge two pandas DataFrames on a common key

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Combine two pandas DataFrames using a shared key column.  
2. Join two DataFrames in pandas based on a common column.  
3. Perform a merge operation on two pandas DataFrames using a matching key.  
4. Integrate two DataFrames by aligning them on a shared key.  
5. Use pandas to merge two DataFrames where a key column matches.  
6. Link two pandas DataFrames together by a common identifier.  
7. Execute a DataFrame merge in pandas using a mutual key.  
8. Unite two DataFrames in pandas by joining on a common field.  
9. Align and merge two pandas DataFrames based on a shared column.  
10. Perform an inner join on two DataFrames using a key column in pandas.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: group a DataFrame by a column and compute the mean

=== Response ===
1. Calculate the average by grouping a DataFrame based on a specific column.  
2. Compute the mean values after grouping the DataFrame by a column.  
3. Group the DataFrame by a column and determine the mean for each group.  
4. Aggregate a DataFrame by a column and find the mean of the grouped data.  
5. Use groupby on a DataFrame column and compute the mean of the resulting groups.  
6. Segment the DataFrame by a column and calculate the average for each segment.  
7. Split the DataFrame into groups based on a column and compute the mean for each.  
8. Apply a groupby operation on a column and derive the mean for the grouped DataFrame.  
9. Partition the DataFrame by a column and compute the average of each partition.  
10. Perform a groupby operation on a column and then calculate the mean across groups.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: pivot a DataFrame with new index and columns

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Transform the DataFrame into a pivoted layout with specified index and columns.  
2. Rearrange the DataFrame using pivot, setting new index and column labels.  
3. Use the pivot function to reshape the DataFrame with custom index and columns.  
4. Convert the DataFrame into a pivot table with defined index and column headers.  
5. Reorganize the DataFrame by pivoting, assigning new index and column dimensions.  
6. Apply a pivot operation to restructure the DataFrame with chosen index and columns.  
7. Reshape the DataFrame by pivoting it based on given index and column parameters.  
8. Create a pivoted view of the DataFrame using specified index and column fields.  
9. Perform a DataFrame pivot, configuring the index and columns as required.  
10. Restructure the DataFrame into a pivot format with the desired index and columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function to each row of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Execute a function on every row in a DataFrame.  
2. Iterate over each row of a DataFrame and apply a function.  
3. For every row in the DataFrame, run a specified function.  
4. Use a function to process each row in the DataFrame.  
5. Map a function across all rows of the DataFrame.  
6. Perform a row-wise operation on the DataFrame using a function.  
7. Apply a custom function to each individual row in the DataFrame.  
8. Process DataFrame rows one by one with a given function.  
9. Transform each row of the DataFrame by applying a function.  
10. Evaluate a function for every row in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: select specific rows and columns from a DataFrame using labels

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Retrieve designated rows and columns from a DataFrame by label  
2. Extract specific rows and columns from a DataFrame using their labels  
3. Filter rows and select columns in a DataFrame based on labels  
4. Choose particular rows and columns from a DataFrame using label references  
5. Access specified rows and columns in a DataFrame by their labels  
6. Pick certain rows and columns from a DataFrame using label identifiers  
7. Subset a DataFrame to get specific rows and columns via labels  
8. Isolate particular rows and columns in a DataFrame using their labels  
9. Query specific rows and columns from a DataFrame with label-based selection  
10. Return only the desired rows and columns in a DataFrame by referencing labels
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: remove rows with missing values from a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction:  

1. Drop rows containing NaN values from the DataFrame.  
2. Eliminate rows with any missing data in the DataFrame.  
3. Remove all rows that have null values in the DataFrame.  
4. Filter out rows with NaN entries from the DataFrame.  
5. Delete rows where any column contains missing values.  
6. Strip away rows with NA values in the DataFrame.  
7. Exclude rows that have incomplete data from the DataFrame.  
8. Clean the DataFrame by dropping rows with missing entries.  
9. Omit rows containing any NaN or null values in the DataFrame.  
10. Discard rows where values are absent in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: fill missing values in a DataFrame with a specified value

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Replace NaN values in a DataFrame with a given value.  
2. Populate empty entries in a DataFrame with a specified value.  
3. Substitute missing data in a DataFrame with a designated value.  
4. Fill NaN entries in a DataFrame using a provided value.  
5. Impute null values in a DataFrame with a chosen value.  
6. Set a default value for missing entries in a DataFrame.  
7. Overwrite gaps in a DataFrame with a specified replacement value.  
8. Replace null or NaN values in a DataFrame with a predefined value.  
9. Fill blank cells in a DataFrame with a particular value.  
10. Use a specific value to replace missing data in a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: sort a DataFrame by one or more columns

=== Response ===
Here are 10 semantically equivalent variations of the instruction "sort a DataFrame by one or more columns":  

1. Arrange a DataFrame based on one or multiple columns.  
2. Order a DataFrame using one or more column values.  
3. Sort the rows of a DataFrame by one or several columns.  
4. Reorder a DataFrame according to one or more specified columns.  
5. Sort a pandas DataFrame by single or multiple column criteria.  
6. Organize a DataFrame by sorting along one or more columns.  
7. Rearrange the rows of a DataFrame based on column values.  
8. Sort a DataFrame in ascending or descending order by selected columns.  
9. Apply sorting to a DataFrame using one or more column keys.  
10. Sort a DataFrame by specifying column(s) as the sorting criteria.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: filter a DataFrame using a condition

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Apply a condition to filter rows in a DataFrame.  
2. Select rows from a DataFrame based on a specific criterion.  
3. Use a boolean condition to subset a DataFrame.  
4. Retrieve DataFrame rows that meet a given condition.  
5. Extract rows from a DataFrame where a condition is satisfied.  
6. Narrow down a DataFrame by applying a filtering condition.  
7. Query a DataFrame to return rows matching a condition.  
8. Keep only the rows in a DataFrame that fulfill a certain condition.  
9. Mask a DataFrame to include only rows that satisfy a condition.  
10. Filter out rows in a DataFrame that do not meet a specified condition.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: identify duplicate rows in a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "identify duplicate rows in a DataFrame":  

1. Find all duplicated rows in the DataFrame.  
2. Locate rows in the DataFrame that are duplicates.  
3. Detect duplicate entries across rows in the DataFrame.  
4. Check for repeated rows in the DataFrame.  
5. Return all rows in the DataFrame that are duplicates.  
6. Identify rows with identical values in the DataFrame.  
7. Flag duplicate records within the DataFrame.  
8. Determine which rows in the DataFrame are duplicates.  
9. Extract all duplicate rows from the DataFrame.  
10. Search for and list duplicated rows in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: count unique values in a column

=== Response ===
Here are 10 semantically equivalent variations of the instruction "count unique values in a column":  

1. Determine the number of distinct values in a column.  
2. Find the count of unique entries in a column.  
3. Calculate the number of different values in a column.  
4. Get the total unique values present in a column.  
5. Compute the distinct value count for a column.  
6. Count how many unique elements exist in a column.  
7. Retrieve the number of non-duplicate values in a column.  
8. Identify the count of unique occurrences in a column.  
9. Obtain the cardinality (unique count) of a column.  
10. Measure the quantity of distinct items in a column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: change the data type of a column

=== Response ===
Here are 10 semantically equivalent variations of the instruction "change the data type of a column":  

1. Convert the data type of a column  
2. Modify the column's data type  
3. Alter the column type  
4. Update the column's data type  
5. Transform the data type of a column  
6. Cast the column to a different type  
7. Change the dtype of a column  
8. Adjust the column's data type  
9. Switch the column's data type  
10. Recast the values in a column to a new type
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace specific values in a column

=== Response ===
Here are 10 semantically equivalent variations of the instruction "replace specific values in a column":  

1. Substitute certain values within a column.  
2. Update particular entries in a column.  
3. Modify specific values in a column.  
4. Change designated values in a column.  
5. Replace selected entries in a column.  
6. Swap specified values in a column.  
7. Alter certain elements in a column.  
8. Overwrite particular values in a column.  
9. Convert specific column entries to different values.  
10. Reassign specific values in a column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: set a column as the index of the DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Assign a column to be the DataFrame's index.  
2. Use a column as the index for the DataFrame.  
3. Make a column the index of the DataFrame.  
4. Set the DataFrame index using a specific column.  
5. Designate a column as the DataFrame's index.  
6. Change the DataFrame index to a specified column.  
7. Convert a column into the index of the DataFrame.  
8. Specify a column as the index in the DataFrame.  
9. Define a column as the DataFrame's index.  
10. Set the index of the DataFrame to a particular column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: reset the index of the DataFrame

=== Response ===
1. Reset the DataFrame's index  
2. Restore the default index of the DataFrame  
3. Clear the current index of the DataFrame  
4. Revert the DataFrame index to default  
5. Remove the existing index and reset it  
6. Reset the index labels of the DataFrame  
7. Reinitialize the DataFrame index  
8. Set the DataFrame index back to the original state  
9. Drop the current index and create a new one  
10. Reset the row labels of the DataFrame to sequential numbers
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: rename columns in a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "rename columns in a DataFrame":  

1. Change the column names of a DataFrame  
2. Modify the column labels in a DataFrame  
3. Update the names of columns in a DataFrame  
4. Alter the headers of a DataFrame  
5. Assign new names to DataFrame columns  
6. Replace the column titles in a DataFrame  
7. Adjust the column identifiers in a DataFrame  
8. Transform the column names in a DataFrame  
9. Redefine the column headings in a DataFrame  
10. Set new column names for a DataFrame
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: concatenate multiple DataFrames

=== Response ===
Here are 10 semantically equivalent variations of the instruction "concatenate multiple DataFrames":  

1. Combine several DataFrames into one  
2. Merge multiple DataFrames together  
3. Join multiple DataFrames in a single operation  
4. Stack multiple DataFrames vertically or horizontally  
5. Append multiple DataFrames into a single DataFrame  
6. Unite several DataFrames into a combined structure  
7. Link multiple DataFrames sequentially  
8. Aggregate multiple DataFrames into one consolidated DataFrame  
9. Bind multiple DataFrames along a specified axis  
10. Chain multiple DataFrames together into a single DataFrame
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: check for missing values in a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "check for missing values in a DataFrame":

1. Identify any missing values in the DataFrame.  
2. Detect null or NaN values in the DataFrame.  
3. Find where data is missing in the DataFrame.  
4. Locate empty or absent values in the DataFrame.  
5. Examine the DataFrame for any NA values.  
6. Scan the DataFrame for missing entries.  
7. Check if there are any gaps in the DataFrame data.  
8. Inspect the DataFrame for null or undefined values.  
9. Verify the presence of missing data in the DataFrame.  
10. Assess the DataFrame for incomplete or blank values.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: randomly sample rows from a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "randomly sample rows from a DataFrame":  

1. Select a random subset of rows from the DataFrame.  
2. Extract random rows from the DataFrame.  
3. Retrieve a random sample of rows in the DataFrame.  
4. Pick random rows from the DataFrame.  
5. Generate a random selection of DataFrame rows.  
6. Draw a random sample of rows from the DataFrame.  
7. Randomly choose rows from the DataFrame.  
8. Obtain a random subset of the DataFrame's rows.  
9. Sample rows at random from the DataFrame.  
10. Randomly select a portion of rows from the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: count the number of unique values per column

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Determine the count of distinct values in each column.  
2. Calculate the number of unique entries for every column.  
3. Find how many different values exist per column.  
4. Compute the unique value counts across all columns.  
5. Get the total distinct values for each column.  
6. Count the unique elements in every column.  
7. Assess the number of non-duplicate values per column.  
8. List the quantity of distinct items in each column.  
9. Return the count of unique occurrences column-wise.  
10. Enumerate the unique value frequencies for all columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: export a DataFrame to a CSV file

=== Response ===
1. Save a DataFrame as a CSV file  
2. Write a DataFrame to a CSV format  
3. Convert a DataFrame to a CSV and save it  
4. Export the contents of a DataFrame to a CSV  
5. Generate a CSV file from a DataFrame  
6. Store a DataFrame in a CSV file  
7. Dump a DataFrame into a CSV file  
8. Serialize a DataFrame to a CSV file  
9. Create a CSV file from a DataFrame  
10. Output a DataFrame to a CSV file
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: create a DataFrame from a dictionary

=== Response ===
Here are 10 semantically equivalent variations of the instruction "create a DataFrame from a dictionary":

1. Generate a pandas DataFrame using a dictionary.  
2. Convert a dictionary into a pandas DataFrame.  
3. Construct a DataFrame from a dictionary in pandas.  
4. Build a DataFrame using a dictionary as the source.  
5. Create a pandas DataFrame by passing a dictionary.  
6. Form a DataFrame from dictionary data in pandas.  
7. Initialize a pandas DataFrame with a dictionary.  
8. Make a DataFrame from a dictionary using pandas.  
9. Produce a pandas DataFrame from dictionary input.  
10. Transform a dictionary into a DataFrame using pandas.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: access the column names of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Retrieve the names of the columns in a DataFrame.  
2. Get the list of column labels from a DataFrame.  
3. Obtain the column headers of a DataFrame.  
4. Fetch the column names associated with a DataFrame.  
5. Display the names of all columns in the DataFrame.  
6. Extract the column labels from the DataFrame.  
7. Return the set of column names in the DataFrame.  
8. Query the DataFrame to obtain its column names.  
9. List all the column names present in the DataFrame.  
10. Identify the column names contained within the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: access the index of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "access the index of a DataFrame":  

1. Retrieve the index of a DataFrame.  
2. Get the index from a DataFrame.  
3. Obtain the index of a pandas DataFrame.  
4. Return the index of a DataFrame.  
5. Extract the index values from a DataFrame.  
6. Fetch the index of a pandas DataFrame.  
7. Access the row labels of a DataFrame.  
8. View the index of a DataFrame.  
9. Check the index of a pandas DataFrame.  
10. Inspect the index of a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: get memory usage of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "get memory usage of a DataFrame":  

1. Retrieve the memory consumption of a DataFrame.  
2. Calculate the memory usage for a DataFrame.  
3. Obtain the memory footprint of a DataFrame.  
4. Check how much memory a DataFrame occupies.  
5. Measure the memory utilization of a DataFrame.  
6. Fetch the amount of memory used by a DataFrame.  
7. Determine the memory allocation of a DataFrame.  
8. Inspect the memory requirements of a DataFrame.  
9. Assess the memory consumption of a DataFrame.  
10. Return the memory usage details of a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: display the first few rows of a DataFrame

=== Response ===
1. Show the initial rows of the DataFrame  
2. Print the top rows of the DataFrame  
3. Display the beginning of the DataFrame  
4. Output the first few records of the DataFrame  
5. View the first rows in the DataFrame  
6. Preview the DataFrame's first entries  
7. Examine the initial records of the DataFrame  
8. List the first several rows of the DataFrame  
9. Retrieve the opening rows of the DataFrame  
10. Present the DataFrame's top few lines
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: display the last few rows of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "display the last few rows of a DataFrame":  

1. Show the last few rows of the DataFrame.  
2. Print the trailing rows of the DataFrame.  
3. Output the last several rows of the DataFrame.  
4. Display the final rows of the DataFrame.  
5. Show the bottom rows of the DataFrame.  
6. Print the last N rows of the DataFrame.  
7. View the concluding rows of the DataFrame.  
8. Retrieve and display the last few entries of the DataFrame.  
9. Present the tail end of the DataFrame.  
10. Return the last few records from the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: generate descriptive statistics of a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Compute summary statistics for the DataFrame.  
2. Produce descriptive statistics for the given DataFrame.  
3. Calculate statistical summaries of the DataFrame.  
4. Generate a statistical overview of the DataFrame.  
5. Display key descriptive statistics for the DataFrame.  
6. Extract summary metrics from the DataFrame.  
7. Return descriptive analytics for the DataFrame.  
8. Summarize the DataFrame using statistical measures.  
9. Provide a statistical description of the DataFrame.  
10. Output the main descriptive statistics of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: print summary information about a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "print summary information about a DataFrame":  

1. Display summary statistics for the DataFrame.  
2. Show an overview of the DataFrame's information.  
3. Output descriptive statistics for the DataFrame.  
4. Print a summary of the DataFrame's structure and data.  
5. Generate a concise report of the DataFrame's details.  
6. Display key statistical details about the DataFrame.  
7. Show a summary of the DataFrame's contents.  
8. Print descriptive insights for the DataFrame.  
9. Output a statistical summary of the DataFrame.  
10. Display an overview of the DataFrame's statistics and structure.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise correlation of columns

=== Response ===
Here are 10 semantically equivalent variations of the instruction "compute pairwise correlation of columns":  

1. Calculate the correlation between each pair of columns.  
2. Determine the pairwise correlations among all columns.  
3. Compute the correlation matrix for the columns.  
4. Find the correlation coefficients between every two columns.  
5. Generate a correlation matrix showing column relationships.  
6. Assess the pairwise correlations across all columns.  
7. Measure the correlation between each set of columns.  
8. Produce a matrix of inter-column correlations.  
9. Evaluate the correlation values for every column pair.  
10. Compute the Pearson correlations between columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise covariance of columns

=== Response ===
Here are 10 semantically equivalent variations of the instruction "compute pairwise covariance of columns":  

1. Calculate the covariance between each pair of columns.  
2. Determine the pairwise column covariances.  
3. Compute the covariance matrix for all columns.  
4. Find the covariance values between every two columns.  
5. Generate a covariance matrix for the dataset columns.  
6. Assess the pairwise covariances among columns.  
7. Measure the covariance between each combination of columns.  
8. Derive the covariance relationships between all column pairs.  
9. Compute the inter-column covariance values.  
10. Construct a covariance matrix from the columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: calculate the difference of a DataFrame element compared with another element

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Compute the difference between one DataFrame element and another.  
2. Determine the numerical difference between two elements in a DataFrame.  
3. Find the delta between a specific DataFrame element and another.  
4. Subtract one DataFrame element from another and return the result.  
5. Calculate the subtraction of one DataFrame element from another.  
6. Measure the difference in value between two elements in a DataFrame.  
7. Obtain the result of subtracting one DataFrame element from another.  
8. Evaluate the difference between two selected elements in a DataFrame.  
9. Return the difference when one DataFrame element is subtracted by another.  
10. Compare two DataFrame elements by calculating their numerical difference.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute numerical data ranks along axis

=== Response ===
Here are 10 semantically equivalent variations of the instruction "compute numerical data ranks along axis":  

1. Rank numerical values along the specified axis.  
2. Calculate the rank of numeric data across the given axis.  
3. Determine the ordinal ranks of numerical entries along an axis.  
4. Assign ranks to numerical values along a particular axis.  
5. Generate rank-order statistics for numeric data by axis.  
6. Compute positional rankings of numerical elements along the axis.  
7. Evaluate the ranking of numerical data points along the specified dimension.  
8. Derive the rank order for numerical values aligned with the chosen axis.  
9. Measure the relative rankings of numeric values along an axis.  
10. Obtain the ordinal positions of numerical data along the given axis.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: provide rolling window calculations

=== Response ===
Here are 10 semantically equivalent variations of the instruction "provide rolling window calculations":  

1. Compute rolling window statistics.  
2. Generate calculations over a moving window.  
3. Perform rolling window aggregations.  
4. Calculate moving window metrics.  
5. Apply rolling window functions.  
6. Execute sliding window computations.  
7. Derive rolling window summaries.  
8. Obtain results for rolling time windows.  
9. Implement rolling window analysis.  
10. Produce moving average and other rolling operations.  

Let me know if you'd like additional variations!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: provide expanding window calculations

=== Response ===
Here are 10 semantically equivalent variations of the instruction "provide expanding window calculations":  

1. Generate expanding window computations  
2. Show calculations for an expanding window  
3. Compute expanding window statistics  
4. Perform expanding window operations  
5. Demonstrate expanding window aggregations  
6. Return results using expanding windows  
7. Calculate metrics with expanding windows  
8. Apply expanding window functions  
9. Display expanding window summaries  
10. Execute expanding window analyses
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: provide exponential weighted functions

=== Response ===
1. List the available exponential weighted functions in pandas.  
2. Show the exponential weighted functions supported by pandas.  
3. What are the exponential weighted moving average functions in pandas?  
4. Display the exponential weighting functions provided by pandas.  
5. Give me the pandas functions for exponential weighted calculations.  
6. Enumerate the exponential weighted methods available in pandas.  
7. Can you provide the list of pandas exponential weighted operations?  
8. Identify the exponential weighted functions that pandas offers.  
9. Share the pandas API methods for exponential weighting.  
10. Retrieve the exponential weighted function options in pandas.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: interpolate missing values

=== Response ===
Here are 10 semantically equivalent variations of the instruction "interpolate missing values":  

1. Fill in the missing values using interpolation.  
2. Estimate and replace missing values through interpolation.  
3. Use interpolation to impute the missing data points.  
4. Apply interpolation to fill gaps in the data.  
5. Replace NaN values with interpolated estimates.  
6. Perform interpolation to complete missing entries.  
7. Calculate and insert interpolated values where data is absent.  
8. Use linear interpolation to fill missing values.  
9. Impute missing values by interpolating between existing data points.  
10. Smoothly estimate missing values using an interpolation method.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: fill missing values using backward fill

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Replace missing values with the next valid observation using backward fill.  
2. Use bfill to impute NaN values in the DataFrame.  
3. Forward propagate non-null values to fill gaps (backward fill).  
4. Backfill missing data with the subsequent value in the column.  
5. Apply backward fill to replace null entries in the dataset.  
6. Fill NA values using the next observation carried backward.  
7. Use backward fill to populate missing entries in the DataFrame.  
8. Replace NaN values with the next available data point via bfill.  
9. Perform a backward fill operation to handle missing data.  
10. Propagate non-null values forward (backward fill) to impute missing data.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: fill missing values using forward fill

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Replace missing values with the previous valid observation using forward fill.  
2. Use forward filling to impute NaN values.  
3. Forward fill to populate missing data points.  
4. Apply forward fill to handle null values.  
5. Fill NaN entries by propagating the last valid value forward.  
6. Use `ffill` to replace missing values with the preceding non-null value.  
7. Forward propagate non-null values to fill gaps in the data.  
8. Impute missing values by carrying the previous observation forward.  
9. Fill in missing entries using the forward fill method.  
10. Replace NaNs with the most recent non-null value via forward filling.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative sum

=== Response ===
Here are 10 semantically equivalent variations of the instruction "compute cumulative sum":  

1. Calculate the running total.  
2. Determine the cumulative summation.  
3. Find the progressive sum.  
4. Compute the accumulated total.  
5. Generate the running accumulation.  
6. Sum the values cumulatively.  
7. Calculate the aggregated sum over time.  
8. Derive the sequential summation.  
9. Compute the step-by-step total.  
10. Obtain the rolling sum.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative product

=== Response ===
Here are 10 semantically equivalent variations of the instruction "compute cumulative product":

1. Calculate the running product.  
2. Determine the cumulative multiplication result.  
3. Find the product accumulation over the elements.  
4. Compute the progressive product.  
5. Generate the cumulative product of the values.  
6. Calculate the rolling product.  
7. Evaluate the accumulated product.  
8. Compute the product cumulatively.  
9. Derive the multiplicative cumulative sum.  
10. Obtain the cumulative product across the dataset.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative maximum

=== Response ===
Here are 10 semantically equivalent variations of the instruction "compute cumulative maximum":  

1. Calculate the running maximum.  
2. Determine the cumulative highest values.  
3. Find the maximum value up to each point.  
4. Compute the rolling maximum accumulation.  
5. Generate the cumulative peak values.  
6. Track the progressive maximum.  
7. Obtain the expanding maximum.  
8. Compute the accumulative maximum.  
9. Derive the running highest value.  
10. Calculate the successive maximum values.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative minimum

=== Response ===
Here are 10 semantically equivalent variations of the instruction "compute cumulative minimum":  

1. Calculate the running minimum  
2. Determine the cumulative smallest values  
3. Find the minimum values accumulated over time  
4. Compute the progressive minimum  
5. Get the rolling minimum cumulatively  
6. Generate the minimum values in a cumulative manner  
7. Track the smallest values encountered so far  
8. Compute the element-wise minimum up to each point  
9. Calculate the accumulated minimum across the dataset  
10. Obtain the minimum at each step in a cumulative fashion
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: trim values at input thresholds

=== Response ===
Here are 10 semantically equivalent variations of the instruction "trim values at input thresholds":  

1. Clip values beyond specified limits  
2. Truncate values outside given thresholds  
3. Bound values to the provided range  
4. Restrict values to the input thresholds  
5. Cap values at the specified upper and lower bounds  
6. Constrain values within the given limits  
7. Cut off values exceeding the threshold range  
8. Limit values to the defined minimum and maximum  
9. Filter values to stay within the set boundaries  
10. Replace out-of-threshold values with the nearest bounds
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace values where condition is True

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Substitute values based on a condition being True  
2. Update values where the specified condition is met  
3. Modify values in rows where the condition holds True  
4. Replace entries that satisfy the given condition  
5. Change values for rows where the condition evaluates to True  
6. Overwrite values in cases where the condition is True  
7. Swap values in locations where the condition is satisfied  
8. Alter data points that meet the specified condition  
9. Assign new values to entries where the condition is True  
10. Apply replacements to rows matching the given condition
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace values where condition is False

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Substitute values when the condition evaluates to False.  
2. Update values for rows where the condition is not met.  
3. Replace entries in cases where the condition is False.  
4. Modify values where the specified condition fails.  
5. Change values for records that do not satisfy the condition.  
6. Swap values in positions where the condition is False.  
7. Overwrite values if the condition is not True.  
8. Alter data points when the condition does not hold.  
9. Assign new values to elements where the condition is unmet.  
10. Replace data where the given condition returns False.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: select columns based on data types

=== Response ===
Here are 10 semantically equivalent variations of the instruction "select columns based on data types":

1. Filter columns by their data types  
2. Choose columns according to their datatype  
3. Extract columns with specific data types  
4. Retrieve columns based on their dtype  
5. Select fields by their data type attributes  
6. Pick columns matching certain data types  
7. Isolate columns of particular data types  
8. Return only columns with specified dtypes  
9. Subset the dataframe by column data types  
10. Get columns that match given type criteria
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: insert a column into a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the instruction "insert a column into a DataFrame":  

1. Add a new column to the DataFrame.  
2. Append a column to the DataFrame.  
3. Place a column inside the DataFrame.  
4. Include a new column in the DataFrame.  
5. Embed a column into the DataFrame.  
6. Incorporate a column into the DataFrame.  
7. Introduce a new column to the DataFrame.  
8. Inject a column into the DataFrame.  
9. Attach a column to the DataFrame.  
10. Insert a new column into the pandas DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: drop specified labels from rows or columns

=== Response ===
1. Remove specific labels from rows or columns  
2. Delete particular labels from either rows or columns  
3. Exclude specified labels from rows or columns  
4. Eliminate certain labels from rows or columns  
5. Drop selected labels from the row or column axis  
6. Strip designated labels from rows or columns  
7. Omit specified labels from rows or columns  
8. Filter out given labels from rows or columns  
9. Erase particular labels from rows or columns  
10. Prune specified labels from either rows or columns
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: remove and return a column from a DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Delete a column from a DataFrame and return it.  
2. Extract and drop a column from a DataFrame.  
3. Pop a column from a DataFrame.  
4. Remove a column from a DataFrame and retrieve it.  
5. Take out a column from a DataFrame and return it.  
6. Drop a column from a DataFrame and get its values.  
7. Retrieve a column while deleting it from the DataFrame.  
8. Eliminate a column from a DataFrame and obtain it.  
9. Strip a column from a DataFrame and return the removed data.  
10. Detach a column from a DataFrame and provide it as output.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: test if two DataFrames are equal

=== Response ===
Here are 10 semantically equivalent variations of the instruction "test if two DataFrames are equal":  

1. Check whether two DataFrames are identical.  
2. Compare two DataFrames for equality.  
3. Verify if two DataFrames are the same.  
4. Determine whether two DataFrames match exactly.  
5. Assess if two DataFrames are equivalent.  
6. Confirm if two DataFrames have identical content.  
7. Evaluate if two DataFrames are equal in value.  
8. Validate that two DataFrames contain the same data.  
9. Examine whether two DataFrames are indistinguishable.  
10. Inspect if two DataFrames have no differences.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: iterate over DataFrame rows as (index, Series)

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:

1. Loop through each row in the DataFrame as (index, Series) pairs.  
2. Traverse the DataFrame rows, accessing each as an (index, Series) tuple.  
3. Iterate over the rows of the DataFrame, yielding (index, Series) for each row.  
4. Enumerate DataFrame rows, treating each as an (index, Series) combination.  
5. Step through each row in the DataFrame, retrieving (index, Series) entries.  
6. Process every row in the DataFrame as an (index, Series) pair.  
7. Cycle through the DataFrame rows, obtaining (index, Series) for every iteration.  
8. Scan each row in the DataFrame, extracting (index, Series) objects.  
9. Move through the DataFrame row-wise, capturing (index, Series) elements.  
10. Access all rows in the DataFrame as (index, Series) sequences during iteration.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: iterate over DataFrame rows as namedtuples

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Loop through DataFrame rows as namedtuples.  
2. Traverse DataFrame rows using namedtuples.  
3. Iterate over DataFrame records as namedtuples.  
4. Process each DataFrame row as a namedtuple.  
5. Step through DataFrame rows represented as namedtuples.  
6. Access DataFrame rows in iteration as namedtuples.  
7. Go through each row in the DataFrame as a namedtuple.  
8. Enumerate DataFrame rows in the form of namedtuples.  
9. Cycle over DataFrame rows and retrieve them as namedtuples.  
10. Scan DataFrame rows by converting them to namedtuples.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function chain-style

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Apply a sequence of functions in a chained manner.  
2. Execute a series of functions using method chaining.  
3. Chain multiple function calls together.  
4. Perform operations in a pipeline using function chaining.  
5. Use method chaining to apply successive transformations.  
6. Apply a cascade of functions consecutively.  
7. Link functions together in a chain for sequential processing.  
8. Implement a fluent interface with function chaining.  
9. Execute a function chain for step-by-step operations.  
10. Utilize method chaining to apply a series of functions.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: sort a DataFrame by its index

=== Response ===
Here are 10 semantically equivalent variations of the instruction "sort a DataFrame by its index":

1. Arrange the DataFrame in order based on its index.  
2. Order the DataFrame rows according to the index.  
3. Sort the DataFrame using its index as the key.  
4. Reorder the DataFrame by its index values.  
5. Sort the rows of the DataFrame by the index.  
6. Organize the DataFrame based on the index.  
7. Arrange the DataFrame in ascending order of its index.  
8. Sort the DataFrame by index in increasing order.  
9. Reindex the DataFrame to sort it by the index.  
10. Sort the DataFrame along the index axis.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: interchange axes

=== Response ===
Here are 10 semantically equivalent variations of the instruction "interchange axes":  

1. Swap the axes.  
2. Exchange the axes.  
3. Reverse the axes.  
4. Transpose the axes.  
5. Flip the axes.  
6. Switch the axes.  
7. Change the axis order.  
8. Rotate the axes.  
9. Invert the axes.  
10. Reorder the axes.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: transpose the rows and columns

=== Response ===
Here are 10 semantically equivalent variations of the instruction "transpose the rows and columns":  

1. Swap the rows and columns.  
2. Convert rows to columns and columns to rows.  
3. Flip the dataframe along its diagonal.  
4. Interchange rows with columns.  
5. Pivot the dataframe such that rows become columns and vice versa.  
6. Rotate the dataframe to switch rows and columns.  
7. Transform the dataframe by transposing its axes.  
8. Reverse the orientation of rows and columns.  
9. Change the dataframe layout by making rows columns and columns rows.  
10. Apply a transpose operation to the dataframe.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: transpose the rows and columns (shortcut)

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Swap the rows and columns using a shortcut.  
2. Use a quick method to transpose the rows and columns.  
3. Flip the rows and columns with a shortcut.  
4. Invert the rows and columns using a faster approach.  
5. Apply a shortcut to switch rows and columns.  
6. Rotate the rows and columns with a quick command.  
7. Convert rows to columns (and vice versa) using a shortcut.  
8. Change row and column orientation with a faster method.  
9. Pivot the rows into columns (shortcut available).  
10. Quickly rearrange rows as columns and columns as rows.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return the largest n elements

=== Response ===
Here are 10 semantically equivalent variations of the instruction "return the largest n elements":  

1. Retrieve the top n largest values.  
2. Get the n biggest elements.  
3. Return the n greatest entries.  
4. Extract the largest n items.  
5. Fetch the top n highest values.  
6. Provide the n maximum elements.  
7. List the biggest n components.  
8. Output the largest n records.  
9. Identify and return the top n values.  
10. Select and return the n largest entries.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return the smallest n elements

=== Response ===
Here are 10 semantically equivalent variations of the instruction "return the smallest n elements":

1. Retrieve the n smallest values.  
2. Get the minimal n entries.  
3. Return the bottom n elements.  
4. Extract the least n items.  
5. Find the n minimum values.  
6. Fetch the smallest n records.  
7. Provide the n lowest elements.  
8. Select the tiniest n entries.  
9. Output the n elements with the smallest values.  
10. List the first n elements when sorted in ascending order.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: access the Styler object to style the DataFrame

=== Response ===
Here are 10 semantically equivalent variations of the given instruction:  

1. Use the Styler object to apply styling to the DataFrame.  
2. Access the Styler to format the DataFrame visually.  
3. Retrieve the Styler object for DataFrame styling.  
4. Apply styles to the DataFrame using the Styler.  
5. Utilize the Styler object to customize the DataFrame's appearance.  
6. Get the Styler object to modify the DataFrame's styling.  
7. Employ the Styler to enhance the DataFrame's presentation.  
8. Access the styling functionality of the DataFrame via the Styler object.  
9. Use the Styler to apply formatting to the DataFrame.  
10. Call the Styler object to style the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: convert a DataFrame to a dictionary

=== Response ===
Here are 10 semantically equivalent variations of the instruction "convert a DataFrame to a dictionary":  

1. Transform the DataFrame into a dictionary.  
2. Change the DataFrame into a dictionary format.  
3. Convert the given DataFrame to a dictionary.  
4. Turn the DataFrame into a dictionary.  
5. Generate a dictionary from the DataFrame.  
6. Create a dictionary representation of the DataFrame.  
7. Extract the DataFrame data as a dictionary.  
8. Map the DataFrame to a dictionary structure.  
9. Export the DataFrame into a dictionary.  
10. Represent the DataFrame in dictionary form.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: convert the DataFrame to a NumPy array

=== Response ===
1. Transform the DataFrame into a NumPy array  
2. Change the DataFrame to a NumPy array  
3. Convert the DataFrame into a NumPy ndarray  
4. Turn the DataFrame into a NumPy array  
5. Generate a NumPy array from the DataFrame  
6. Export the DataFrame as a NumPy array  
7. Cast the DataFrame to a NumPy array  
8. Create a NumPy array from the DataFrame  
9. Translate the DataFrame into a NumPy array  
10. Represent the DataFrame as a NumPy array
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 10 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: write a DataFrame to an Excel file

=== Response ===
1. Save a pandas DataFrame to an Excel file  
2. Export a DataFrame to an Excel spreadsheet  
3. Write DataFrame data to an Excel file  
4. Store a DataFrame in an Excel format  
5. Output a DataFrame to an Excel document  
6. Create an Excel file from a DataFrame  
7. Dump a DataFrame into an Excel sheet  
8. Serialize a DataFrame to an Excel file  
9. Convert a DataFrame to an Excel file  
10. Record DataFrame contents in an Excel file
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise correlation of columns in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Calculate the pairwise correlations between columns in a DataFrame.  
2. Determine the correlation coefficients for all column pairs in a DataFrame.  
3. Find the pairwise correlation values among DataFrame columns.  
4. Compute the correlation matrix for all columns in a DataFrame.  
5. Measure the pairwise relationships between columns in a DataFrame.  
6. Generate a correlation matrix for every pair of columns in a DataFrame.  
7. Assess the pairwise column correlations in a DataFrame.  
8. Retrieve correlation coefficients for each pair of DataFrame columns.  
9. Evaluate the correlation between all column combinations in a DataFrame.  
10. Extract pairwise correlation metrics from DataFrame columns.  
11. Compute the inter-column correlation coefficients in a DataFrame.  
12. Analyze the pairwise dependencies among DataFrame columns.  
13. Obtain the correlation values for every column pair in a DataFrame.  
14. Derive the correlation matrix for the columns of a DataFrame.  
15. Calculate the statistical correlation between all column pairs in a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise covariance of columns in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Calculate the covariance between all pairs of columns in a DataFrame.  
2. Determine the pairwise covariance for each column combination in a DataFrame.  
3. Compute the covariance matrix for the columns of a DataFrame.  
4. Find the covariance values between every pair of columns in a DataFrame.  
5. Generate a covariance matrix showing relationships between DataFrame columns.  
6. Measure the pairwise covariance among all columns in a DataFrame.  
7. Assess the covariance between each pair of columns in a DataFrame.  
8. Compute the inter-column covariance for a given DataFrame.  
9. Create a covariance matrix representing column relationships in a DataFrame.  
10. Evaluate the covariance for every possible column pair in a DataFrame.  
11. Derive the covariance between all column combinations in a DataFrame.  
12. Calculate the covariance matrix reflecting DataFrame column dependencies.  
13. Obtain pairwise covariance metrics for the columns of a DataFrame.  
14. Compute the covariance across all column pairs in a DataFrame.  
15. Quantify the pairwise covariance between DataFrame columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: rank elements within each column of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Assign ranks to the values in each column of the DataFrame.  
2. Compute the rank for every element across all columns in the DataFrame.  
3. Determine the ranking of elements column-wise in the DataFrame.  
4. Rank the entries in each column of the DataFrame individually.  
5. Calculate the ordinal rank for each value within its respective column.  
6. Generate rankings for all values within each column of the DataFrame.  
7. Order and rank the data within every column of the DataFrame.  
8. Produce a rank for every element in each column separately.  
9. Apply ranking to each column's elements in the DataFrame.  
10. Compute per-column rankings for the DataFrame entries.  
11. Evaluate the relative rank of each value in every DataFrame column.  
12. Derive the rank of elements for each column in the DataFrame.  
13. Assign ordinal positions to values in each column of the DataFrame.  
14. Rank the observations within each column of the DataFrame.  
15. Obtain the rank of every element across all DataFrame columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: get the mode of each column in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "get the mode of each column in a DataFrame":  

1. Calculate the most frequent value for every column in the DataFrame.  
2. Determine the mode for all columns in the DataFrame.  
3. Find the mode value in each column of the DataFrame.  
4. Retrieve the most common value for each column in the DataFrame.  
5. Compute the statistical mode for every column in the DataFrame.  
6. Extract the highest frequency value from each column in the DataFrame.  
7. Identify the mode of each column in the DataFrame.  
8. Return the most frequently occurring value for all columns in the DataFrame.  
9. Obtain the mode for every column in the DataFrame.  
10. Fetch the most repeated value in each column of the DataFrame.  
11. Derive the modal value for each column in the DataFrame.  
12. Collect the mode statistics for all columns in the DataFrame.  
13. Get the value that appears most often in each column of the DataFrame.  
14. Compute the most common entry for every column in the DataFrame.  
15. Report the predominant value in each column of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: generate descriptive statistics for a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "generate descriptive statistics for a DataFrame":  

1. Compute summary statistics for the DataFrame.  
2. Display descriptive stats for the given DataFrame.  
3. Calculate statistical summaries for the DataFrame.  
4. Generate a statistical overview of the DataFrame.  
5. Obtain descriptive analytics for the DataFrame.  
6. Provide key statistics for the DataFrame.  
7. Summarize the DataFrame with descriptive metrics.  
8. Extract statistical details from the DataFrame.  
9. Show the descriptive statistics of the DataFrame.  
10. Return summary metrics for the DataFrame.  
11. Analyze the DataFrame using descriptive statistics.  
12. Produce a statistical summary for the DataFrame.  
13. Retrieve descriptive measures for the DataFrame.  
14. Evaluate the DataFrame with summary statistics.  
15. Report the main statistics of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: plot histogram of DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "plot histogram of DataFrame columns":  

1. Create a histogram for the columns in the DataFrame.  
2. Generate a histogram plot from the DataFrame columns.  
3. Visualize the DataFrame columns as a histogram.  
4. Plot a histogram showing the distribution of DataFrame columns.  
5. Display a histogram for each column in the DataFrame.  
6. Construct a histogram using the DataFrame's columns.  
7. Render a histogram plot for all columns in the DataFrame.  
8. Produce a histogram visualization of the DataFrame columns.  
9. Draw histograms representing the DataFrame columns.  
10. Show the distribution of DataFrame columns using histograms.  
11. Use the DataFrame columns to generate a histogram.  
12. Plot histogram charts for each column in the DataFrame.  
13. Illustrate the DataFrame columns with a histogram.  
14. Create histogram plots for the given DataFrame columns.  
15. Build a histogram representation of the DataFrame columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: draw a boxplot from DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Create a boxplot using columns from the DataFrame.  
2. Generate a boxplot based on DataFrame columns.  
3. Plot a boxplot from the DataFrame's columns.  
4. Visualize the DataFrame columns as a boxplot.  
5. Construct a boxplot using the DataFrame columns.  
6. Display a boxplot for the given DataFrame columns.  
7. Render a boxplot from the columns of the DataFrame.  
8. Produce a boxplot using the specified DataFrame columns.  
9. Make a boxplot from the DataFrame’s column data.  
10. Illustrate a boxplot with the DataFrame columns.  
11. Use DataFrame columns to draw a boxplot.  
12. Show a boxplot representation of the DataFrame columns.  
13. Plot boxplots for the selected DataFrame columns.  
14. Build a boxplot visualization from the DataFrame columns.  
15. Extract DataFrame columns and generate a boxplot.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: plot data from a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "plot data from a DataFrame":  

1. Visualize the DataFrame data.  
2. Create a plot using the DataFrame.  
3. Generate a graph from the DataFrame.  
4. Display a chart based on the DataFrame.  
5. Plot the contents of the DataFrame.  
6. Render a visualization of the DataFrame.  
7. Produce a graphical representation of the DataFrame.  
8. Draw a plot from the DataFrame.  
9. Construct a figure using DataFrame data.  
10. Illustrate the DataFrame with a plot.  
11. Show a plot derived from the DataFrame.  
12. Map the DataFrame data in a plot.  
13. Build a chart from the DataFrame.  
14. Depict the DataFrame using a graph.  
15. Present the DataFrame data in a plot.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: calculate the difference of a DataFrame element compared with another element in the same column

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Compute the difference between two elements in the same column of a DataFrame.  
2. Find the difference between one DataFrame element and another in the same column.  
3. Subtract one DataFrame element from another within the same column.  
4. Determine the difference between two values in the same DataFrame column.  
5. Calculate the delta between two elements in a single column of a DataFrame.  
6. Measure the difference between two entries in the same column of a DataFrame.  
7. Compare two elements in a DataFrame column and return their difference.  
8. Derive the difference between a specified element and another in the same column of a DataFrame.  
9. Obtain the numerical difference between two values in a DataFrame column.  
10. Evaluate the subtraction result between two same-column elements in a DataFrame.  
11. Compute the offset between two elements within a single DataFrame column.  
12. Generate the difference between one DataFrame cell and another in the same column.  
13. Calculate the variance between two elements in the same DataFrame column.  
14. Subtract one value from another in the same column of a DataFrame.  
15. Identify the difference between two row elements in a single column of a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: calculate percentage change between the current and a prior element

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Compute the percentage difference between each element and its preceding element.  
2. Determine the percent change from one element to the next in the series.  
3. Calculate the relative percentage change between consecutive elements.  
4. Find the percentage shift between the current value and the previous value.  
5. Measure the percent variation between each entry and the prior entry.  
6. Compute the growth rate as a percentage from the preceding element.  
7. Derive the percentage increase or decrease relative to the previous value.  
8. Calculate the proportional change in percentage terms between successive elements.  
9. Assess the percentage difference between each data point and the one before it.  
10. Quantify the change as a percentage compared to the prior element.  
11. Compute the percent delta between the current and the previous entry.  
12. Determine the percentage shift from the preceding value.  
13. Find the rate of change in percentage for each element relative to its predecessor.  
14. Calculate the fractional change expressed as a percentage between adjacent elements.  
15. Measure the percentage deviation between each value and the one before it.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative sum of DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Calculate the running total for each column in the DataFrame.  
2. Determine the cumulative sum across all columns in the DataFrame.  
3. Compute the progressive sum for every column in the DataFrame.  
4. Generate the accumulated sum for each DataFrame column.  
5. Find the cumulative total of values in all DataFrame columns.  
6. Sum the values in each column incrementally in the DataFrame.  
7. Produce a running summation for all columns in the DataFrame.  
8. Apply a cumulative sum operation to each column of the DataFrame.  
9. Return the sequential sum for every column in the DataFrame.  
10. Compute the aggregated sum over each column in the DataFrame.  
11. Obtain the cumulative addition for all DataFrame columns.  
12. Calculate the step-by-step sum for each column in the DataFrame.  
13. Derive the running cumulative sum for all columns in the DataFrame.  
14. Perform a cumulative summation on each column of the DataFrame.  
15. Evaluate the rolling sum for every column in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative product of DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute cumulative product of DataFrame columns":  

1. Calculate the cumulative product for each column in the DataFrame.  
2. Find the running product across DataFrame columns.  
3. Compute the element-wise cumulative product for all columns in the DataFrame.  
4. Generate a DataFrame with cumulative products of each column.  
5. Determine the cumulative product along the columns of the DataFrame.  
6. Return the cumulative product for every column in the DataFrame.  
7. Apply a cumulative product operation to each column in the DataFrame.  
8. Compute the running multiplicative total for DataFrame columns.  
9. Obtain the cumulative product values for all columns in the DataFrame.  
10. Calculate the column-wise cumulative product of the DataFrame.  
11. Produce a DataFrame where each entry is the cumulative product up to that point in the column.  
12. Evaluate the cumulative product for each column in the DataFrame.  
13. Compute the product accumulation over rows for each column.  
14. Generate cumulative products for every column in the DataFrame.  
15. Apply a cumulative product transformation to all columns in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: evaluate an expression in the context of a DataFrame

=== Response ===
Certainly! Here are 15 semantically equivalent variations of the given instruction:

1. Compute an expression within the scope of a DataFrame.  
2. Assess an expression using a DataFrame as the reference.  
3. Execute an expression in the context of a pandas DataFrame.  
4. Evaluate a formula relative to a DataFrame.  
5. Perform an evaluation of an expression against a DataFrame.  
6. Analyze an expression with respect to a DataFrame.  
7. Apply an expression in the environment of a DataFrame.  
8. Calculate an expression within a DataFrame's context.  
9. Process an expression by referencing a DataFrame.  
10. Determine the result of an expression using a DataFrame.  
11. Run an expression in the setting of a DataFrame.  
12. Resolve an expression within a DataFrame's framework.  
13. Interpret an expression in the context of a pandas DataFrame.  
14. Derive the value of an expression based on a DataFrame.  
15. Validate an expression by leveraging a DataFrame's data.  

Let me know if you'd like any refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: transform each element of a list-like to a row

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Convert each element in a list-like structure into a separate row.  
2. Map every item in a list-like object to an individual row.  
3. Reshape a list-like so that each element becomes a row.  
4. Expand a list-like into rows, with one element per row.  
5. Split a list-like into rows, assigning each element to its own row.  
6. Unstack a list-like structure such that each entry is a row.  
7. Transpose a list-like to produce rows from each element.  
8. Flatten a list-like into a vertical structure with each item as a row.  
9. Decompose a list-like into rows, where each element occupies a row.  
10. Break down a list-like into individual rows for every element.  
11. Reformat a list-like to have each element represented as a distinct row.  
12. Distribute each element of a list-like across separate rows.  
13. Separate a list-like into rows, one for each contained element.  
14. Transform a list-like object so that each value becomes a row.  
15. Explode a list-like structure to generate rows for each element.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace values where a condition is True

=== Response ===
Here are 15 semantically equivalent variations of the instruction "replace values where a condition is True":  

1. Substitute values when a specified condition is met.  
2. Update values for rows that satisfy a given condition.  
3. Modify entries where a certain criterion holds True.  
4. Replace data elements based on a conditional check.  
5. Change values in a DataFrame if a condition is satisfied.  
6. Overwrite values in cases where a condition evaluates to True.  
7. Swap out entries that meet a particular logical condition.  
8. Alter values whenever a predefined condition is fulfilled.  
9. Assign new values to rows that match a specific condition.  
10. Conditionally replace data in a pandas DataFrame.  
11. Apply a replacement where a Boolean condition is True.  
12. Transform values only if they pass a certain test.  
13. Set new values for records that fit a given criterion.  
14. Replace entries in accordance with a logical expression.  
15. Modify values selectively based on a condition.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply one or more operations over the specified axis of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Perform operations along the designated axis of a DataFrame.  
2. Execute one or more functions over the specified axis in a DataFrame.  
3. Apply operations to a DataFrame along the given axis.  
4. Carry out computations over the chosen axis of a DataFrame.  
5. Run one or more operations along the indicated axis of the DataFrame.  
6. Process the DataFrame by applying functions over the specified axis.  
7. Compute results by performing operations across the desired axis of the DataFrame.  
8. Implement operations along the selected axis in the DataFrame.  
9. Apply transformations over the specified axis of the DataFrame.  
10. Conduct operations along the defined axis of the DataFrame.  
11. Use functions to manipulate the DataFrame over the given axis.  
12. Perform aggregations or other operations along the designated DataFrame axis.  
13. Apply a function or multiple functions across the specified axis of the DataFrame.  
14. Process data by executing operations over the chosen axis in the DataFrame.  
15. Evaluate operations along the intended axis of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function to each group and return a DataFrame with the same shape

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Use a function on every group and produce a DataFrame with identical dimensions.  
2. Execute a function per group and ensure the resulting DataFrame retains the original shape.  
3. For each group, apply a function and return a DataFrame matching the initial structure.  
4. Transform every group using a function, maintaining the DataFrame's original form.  
5. Process each group with a function and output a DataFrame with the same layout.  
6. Apply a custom function to all groups and generate a DataFrame with unchanged dimensions.  
7. Perform a function operation on each group, yielding a DataFrame of the same size.  
8. Compute a function over every group and return a DataFrame with an unaltered shape.  
9. Map a function across groups and produce a DataFrame preserving the input structure.  
10. Run a function on grouped data and ensure the output DataFrame retains its original shape.  
11. Apply a function to grouped data, keeping the resulting DataFrame's dimensions consistent.  
12. For each grouped subset, execute a function and return a DataFrame with the same shape.  
13. Process grouped data with a function and output a DataFrame with matching dimensions.  
14. Use a function on each group and return a DataFrame with an identical structure.  
15. Apply a transformation per group and ensure the resulting DataFrame has the same form.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: backward fill missing values in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "backward fill missing values in a DataFrame":

1. Fill NaN values in a DataFrame using backward filling.  
2. Use bfill to replace missing values in a DataFrame.  
3. Propagate non-null values forward to fill gaps in the DataFrame.  
4. Perform a backward fill operation on the DataFrame's missing data.  
5. Replace missing values with the next valid observation in the DataFrame.  
6. Apply backfill to impute NaN entries in the DataFrame.  
7. Fill empty DataFrame cells with subsequent non-missing values.  
8. Use backward fill to handle missing data in the DataFrame.  
9. Impute NaN values by carrying the next available value backward.  
10. Backward-fill missing entries in the DataFrame.  
11. Fill gaps in the DataFrame using the next observed value.  
12. Replace NaNs in the DataFrame with the next non-null value.  
13. Perform a bfill operation to complete missing DataFrame values.  
14. Use backward propagation to fill missing data in the DataFrame.  
15. Fill DataFrame null values by taking the next valid entry.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: forward fill missing values in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "forward fill missing values in a DataFrame":  

1. Use forward filling to replace missing values in the DataFrame.  
2. Fill NaN values in the DataFrame using the forward fill method.  
3. Propagate non-null values forward to fill gaps in the DataFrame.  
4. Forward-fill missing data points in the DataFrame.  
5. Replace missing entries in the DataFrame with the last observed value.  
6. Apply forward filling to handle NaN values in the DataFrame.  
7. Use ffill to impute missing data in the DataFrame.  
8. Carry the last valid observation forward to fill missing values in the DataFrame.  
9. Perform a forward fill operation on the DataFrame to address NaNs.  
10. Forward propagate values to fill null entries in the DataFrame.  
11. Fill in missing DataFrame values by copying the previous value forward.  
12. Use forward fill to replace NaNs with preceding values in the DataFrame.  
13. Impute missing data in the DataFrame by forward-filling.  
14. Apply the ffill method to replace nulls in the DataFrame.  
15. Forward-fill NaN entries in the DataFrame using the last known value.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: limit values in a DataFrame to a specified range

=== Response ===
Here are 15 semantically equivalent variations of the instruction "limit values in a DataFrame to a specified range":  

1. Restrict DataFrame values to fall within a given range.  
2. Clip values in a DataFrame to a minimum and maximum threshold.  
3. Constrain DataFrame values to stay within upper and lower bounds.  
4. Cap values in a DataFrame to a specified minimum and maximum.  
5. Bound DataFrame values between a lower and upper limit.  
6. Trim values in a DataFrame to stay within a defined range.  
7. Enforce a value range on all elements in a DataFrame.  
8. Adjust DataFrame values so they do not exceed a given range.  
9. Ensure all DataFrame values lie within a specified interval.  
10. Apply a floor and ceiling to values in a DataFrame.  
11. Filter DataFrame values to remain within set boundaries.  
12. Set upper and lower limits on DataFrame values.  
13. Normalize DataFrame values to stay within a defined span.  
14. Restrict numerical entries in a DataFrame to a min-max range.  
15. Threshold DataFrame values to prevent exceeding a range.  

Let me know if you'd like any refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: conform a DataFrame to a new index

=== Response ===
Here are 15 semantically equivalent variations of the instruction "conform a DataFrame to a new index":  

1. Align a DataFrame to a different index.  
2. Adjust a DataFrame to match a new index.  
3. Reindex a DataFrame with a specified index.  
4. Convert a DataFrame to follow a given index.  
5. Reshape a DataFrame according to a new index.  
6. Modify a DataFrame to fit a different index.  
7. Update a DataFrame's index to a new set of labels.  
8. Transform a DataFrame to align with a target index.  
9. Synchronize a DataFrame with a different index.  
10. Map a DataFrame to a new index structure.  
11. Realign a DataFrame to a custom index.  
12. Adapt a DataFrame to a revised index.  
13. Shift a DataFrame to conform to another index.  
14. Reorganize a DataFrame based on a new index.  
15. Set a DataFrame's index to a predefined set of labels.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: insert a column into a DataFrame at a specified location

=== Response ===
Here are 15 semantically equivalent variations of the instruction "insert a column into a DataFrame at a specified location":  

1. Add a column to a DataFrame at a particular position.  
2. Place a new column in a DataFrame at a given index.  
3. Insert a new column into a pandas DataFrame at a defined spot.  
4. Embed a column within a DataFrame at a specific location.  
5. Add a column to a DataFrame at a certain position.  
6. Inject a new column into a DataFrame at the desired index.  
7. Position a column in a DataFrame at a specified place.  
8. Include a column in a DataFrame at a chosen location.  
9. Append a column to a DataFrame at a particular index.  
10. Introduce a new column into a DataFrame at a set position.  
11. Incorporate a column into a DataFrame at a designated spot.  
12. Put a new column in a DataFrame at a specified location.  
13. Place a column into a DataFrame at an exact position.  
14. Insert a column at a specific point in a pandas DataFrame.  
15. Add a new column to a DataFrame at a predefined index.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: display the first few rows of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "display the first few rows of a DataFrame":  

1. Show the initial rows of the DataFrame.  
2. Print the first few records from the DataFrame.  
3. Display the top rows of the DataFrame.  
4. Output the beginning of the DataFrame.  
5. View the first several rows of the DataFrame.  
6. Preview the DataFrame by showing the first rows.  
7. Retrieve and display the DataFrame's first entries.  
8. List the starting rows of the DataFrame.  
9. Exhibit the earliest rows in the DataFrame.  
10. Present the initial portion of the DataFrame.  
11. Render the first few lines of the DataFrame.  
12. Show a glimpse of the DataFrame's first rows.  
13. Display the leading rows of the DataFrame.  
14. Print out the first n rows of the DataFrame.  
15. Output the DataFrame's head.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: display the last few rows of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "display the last few rows of a DataFrame":  

1. Show the final rows of the DataFrame.  
2. Print the last several rows of the DataFrame.  
3. Display the tail of the DataFrame.  
4. Output the last few entries in the DataFrame.  
5. Retrieve and show the last rows of the DataFrame.  
6. View the ending rows of the DataFrame.  
7. Present the last N rows of the DataFrame.  
8. Render the trailing rows of the DataFrame.  
9. Exhibit the bottom rows of the DataFrame.  
10. Show the last records in the DataFrame.  
11. Print the tail end of the DataFrame.  
12. Display the final few records from the DataFrame.  
13. Output the last portion of the DataFrame.  
14. List the last few DataFrame rows.  
15. Show the concluding rows of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: generate descriptive statistics of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "generate descriptive statistics of a DataFrame":  

1. Compute summary statistics for the DataFrame.  
2. Calculate descriptive stats for the DataFrame.  
3. Display statistical summaries of the DataFrame.  
4. Generate a statistical summary of the DataFrame.  
5. Output descriptive statistics for the DataFrame.  
6. Provide summary metrics for the DataFrame.  
7. Analyze the DataFrame using descriptive statistics.  
8. Retrieve key statistics from the DataFrame.  
9. Summarize the DataFrame numerically.  
10. Extract statistical insights from the DataFrame.  
11. Show descriptive analytics for the DataFrame.  
12. Report summary statistics for the DataFrame.  
13. Evaluate the DataFrame with statistical measures.  
14. Present an overview of the DataFrame's statistics.  
15. Create a statistical breakdown of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: print summary information about a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "print summary information about a DataFrame":  

1. Display the summary details of the DataFrame.  
2. Show an overview of the DataFrame's information.  
3. Output descriptive statistics for the DataFrame.  
4. Print a concise summary of the DataFrame.  
5. Generate a summary report of the DataFrame.  
6. Display the DataFrame's metadata and statistics.  
7. Show key details about the DataFrame.  
8. Print basic information about the DataFrame.  
9. Output a statistical summary of the DataFrame.  
10. Display the structure and summary of the DataFrame.  
11. Show a summary of the DataFrame's contents.  
12. Print an overview of the DataFrame's data.  
13. Generate a high-level summary of the DataFrame.  
14. Display summary statistics for the DataFrame.  
15. Output a brief summary of the DataFrame's attributes.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise correlation of columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute pairwise correlation of columns":  

1. Calculate the correlation between each pair of columns.  
2. Determine the pairwise correlations among columns.  
3. Compute the correlation matrix for all columns.  
4. Find the correlation coefficients between every two columns.  
5. Generate a correlation matrix for the dataframe columns.  
6. Assess the pairwise column correlations.  
7. Measure the correlation between all column pairs.  
8. Compute inter-column correlation values.  
9. Derive the correlation relationships between columns.  
10. Obtain a correlation matrix showing column dependencies.  
11. Evaluate the pairwise correlations across columns.  
12. Calculate the Pearson correlation between columns.  
13. Generate pairwise correlation coefficients for the dataset columns.  
14. Compute the correlation scores for every column combination.  
15. Analyze the correlation between each pair of variables in the dataframe.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise covariance of columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute pairwise covariance of columns":  

1. Calculate the covariance between each pair of columns.  
2. Determine the pairwise covariance for all column combinations.  
3. Compute the covariance matrix for the columns.  
4. Find the covariances between every pair of columns.  
5. Generate a covariance matrix from the columns.  
6. Assess the pairwise column covariances.  
7. Measure the covariance among all column pairs.  
8. Derive the covariance relationships between columns.  
9. Calculate inter-column covariances.  
10. Obtain the covariance values for each column pair.  
11. Construct a covariance matrix across all columns.  
12. Evaluate the covariance between every two columns.  
13. Compute covariances for each combination of columns.  
14. Extract the pairwise covariance matrix of the columns.  
15. Quantify the covariance between all column pairs.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: calculate the difference of a DataFrame element compared with another element

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Compute the difference between two elements in a DataFrame.  
2. Find the difference of one DataFrame element relative to another.  
3. Subtract one DataFrame element from another and return the result.  
4. Determine the numerical difference between two elements in a DataFrame.  
5. Calculate the delta between two specified elements in a DataFrame.  
6. Measure the difference in value between two DataFrame elements.  
7. Evaluate the subtraction of one DataFrame element from another.  
8. Compute the offset between two elements in a DataFrame.  
9. Obtain the difference between two selected elements in a DataFrame.  
10. Subtract a DataFrame element from another and output the difference.  
11. Calculate the gap between two elements in a DataFrame.  
12. Identify the difference in magnitude between two DataFrame elements.  
13. Derive the result of subtracting one DataFrame element from another.  
14. Compute the variance between two elements in a DataFrame.  
15. Return the difference when comparing two elements in a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute numerical data ranks along axis

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute numerical data ranks along axis":  

1. Rank numerical values along the specified axis.  
2. Calculate the rank of numeric data across a given axis.  
3. Determine the ordinal ranking of numerical data along an axis.  
4. Assign ranks to numerical values along the chosen dimension.  
5. Compute the order of numerical data sorted along the axis.  
6. Generate rankings for numeric values along the specified axis.  
7. Evaluate the relative positions of numerical data along an axis.  
8. Produce rank-order statistics for numerical data across an axis.  
9. Obtain the ranked sequence of numeric values along the axis.  
10. Derive the positional ranking of numerical data along a given axis.  
11. Compute percentile ranks for numerical data along the axis.  
12. Assign ordinal positions to numerical values along the axis.  
13. Calculate the sorted rank order of numeric data along the axis.  
14. Determine the hierarchical ordering of numerical data along the axis.  
15. Rank the numeric entries along the specified dimension.  

Let me know if you'd like additional variations or refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: provide rolling window calculations

=== Response ===
Here are 15 semantically equivalent variations of the instruction "provide rolling window calculations":  

1. Compute rolling window statistics.  
2. Perform calculations over a moving window.  
3. Generate rolling window aggregations.  
4. Calculate metrics across sliding windows.  
5. Apply rolling window operations.  
6. Execute moving window computations.  
7. Derive rolling statistical measures.  
8. Implement sliding window calculations.  
9. Produce rolling averages and other metrics.  
10. Compute moving averages and rolling stats.  
11. Analyze data using rolling windows.  
12. Calculate rolling aggregations over a specified window.  
13. Generate time-based rolling computations.  
14. Apply window-based statistical functions.  
15. Perform rolling analysis on the dataset.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: provide expanding window calculations

=== Response ===
Here are 15 semantically equivalent variations of the instruction "provide expanding window calculations":

1. Generate expanding window computations.  
2. Compute expanding window statistics.  
3. Calculate expanding window metrics.  
4. Perform expanding window operations.  
5. Return expanding window aggregations.  
6. Show expanding window results.  
7. Execute expanding window functions.  
8. Derive expanding window values.  
9. Apply expanding window analysis.  
10. Output expanding window calculations.  
11. Construct expanding window summaries.  
12. Implement expanding window transformations.  
13. Display expanding window aggregations.  
14. Produce expanding window statistics.  
15. Retrieve expanding window computations.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: provide exponential weighted functions

=== Response ===
Here are 15 semantically equivalent variations of the instruction "provide exponential weighted functions":  

1. List the exponential weighted functions available.  
2. Show all exponential weighted functions.  
3. Give me the exponential weighted functions in pandas.  
4. What are the exponential weighted functions provided?  
5. Display the available exponential weighted functions.  
6. Can you enumerate the exponential weighted functions?  
7. Provide a list of functions for exponential weighting.  
8. Name the exponential weighted functions in the API.  
9. What exponential weighted functions does pandas offer?  
10. Share the supported exponential weighted functions.  
11. Detail the exponential weighted functions accessible.  
12. Indicate the available exponential weighted functions.  
13. Return all exponential weighted functions in the library.  
14. Present the exponential weighted functions that can be used.  
15. Outline the exponential weighted functions included.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: interpolate missing values

=== Response ===
Here are 15 semantically equivalent variations of the instruction "interpolate missing values":  

1. Fill in the missing values using interpolation.  
2. Estimate the missing data points through interpolation.  
3. Use interpolation to replace the NaN values.  
4. Apply interpolation to fill the gaps in the data.  
5. Compute missing entries by interpolation.  
6. Perform interpolation to complete the missing values.  
7. Insert interpolated values where data is missing.  
8. Replace missing entries with interpolated estimates.  
9. Fill missing data points using an interpolation method.  
10. Use linear or other interpolation to handle missing values.  
11. Estimate missing values by applying interpolation techniques.  
12. Interpolate the NaN entries in the dataset.  
13. Fill in the blanks in the data using interpolation.  
14. Generate estimated values for missing data via interpolation.  
15. Complete the dataset by interpolating missing values.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: fill missing values using backward fill

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Replace NaN values with the next valid observation using backward fill.  
2. Use backfill to impute missing data.  
3. Forward fill missing values in reverse order.  
4. Fill NA entries by propagating the next non-null value backward.  
5. Apply bfill to handle missing data.  
6. Use backward fill to replace missing values with subsequent data.  
7. Propagate next observed values to fill gaps in the data.  
8. Impute nulls by carrying the next available value backward.  
9. Replace blanks using the backward fill method.  
10. Fill missing entries by taking the next value in reverse direction.  
11. Use the bfill method to populate NaN values.  
12. Perform a backward fill operation to complete missing data.  
13. Substitute absent values with the next valid entry via backfill.  
14. Backward propagate non-null values to fill NA positions.  
15. Fill empty cells using the next observed value in reverse order.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: fill missing values using forward fill

=== Response ===
Here are 15 semantically equivalent variations of the instruction "fill missing values using forward fill":  

1. Replace missing values with the previous known value.  
2. Use forward fill to handle NaN entries.  
3. Propagate the last valid observation to fill gaps.  
4. Apply forward filling for missing data.  
5. Fill NA values by carrying the last valid entry forward.  
6. Use ffill to impute missing entries.  
7. Forward-fill the null values in the dataset.  
8. Replace NaN values by forward propagation.  
9. Impute missing data using the forward fill method.  
10. Fill in missing values using the preceding non-null value.  
11. Forward-fill to complete the missing entries.  
12. Use pandas ffill to replace missing data.  
13. Populate NA values by copying the last available value forward.  
14. Apply forward-fill imputation to handle missing data.  
15. Fill gaps in the data by forward-filling NaN values.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative sum

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute cumulative sum":  

1. Calculate the running total.  
2. Determine the accumulated sum.  
3. Find the cumulative total.  
4. Compute the progressive sum.  
5. Generate the running summation.  
6. Derive the aggregated sum over time.  
7. Evaluate the cumulative addition.  
8. Calculate the rolling sum.  
9. Obtain the sequential summation.  
10. Compute the running accumulation.  
11. Determine the step-by-step total.  
12. Find the successive addition result.  
13. Generate the incremental sum.  
14. Calculate the accumulated total.  
15. Compute the sum with accumulation.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative product

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute cumulative product":  

1. Calculate the cumulative product.  
2. Determine the running product.  
3. Find the accumulated product.  
4. Compute the progressive product.  
5. Generate the cumulative multiplication result.  
6. Evaluate the product over successive accumulations.  
7. Derive the running multiplicative total.  
8. Compute the product cumulatively.  
9. Calculate the aggregated product over elements.  
10. Obtain the cumulative multiplicative sum.  
11. Compute the product in a cumulative manner.  
12. Find the step-by-step multiplicative accumulation.  
13. Generate the product with cumulative aggregation.  
14. Calculate the rolling product.  
15. Determine the product with successive multiplication.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative maximum

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute cumulative maximum":  

1. Calculate the running maximum.  
2. Determine the cumulative highest values.  
3. Find the rolling maximum accumulation.  
4. Compute the maximum value up to each point.  
5. Generate the cumulative peak values.  
6. Track the progressive maximum.  
7. Evaluate the running highest value.  
8. Derive the accumulated maximum.  
9. Obtain the cumulative max over the sequence.  
10. Compute the maximum observed so far at each step.  
11. Calculate the running record high.  
12. Identify the step-wise maximum accumulation.  
13. Return the expanding maximum.  
14. Compute the max value cumulatively.  
15. Generate the maximum cumulative result.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative minimum

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute cumulative minimum":  

1. Calculate the running minimum.  
2. Find the cumulative minimum.  
3. Determine the minimum up to each point.  
4. Compute the rolling minimum cumulatively.  
5. Obtain the minimum value accumulated so far.  
6. Generate the progressively decreasing minimum.  
7. Track the minimum value over a cumulative window.  
8. Return the minimum encountered at each step.  
9. Apply a cumulative minimum operation.  
10. Derive the minimum values in a forward-filling manner.  
11. Compute the ongoing minimum across the dataset.  
12. Extract the minimum cumulated over the sequence.  
13. Evaluate the minimum value up to the current position.  
14. Calculate the minimum so far at each step.  
15. Retrieve the successively decreasing minimum values.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: trim values at input thresholds

=== Response ===
Here are 15 semantically equivalent variations of the instruction "trim values at input thresholds":

1. Clip values to specified thresholds  
2. Limit values to given upper and lower bounds  
3. Constrain values within input threshold ranges  
4. Bound values at provided cutoff points  
5. Censor values outside the specified thresholds  
6. Restrict values to the given minimum and maximum limits  
7. Truncate values beyond the input boundaries  
8. Cap values at the defined threshold levels  
9. Filter values to stay within the provided range  
10. Threshold values at the input limits  
11. Cut off values outside the given thresholds  
12. Squeeze values into the specified range  
13. Normalize values to the input bounds  
14. Adjust values to fit within the defined thresholds  
15. Enforce value constraints based on input limits
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace values where condition is True

=== Response ===
Here are 15 semantically equivalent variations of the instruction "replace values where condition is True":  

1. Substitute values when the condition is met.  
2. Update values for rows that satisfy the condition.  
3. Replace entries where the specified condition holds.  
4. Modify values in cases where the condition is True.  
5. Change values based on a given condition.  
6. Swap values where the criteria are satisfied.  
7. Overwrite values if the condition evaluates to True.  
8. Alter data entries where the condition applies.  
9. Replace instances where the condition is valid.  
10. Assign new values to rows meeting the condition.  
11. Transform values where the condition is fulfilled.  
12. Apply replacements to records matching the condition.  
13. Set new values for elements that pass the condition.  
14. Replace data points in rows where the condition is True.  
15. Modify records only if the condition is satisfied.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace values where condition is False

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Substitute values when the condition evaluates to False.  
2. Update values where the specified condition is not met.  
3. Replace entries if the condition returns False.  
4. Modify values for rows where the condition is False.  
5. Change values in cases where the condition fails.  
6. Overwrite values when the condition is not satisfied.  
7. Swap values where the given condition is False.  
8. Alter values for records that do not meet the condition.  
9. Replace data points where the condition does not hold.  
10. Assign new values when the condition is False.  
11. Transform values for entries failing the condition.  
12. Update cells where the condition is not True.  
13. Replace elements where the condition is invalid.  
14. Fill values in positions where the condition evaluates to False.  
15. Override values if the condition is unmet.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: select columns based on data types

=== Response ===
Here are 15 semantically equivalent variations of the instruction "select columns based on data types":  

1. Filter columns by their data types  
2. Choose columns according to their dtype  
3. Extract columns based on their data type  
4. Select dataframe columns by dtype  
5. Retrieve columns matching specified data types  
6. Pick columns depending on their data type  
7. Isolate columns by their dtype  
8. Subset columns using data type criteria  
9. Return columns of specific data types  
10. Filter dataframe columns by their dtype  
11. Extract only columns with certain data types  
12. Select specific dtypes from the dataframe  
13. Choose columns where dtype matches a condition  
14. Retrieve only columns of a given data type  
15. Subset the dataframe by column data types
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: insert a column into a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "insert a column into a DataFrame":  

1. Add a new column to a DataFrame.  
2. Append a column to a DataFrame.  
3. Place a column in a DataFrame.  
4. Include a column in a DataFrame.  
5. Inject a column into a DataFrame.  
6. Embed a column in a DataFrame.  
7. Incorporate a column into a DataFrame.  
8. Introduce a column to a DataFrame.  
9. Add a new data column to a DataFrame.  
10. Insert a new column into a DataFrame.  
11. Attach a column to a DataFrame.  
12. Put a column into a DataFrame.  
13. Add an additional column to a DataFrame.  
14. Create and insert a column in a DataFrame.  
15. Supply a new column to a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: drop specified labels from rows or columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "drop specified labels from rows or columns":  

1. Remove specific labels from rows or columns.  
2. Delete specified labels along rows or columns.  
3. Eliminate given labels from the rows or columns.  
4. Exclude certain labels in rows or columns.  
5. Drop selected labels from either rows or columns.  
6. Strip away specified labels from rows/columns.  
7. Omit designated labels from rows or columns.  
8. Filter out particular labels in rows or columns.  
9. Remove predefined labels from rows or columns.  
10. Discard indicated labels along rows or columns.  
11. Erase specified labels from rows or columns.  
12. Cut out certain labels from rows or columns.  
13. Expunge selected labels from rows/columns.  
14. Drop assigned labels from rows or columns.  
15. Prune specified labels from rows or columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: remove and return a column from a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "remove and return a column from a DataFrame":  

1. Drop a column from a DataFrame and return it.  
2. Extract and delete a column from a DataFrame.  
3. Remove a column from a DataFrame and retrieve it.  
4. Delete a column from a DataFrame and get its values.  
5. Pop a column from a DataFrame.  
6. Take out a column from a DataFrame and return it.  
7. Isolate a column by removing it from a DataFrame and returning it.  
8. Detach a column from a DataFrame and provide it as output.  
9. Eliminate a column from a DataFrame while returning its contents.  
10. Withdraw a column from a DataFrame and output it.  
11. Cut out a column from a DataFrame and return the removed data.  
12. Strip a column from a DataFrame and pass it back.  
13. Pluck a column from a DataFrame and yield it.  
14. Separate a column from a DataFrame and make it available.  
15. Retrieve a column by removing it from the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: test if two DataFrames are equal

=== Response ===
Here are 15 semantically equivalent variations of the instruction "test if two DataFrames are equal":  

1. Check whether two DataFrames are identical.  
2. Verify if two DataFrames have the same content.  
3. Compare two DataFrames for equality.  
4. Determine if two DataFrames are the same.  
5. Assess whether two DataFrames match exactly.  
6. Confirm that two DataFrames are equal.  
7. Evaluate if two DataFrames contain identical data.  
8. Check for equality between two DataFrames.  
9. Test whether two DataFrames have identical values.  
10. See if two DataFrames are equivalent.  
11. Validate if two DataFrames are equal in content.  
12. Examine if two DataFrames are the same in all aspects.  
13. Determine whether two DataFrames are indistinguishable.  
14. Compare if two DataFrames have matching rows and columns.  
15. Inspect if two DataFrames are equal in structure and data.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: iterate over DataFrame rows as (index, Series)

=== Response ===
Here are 15 semantically equivalent variations of the instruction "iterate over DataFrame rows as (index, Series)":

1. Loop through each row in the DataFrame, returning (index, Series) pairs.  
2. Traverse the DataFrame rows, yielding each row as an (index, Series) tuple.  
3. Iterate through the rows of the DataFrame, accessing them as (index, Series).  
4. Enumerate DataFrame rows, providing each as an (index, Series) combination.  
5. Step through each row in the DataFrame, retrieving (index, Series) for each.  
6. Scan the DataFrame rows, obtaining (index, Series) for every iteration.  
7. Process each row in the DataFrame as an (index, Series) pair.  
8. Cycle through the DataFrame's rows, extracting (index, Series) entries.  
9. Move through the DataFrame row-wise, returning (index, Series) elements.  
10. Navigate the DataFrame rows, generating (index, Series) for each row.  
11. Go over every row in the DataFrame, fetching (index, Series) sequentially.  
12. Access each row in the DataFrame as an (index, Series) structure.  
13. Walk through the DataFrame rows, collecting (index, Series) pairs.  
14. Examine each row in the DataFrame, handling them as (index, Series).  
15. Progress through the DataFrame rows, yielding (index, Series) at each step.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: iterate over DataFrame rows as namedtuples

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Loop through DataFrame rows using namedtuples.  
2. Traverse DataFrame rows as namedtuples.  
3. Iterate through DataFrame rows represented as namedtuples.  
4. Process each row in a DataFrame as a namedtuple.  
5. Step through DataFrame rows using namedtuple objects.  
6. Access DataFrame rows as namedtuples in a loop.  
7. Cycle over DataFrame rows with namedtuple conversion.  
8. Enumerate DataFrame rows as namedtuples.  
9. Move through DataFrame rows by converting them to namedtuples.  
10. Scan DataFrame rows by treating them as namedtuples.  
11. Navigate DataFrame rows as namedtuples sequentially.  
12. Parse DataFrame rows into namedtuples and iterate.  
13. Handle DataFrame rows by looping through namedtuples.  
14. Progress through each row of a DataFrame as a namedtuple.  
15. Walk through DataFrame rows using namedtuple representations.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function chain-style

=== Response ===
Here are 15 semantically equivalent variations of the instruction "apply a function chain-style":  

1. Apply a function in a chained manner.  
2. Use method chaining to apply a function.  
3. Execute a function in a pipeline fashion.  
4. Apply a function sequentially in a chain.  
5. Perform a function application using method chaining.  
6. Chain operations and apply a function.  
7. Apply a function as part of a method chain.  
8. Use a fluent interface to apply a function.  
9. Apply a function within a sequence of chained methods.  
10. Implement function application in a chained operation.  
11. Apply a function in a dot-chaining style.  
12. Process data by chaining a function call.  
13. Apply a function through successive method calls.  
14. Use chaining syntax to apply a function.  
15. Apply a function as part of a method-call chain.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: sort a DataFrame by its index

=== Response ===
Certainly! Here are 15 semantically equivalent variations of the instruction "sort a DataFrame by its index":  

1. Arrange the DataFrame based on its index.  
2. Order the DataFrame by its index.  
3. Sort the DataFrame rows according to the index.  
4. Reorder the DataFrame using its index.  
5. Sort the DataFrame based on index values.  
6. Organize the DataFrame by the index.  
7. Sort the DataFrame with respect to its index.  
8. Rearrange the DataFrame by its index.  
9. Sort the DataFrame rows by their index labels.  
10. Sort the DataFrame along its index.  
11. Sort the DataFrame according to the index.  
12. Sort the DataFrame by the row labels.  
13. Index-sort the DataFrame.  
14. Sort the DataFrame rows in index order.  
15. Arrange the DataFrame rows by their index.  

Let me know if you'd like further refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: interchange axes

=== Response ===
Here are 15 semantically equivalent variations of the instruction "interchange axes":  

1. Swap the axes.  
2. Exchange the axes.  
3. Reverse the axes.  
4. Transpose the axes.  
5. Flip the axes.  
6. Switch the axes.  
7. Rotate the axes.  
8. Change the axis order.  
9. Reorder the axes.  
10. Invert the axes.  
11. Alter the axis positions.  
12. Shift the axes.  
13. Permute the axes.  
14. Move the axes.  
15. Reposition the axes.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: transpose the rows and columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "transpose the rows and columns":  

1. Swap the rows and columns.  
2. Convert rows to columns and columns to rows.  
3. Flip the dataframe along its diagonal.  
4. Interchange rows with columns.  
5. Pivot the rows into columns and vice versa.  
6. Rotate the dataframe to switch rows and columns.  
7. Invert the rows and columns.  
8. Reverse the row and column positions.  
9. Transform the rows into columns and columns into rows.  
10. Exchange rows for columns.  
11. Perform a matrix transposition on the dataframe.  
12. Reorient the dataframe by swapping rows and columns.  
13. Turn the rows into columns and the columns into rows.  
14. Switch the axis so that rows become columns and columns become rows.  
15. Apply a transpose operation to interchange rows and columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: transpose the rows and columns (shortcut)

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Swap rows and columns (quick method).  
2. Flip the dataframe's axes (shortcut).  
3. Interchange rows and columns (fast way).  
4. Rotate the dataframe to switch rows and columns (shortcut).  
5. Use the transpose operation on the dataframe (quickly).  
6. Convert rows to columns and vice versa (shortcut).  
7. Apply the .T property to the dataframe.  
8. Invert the rows and columns (fast method).  
9. Switch the dataframe’s orientation (shortcut).  
10. Transpose the data (quick command).  
11. Exchange rows and columns (efficiently).  
12. Use pandas' transpose function (shortcut).  
13. Quickly flip rows and columns.  
14. Reverse the row-column arrangement (shortcut).  
15. Apply axis transposition (fast approach).
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return the largest n elements

=== Response ===
Here are 15 semantically equivalent variations of the instruction "return the largest n elements":  

1. Retrieve the top n largest elements.  
2. Fetch the n biggest elements.  
3. Get the largest n values.  
4. Return the n maximum elements.  
5. Extract the top n entries by size.  
6. Obtain the n greatest elements.  
7. Select the largest n items.  
8. Find the biggest n elements.  
9. Return the n highest values.  
10. Provide the top n largest entries.  
11. Give the n most significant elements.  
12. Identify the largest n components.  
13. List the top n elements in descending order.  
14. Output the n elements with the highest magnitude.  
15. Deliver the n largest members.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return the smallest n elements

=== Response ===
Here are 15 semantically equivalent variations of the instruction "return the smallest n elements":  

1. Retrieve the n smallest elements.  
2. Get the minimal n values.  
3. Fetch the bottom n elements.  
4. Return the n least values.  
5. Extract the smallest n items.  
6. Obtain the n minimum entries.  
7. Find the tiniest n elements.  
8. Select the n lowest values.  
9. Provide the least n elements.  
10. List the n smallest entries.  
11. Output the minimal n records.  
12. Identify the bottom n items.  
13. Collect the smallest n data points.  
14. Generate the n least values.  
15. Compute the n smallest elements.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: access the Styler object to style the DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Use the Styler object to format the DataFrame.  
2. Apply styling to the DataFrame using the Styler object.  
3. Access the Styler to customize the appearance of the DataFrame.  
4. Style the DataFrame by utilizing the Styler object.  
5. Modify the DataFrame's styling with the Styler object.  
6. Employ the Styler to apply visual formatting to the DataFrame.  
7. Retrieve the Styler object to enhance the DataFrame's presentation.  
8. Adjust the DataFrame's styling via the Styler object.  
9. Use Styler to apply CSS-based styling to the DataFrame.  
10. Access the Styler to change the visual display of the DataFrame.  
11. Apply custom styling to the DataFrame using Styler.  
12. Format the DataFrame by calling its Styler object.  
13. Utilize the Styler to modify the DataFrame's visual output.  
14. Call the Styler object to style the DataFrame.  
15. Enhance the DataFrame's appearance by accessing the Styler.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: convert a DataFrame to a dictionary

=== Response ===
Here are 15 semantically equivalent variations of the instruction "convert a DataFrame to a dictionary":

1. Transform the DataFrame into a dictionary.  
2. Change the DataFrame into a dictionary format.  
3. Convert the given DataFrame to a dict.  
4. Turn the DataFrame into a dictionary.  
5. Create a dictionary from the DataFrame.  
6. Generate a dictionary representation of the DataFrame.  
7. Map the DataFrame to a dictionary.  
8. Export the DataFrame as a dictionary.  
9. Represent the DataFrame as a dictionary.  
10. Parse the DataFrame into a dictionary.  
11. Serialize the DataFrame to a dictionary.  
12. Extract the DataFrame into a dictionary.  
13. Render the DataFrame in dictionary form.  
14. Translate the DataFrame into a dictionary.  
15. Reformat the DataFrame as a dictionary.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: convert the DataFrame to a NumPy array

=== Response ===
Here are 15 semantically equivalent variations of the instruction "convert the DataFrame to a NumPy array":  

1. Transform the DataFrame into a NumPy array.  
2. Change the DataFrame to a NumPy array.  
3. Turn the DataFrame into a NumPy array.  
4. Convert the DataFrame into a NumPy array.  
5. Extract the DataFrame as a NumPy array.  
6. Export the DataFrame to a NumPy array.  
7. Generate a NumPy array from the DataFrame.  
8. Cast the DataFrame to a NumPy array.  
9. Obtain a NumPy array representation of the DataFrame.  
10. Retrieve the DataFrame values as a NumPy array.  
11. Render the DataFrame as a NumPy array.  
12. Translate the DataFrame into a NumPy array.  
13. Get the NumPy array equivalent of the DataFrame.  
14. Reproduce the DataFrame as a NumPy array.  
15. Switch the DataFrame to a NumPy array.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: write a DataFrame to an Excel file

=== Response ===
Here are 15 semantically equivalent variations of the instruction "write a DataFrame to an Excel file":  

1. Save a DataFrame to an Excel file.  
2. Export a DataFrame to an Excel spreadsheet.  
3. Store the DataFrame in an Excel file.  
4. Write the DataFrame data to an Excel document.  
5. Output the DataFrame to an Excel file.  
6. Dump the DataFrame into an Excel sheet.  
7. Convert the DataFrame to an Excel file.  
8. Serialize the DataFrame to an Excel workbook.  
9. Save the DataFrame as an Excel file.  
10. Export the DataFrame to a .xlsx file.  
11. Write the DataFrame contents to an Excel file.  
12. Generate an Excel file from the DataFrame.  
13. Persist the DataFrame in an Excel format.  
14. Record the DataFrame in an Excel spreadsheet.  
15. Transfer the DataFrame data to an Excel file.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise correlation of columns in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Calculate the pairwise correlation between columns in a DataFrame.  
2. Determine the correlation coefficients for all column pairs in a DataFrame.  
3. Compute the correlation matrix for the columns of a DataFrame.  
4. Find the pairwise correlations among DataFrame columns.  
5. Generate a correlation matrix showing relationships between DataFrame columns.  
6. Assess the correlation between each pair of columns in a DataFrame.  
7. Measure the pairwise column correlations in a DataFrame.  
8. Obtain the correlation values for every column combination in a DataFrame.  
9. Evaluate the inter-column correlations in a DataFrame.  
10. Derive the pairwise correlation coefficients for DataFrame columns.  
11. Check the correlation between all column pairs in a DataFrame.  
12. Compute the correlation scores between each pair of DataFrame columns.  
13. Analyze the pairwise column-wise correlations in a DataFrame.  
14. Construct a correlation matrix from DataFrame columns.  
15. Retrieve the correlation measures for all column pairs in a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise covariance of columns in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Calculate the covariance between pairs of columns in a DataFrame.  
2. Determine the pairwise covariances among DataFrame columns.  
3. Compute the covariance matrix for all columns in a DataFrame.  
4. Find the covariance for each pair of columns in a DataFrame.  
5. Generate a covariance matrix from DataFrame columns.  
6. Assess the pairwise column covariances in a DataFrame.  
7. Measure the covariance between every two columns in a DataFrame.  
8. Compute the inter-column covariance for a DataFrame.  
9. Derive the covariance matrix of DataFrame columns.  
10. Evaluate covariance relationships between DataFrame columns.  
11. Obtain the covariance for all column pairs in a DataFrame.  
12. Construct a covariance matrix for the columns of a DataFrame.  
13. Calculate covariances across all column combinations in a DataFrame.  
14. Retrieve pairwise covariance values for DataFrame columns.  
15. Analyze the covariance between different columns in a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: rank elements within each column of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Assign ranks to the values in each column of the DataFrame.  
2. Compute the rank of elements column-wise in the DataFrame.  
3. Determine the ranking of values for every column in the DataFrame.  
4. Rank data entries within each column of the DataFrame.  
5. Generate ordinal rankings for elements in every column of the DataFrame.  
6. Calculate the position of each value relative to others in its column.  
7. Produce a ranked order of entries for each column in the DataFrame.  
8. Evaluate the rank of each element within its respective column.  
9. Apply ranking to values in all columns of the DataFrame.  
10. Return the rank of DataFrame entries on a per-column basis.  
11. Sort and assign ranks to elements in each column of the DataFrame.  
12. Obtain the ranked sequence of values for every column.  
13. Derive the ordinal position of each value within its column.  
14. Perform a ranking operation across all columns of the DataFrame.  
15. Establish a rank order for elements in each DataFrame column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: get the mode of each column in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "get the mode of each column in a DataFrame":  

1. Calculate the most frequent value for every column in the DataFrame.  
2. Determine the mode for all columns in the DataFrame.  
3. Find the mode of each column in the DataFrame.  
4. Retrieve the most common value in every column of the DataFrame.  
5. Compute the mode values across all columns in the DataFrame.  
6. Identify the highest frequency value for each column in the DataFrame.  
7. Extract the modal value from every column in the DataFrame.  
8. Obtain the mode for every column in the DataFrame.  
9. Return the most frequently occurring value for each column in the DataFrame.  
10. Derive the mode for each column in the DataFrame.  
11. Generate the mode statistics for all columns in the DataFrame.  
12. Fetch the mode of every column in the DataFrame.  
13. Compute the most common entry in each column of the DataFrame.  
14. Summarize each column in the DataFrame by its mode.  
15. Analyze the DataFrame to find the mode of each column.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: generate descriptive statistics for a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "generate descriptive statistics for a DataFrame":  

1. Compute summary statistics for the DataFrame.  
2. Calculate descriptive statistics for the given DataFrame.  
3. Provide statistical summaries of the DataFrame.  
4. Generate a statistical summary of the DataFrame.  
5. Display descriptive stats for the DataFrame.  
6. Return key statistical measures for the DataFrame.  
7. Produce summary metrics for the DataFrame.  
8. Extract descriptive statistics from the DataFrame.  
9. Summarize the DataFrame with statistical measures.  
10. Obtain statistical descriptions of the DataFrame.  
11. Evaluate the DataFrame using descriptive statistics.  
12. Report summary statistics for the DataFrame.  
13. Analyze the DataFrame by generating descriptive stats.  
14. Retrieve statistical summaries for the DataFrame.  
15. List the main statistical properties of the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: plot histogram of DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "plot histogram of DataFrame columns":

1. Create a histogram for the columns in the DataFrame.  
2. Generate histogram plots for the DataFrame columns.  
3. Visualize the distribution of DataFrame columns using histograms.  
4. Plot histograms for each column in the DataFrame.  
5. Display the frequency distribution of DataFrame columns as histograms.  
6. Construct histogram charts for the columns of the DataFrame.  
7. Use the DataFrame columns to produce histogram plots.  
8. Render histograms representing the data in the DataFrame columns.  
9. Illustrate the DataFrame columns with histogram graphics.  
10. Show histograms for all columns in the DataFrame.  
11. Draw histogram plots from the DataFrame columns.  
12. Map the distribution of DataFrame columns via histograms.  
13. Present DataFrame column data as histogram visualizations.  
14. Plot frequency distributions for each DataFrame column.  
15. Generate histogram representations of the DataFrame columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: draw a boxplot from DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "draw a boxplot from DataFrame columns":  

1. Create a boxplot using DataFrame columns.  
2. Generate a boxplot from the columns of a DataFrame.  
3. Plot a boxplot with DataFrame columns.  
4. Visualize DataFrame columns as a boxplot.  
5. Construct a boxplot from the given DataFrame columns.  
6. Display a boxplot using the specified DataFrame columns.  
7. Render a boxplot based on DataFrame columns.  
8. Produce a boxplot from the columns in the DataFrame.  
9. Make a boxplot using the DataFrame's columns.  
10. Show a boxplot derived from DataFrame columns.  
11. Build a boxplot with the columns of the DataFrame.  
12. Illustrate the DataFrame columns in a boxplot.  
13. Use DataFrame columns to create a boxplot.  
14. Generate a box-and-whisker plot from DataFrame columns.  
15. Plot a box-and-whisker diagram using DataFrame columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: plot data from a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "plot data from a DataFrame":  

1. Visualize the DataFrame's data.  
2. Create a plot using the DataFrame.  
3. Generate a graph from the DataFrame.  
4. Display a chart for the DataFrame's data.  
5. Plot the information stored in the DataFrame.  
6. Render a visualization of the DataFrame.  
7. Produce a graphical representation of the DataFrame.  
8. Show a plot derived from the DataFrame.  
9. Construct a figure using the DataFrame's data.  
10. Illustrate the DataFrame's contents with a plot.  
11. Draw a chart based on the DataFrame.  
12. Plot the DataFrame's records graphically.  
13. Create a visualization from the DataFrame's data.  
14. Graph the values in the DataFrame.  
15. Generate a plot from the DataFrame's information.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: calculate the difference of a DataFrame element compared with another element in the same column

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Compute the difference between two elements in the same column of a DataFrame.  
2. Find the difference between a DataFrame element and another element in its column.  
3. Determine the difference between two values in the same column of a DataFrame.  
4. Subtract one DataFrame element from another in the same column.  
5. Calculate the delta between two elements in a single DataFrame column.  
6. Measure the difference between a value and another value in the same DataFrame column.  
7. Compute the offset between two entries in the same column of a DataFrame.  
8. Subtract a DataFrame element from another element within its column.  
9. Evaluate the difference between two cells in the same column of a DataFrame.  
10. Find the numerical gap between two elements in a DataFrame column.  
11. Calculate the deviation between a DataFrame element and another in its column.  
12. Determine the subtraction result of two values in the same DataFrame column.  
13. Compute the distance between two elements in a single column of a DataFrame.  
14. Subtract one row's value from another row's value in the same DataFrame column.  
15. Assess the difference between two data points in the same column of a DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: calculate percentage change between the current and a prior element

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Compute the percentage difference between the current and previous element.  
2. Determine the percent change from the prior element to the current one.  
3. Find the relative percentage change between the current and preceding value.  
4. Calculate the growth rate in percentage terms between consecutive elements.  
5. Measure the percentage shift from the previous to the current element.  
6. Derive the percent variation between the current and the prior entry.  
7. Assess the percentage difference between successive elements.  
8. Compute the rate of change as a percentage between the current and previous value.  
9. Evaluate the proportional change in percent between adjacent elements.  
10. Quantify the percentage increase or decrease from the prior to the current element.  
11. Determine the percentage deviation between the current and preceding data point.  
12. Calculate the percent delta between the current and the previous entry.  
13. Find the percentage change relative to the prior element.  
14. Compute the fractional change expressed as a percentage between consecutive elements.  
15. Measure the percentage difference compared to the preceding value.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative sum of DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute cumulative sum of DataFrame columns":  

1. Calculate the running total for each column in the DataFrame.  
2. Determine the cumulative sum across all columns in the DataFrame.  
3. Compute the progressive sum for every column in the DataFrame.  
4. Find the accumulated sum for each column in the DataFrame.  
5. Generate the cumulative summation of DataFrame columns.  
6. Obtain the running summation for all columns in the DataFrame.  
7. Compute the cumulative total for each DataFrame column.  
8. Return the aggregated sum over columns in the DataFrame.  
9. Calculate the rolling sum for each column in the DataFrame.  
10. Sum the values progressively across DataFrame columns.  
11. Produce the cumulative addition of DataFrame columns.  
12. Evaluate the running accumulation of sums for each column.  
13. Compute the step-by-step sum for all columns in the DataFrame.  
14. Apply a cumulative summation operation to DataFrame columns.  
15. Derive the accumulated totals for each column in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute cumulative product of DataFrame columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute cumulative product of DataFrame columns":

1. Calculate the cumulative product for each column in the DataFrame.  
2. Find the running product across DataFrame columns.  
3. Compute the element-wise cumulative product of all columns in the DataFrame.  
4. Generate the cumulative product for every column in the DataFrame.  
5. Determine the progressive product of values in each DataFrame column.  
6. Compute the column-wise cumulative product of the DataFrame.  
7. Calculate the running multiplication for all columns in the DataFrame.  
8. Obtain the cumulative product along each column of the DataFrame.  
9. Produce the cumulative product for the columns in the DataFrame.  
10. Evaluate the cumulative product for every column in the DataFrame.  
11. Return the cumulative product across DataFrame columns.  
12. Compute the accumulating product for each column in the DataFrame.  
13. Derive the cumulative product per column in the DataFrame.  
14. Calculate the sequential product for all DataFrame columns.  
15. Generate the running product for each column in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: evaluate an expression in the context of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Compute an expression within a DataFrame's context.  
2. Assess an expression using a DataFrame as the reference.  
3. Execute an expression in the scope of a DataFrame.  
4. Calculate an expression relative to a DataFrame.  
5. Evaluate a formula in the context of a given DataFrame.  
6. Apply an expression to a DataFrame for evaluation.  
7. Run an expression with respect to a DataFrame.  
8. Process an expression within a DataFrame environment.  
9. Resolve an expression based on a DataFrame’s data.  
10. Determine the result of an expression using DataFrame values.  
11. Analyze an expression in a DataFrame setting.  
12. Interpret an expression within the DataFrame’s namespace.  
13. Perform expression evaluation in a DataFrame framework.  
14. Carry out an expression evaluation in the context of a DataFrame.  
15. Validate an expression against a DataFrame’s contents.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: transform each element of a list-like to a row

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Convert each item in a list-like structure into individual rows.  
2. Map every element of a list-like object to a separate row.  
3. Expand list-like entries so that each element becomes a row.  
4. Transform list-like values such that each entry forms its own row.  
5. Flatten list-like data to produce one row per element.  
6. Split list-like elements into distinct rows.  
7. Decompose list-like objects into separate rows for each element.  
8. Unnest list-like structures, creating a row for each item.  
9. Reshape list-like data to have each element as an independent row.  
10. Break down list-like columns so that each value occupies its own row.  
11. Explode list-like entries into multiple rows, one per element.  
12. Distribute elements of a list-like structure across individual rows.  
13. Separate each component of a list-like into its own row.  
14. Reformat list-like sequences to generate one row per entry.  
15. Unpack list-like collections into rows, each containing a single element.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace values where a condition is True

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Substitute values when a specific condition is met.  
2. Update values based on a given condition.  
3. Modify entries where a certain criterion holds True.  
4. Replace data entries if they satisfy a particular condition.  
5. Change values in a DataFrame where a condition evaluates to True.  
6. Overwrite entries that meet a specified requirement.  
7. Swap values in cases where a condition is satisfied.  
8. Alter DataFrame elements when a given predicate is True.  
9. Transform values that fulfill a certain logical condition.  
10. Set new values where a Boolean condition returns True.  
11. Apply replacements to rows that match a specified criterion.  
12. Assign different values to cells meeting a condition.  
13. Replace entries in a DataFrame if a test condition passes.  
14. Modify records where a logical expression evaluates to True.  
15. Update only the values that satisfy a predefined condition.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply one or more operations over the specified axis of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Perform operations along the designated axis of a DataFrame.  
2. Execute one or more functions over the specified axis in a DataFrame.  
3. Apply operations across the chosen axis of a DataFrame.  
4. Run one or more computations over the given axis of a DataFrame.  
5. Carry out operations on the specified axis of a DataFrame.  
6. Use functions along the selected axis of a DataFrame.  
7. Conduct operations over the defined axis of a DataFrame.  
8. Process data along the indicated axis of a DataFrame.  
9. Implement one or more transformations over the specified axis in a DataFrame.  
10. Apply computations across the given axis of a DataFrame.  
11. Perform aggregations or other operations over the designated DataFrame axis.  
12. Execute calculations along the specified axis of a DataFrame.  
13. Run transformations over the chosen axis in a DataFrame.  
14. Apply a function or multiple functions across the defined DataFrame axis.  
15. Process DataFrame data along the specified axis using one or more operations.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function to each group and return a DataFrame with the same shape

=== Response ===
Certainly! Here are 15 semantically equivalent variations of the given instruction related to pandas API usage:  

1. **Use a function on every group and produce a DataFrame of identical dimensions.**  
2. **Apply a function to each grouped subset and return a DataFrame with matching shape.**  
3. **Execute a function per group and generate a DataFrame with unchanged structure.**  
4. **Run a function across all groups and output a DataFrame preserving the original shape.**  
5. **Process each group with a function and yield a DataFrame retaining the same form.**  
6. **Perform a function on each group and ensure the returned DataFrame has the same shape.**  
7. **Transform every group using a function and maintain the DataFrame’s original dimensions.**  
8. **Compute a function for each group and return a DataFrame with an unchanged layout.**  
9. **Map a function to each group and produce a DataFrame with identical shape.**  
10. **Evaluate a function on all groups and return a DataFrame with the same structure.**  
11. **Apply a custom function to grouped data and retain the DataFrame’s original shape.**  
12. **Process grouped data with a function and return a DataFrame of the same size.**  
13. **Iterate over each group, apply a function, and return a DataFrame with matching dimensions.**  
14. **Perform an operation per group and ensure the resulting DataFrame has the same form.**  
15. **Call a function on every group and return a DataFrame with unchanged shape.**  

Let me know if you'd like refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: backward fill missing values in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "backward fill missing values in a DataFrame":  

1. Fill missing values in a DataFrame using backward filling.  
2. Use bfill to replace NaN values in the DataFrame.  
3. Perform a backward fill on missing data in the DataFrame.  
4. Replace missing values with the next valid observation in the DataFrame.  
5. Apply backfill to handle NaN entries in the DataFrame.  
6. Use backward fill to impute missing values in the DataFrame.  
7. Propagate non-null values forward to fill gaps in the DataFrame.  
8. Backfill NaN entries in the DataFrame using the next available value.  
9. Replace NA values by carrying the next observation backward in the DataFrame.  
10. Use `method='bfill'` to fill missing data in the DataFrame.  
11. Perform a backfill operation to impute missing DataFrame values.  
12. Fill gaps in the DataFrame by propagating values backward.  
13. Impute missing entries in the DataFrame using backward filling.  
14. Apply the bfill method to replace missing values in the DataFrame.  
15. Use backward propagation to fill NaN values in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: forward fill missing values in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "forward fill missing values in a DataFrame":  

1. Fill NaN values in a DataFrame using the forward-fill method.  
2. Propagate non-null values forward to fill missing data in the DataFrame.  
3. Replace missing values in a DataFrame with the last observed value.  
4. Forward-fill null entries in the DataFrame.  
5. Carry the last valid observation forward to fill gaps in the DataFrame.  
6. Use forward filling to impute missing values in the DataFrame.  
7. Apply the ffill method to replace NaN values in the DataFrame.  
8. Complete missing DataFrame entries by forward propagation.  
9. Fill in missing data points using the previous valid value in the DataFrame.  
10. Use forward fill to handle NaN values in the DataFrame.  
11. Replace NaNs in the DataFrame by copying the preceding non-null value forward.  
12. Perform forward fill imputation on the DataFrame.  
13. Forward propagate non-missing values to fill NaNs in the DataFrame.  
14. Use the ffill operation to complete missing data in the DataFrame.  
15. Fill DataFrame gaps by carrying the last known value forward.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: limit values in a DataFrame to a specified range

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Restrict DataFrame values to a defined range  
2. Constrain DataFrame values within a specified range  
3. Clip values in a DataFrame to a minimum and maximum threshold  
4. Bound DataFrame values within a given range  
5. Filter DataFrame values to stay within upper and lower limits  
6. Cap DataFrame values to a specified minimum and maximum  
7. Trim DataFrame values to fall within a set range  
8. Enforce a value range on a DataFrame  
9. Adjust DataFrame values to stay within a defined interval  
10. Set upper and lower bounds for DataFrame values  
11. Ensure DataFrame values do not exceed a given range  
12. Normalize DataFrame values within specified limits  
13. Confine DataFrame values to a predefined range  
14. Apply a value ceiling and floor to a DataFrame  
15. Keep DataFrame values within a specified minimum and maximum range
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: conform a DataFrame to a new index

=== Response ===
Here are 15 semantically equivalent variations of the instruction "conform a DataFrame to a new index":  

1. Align a DataFrame with a different index.  
2. Adjust a DataFrame to match a specified index.  
3. Reindex a DataFrame to a new set of labels.  
4. Modify a DataFrame to follow a given index.  
5. Transform a DataFrame to conform to a target index.  
6. Update a DataFrame’s index to a new one.  
7. Adapt a DataFrame to a different index structure.  
8. Change a DataFrame’s index to match another.  
9. Reconform a DataFrame to an alternate index.  
10. Make a DataFrame compatible with a new index.  
11. Shift a DataFrame’s indexing to a different set of labels.  
12. Restructure a DataFrame according to a desired index.  
13. Map a DataFrame to a new index configuration.  
14. Refit a DataFrame to an updated index.  
15. Synchronize a DataFrame with a different index.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: insert a column into a DataFrame at a specified location

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Add a column to a DataFrame at a specific position.  
2. Place a new column in a DataFrame at a given index.  
3. Insert a new column into a pandas DataFrame at a particular location.  
4. Add a column to a DataFrame at a designated spot.  
5. Embed a column in a DataFrame at the specified position.  
6. Introduce a column into a DataFrame at a chosen index.  
7. Append a column to a DataFrame at a certain location.  
8. Inject a column into a DataFrame at the desired position.  
9. Incorporate a new column in a DataFrame at a given place.  
10. Position a column in a DataFrame at a specified index.  
11. Set a column into a DataFrame at a particular place.  
12. Slide a column into a DataFrame at a predefined location.  
13. Add a new column to a DataFrame at an exact position.  
14. Insert a column at a specific point in a DataFrame.  
15. Place a column at a certain point in a pandas DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: remove a column from a DataFrame and return it

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Delete a column from a DataFrame and output it.  
2. Drop a column from a DataFrame and return the removed column.  
3. Extract and remove a column from a DataFrame.  
4. Eliminate a column from a DataFrame and get it as output.  
5. Take out a column from a DataFrame and return it.  
6. Strip a column from a DataFrame and provide it as the result.  
7. Remove a specified column from a DataFrame and retrieve it.  
8. Pop a column from a DataFrame and return the deleted column.  
9. Exclude a column from a DataFrame and return the excluded column.  
10. Cut out a column from a DataFrame and obtain it.  
11. Detach a column from a DataFrame and return the detached column.  
12. Withdraw a column from a DataFrame and return the withdrawn column.  
13. Omit a column from a DataFrame and return the omitted column.  
14. Expunge a column from a DataFrame and return the expunged column.  
15. Isolate and remove a column from a DataFrame, then return it.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: remove duplicate rows from a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "remove duplicate rows from a DataFrame":  

1. Drop duplicate rows in the DataFrame.  
2. Eliminate duplicate rows from the DataFrame.  
3. Delete repeated rows in the DataFrame.  
4. Filter out duplicate rows in the DataFrame.  
5. Remove repeated rows from the DataFrame.  
6. Strip the DataFrame of duplicate rows.  
7. Clean the DataFrame by removing duplicate rows.  
8. Deduplicate the DataFrame rows.  
9. Exclude duplicate rows from the DataFrame.  
10. Drop rows with duplicate values in the DataFrame.  
11. Remove redundant rows from the DataFrame.  
12. Keep only unique rows in the DataFrame.  
13. Get rid of duplicate entries in the DataFrame.  
14. Retain only distinct rows in the DataFrame.  
15. Clear the DataFrame of any duplicate rows.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return memory usage of each column

=== Response ===
Here are 15 semantically equivalent variations of the instruction "return memory usage of each column":  

1. Show the memory consumption for every column.  
2. Display the memory usage per column.  
3. Retrieve the memory footprint of each column.  
4. Provide the memory allocation for all columns.  
5. List the memory usage for every column in the DataFrame.  
6. Compute the memory used by each column.  
7. Output the memory consumption of all columns.  
8. Return the memory usage breakdown by column.  
9. Get the memory usage statistics for each column.  
10. Report the memory utilization of every column.  
11. Extract the memory footprint for each column.  
12. Determine how much memory each column occupies.  
13. Fetch the memory allocation details per column.  
14. Calculate the memory usage for individual columns.  
15. Summarize the memory consumption across all columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return the first n rows ordered by columns in ascending order

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Fetch the initial n rows sorted by columns in ascending order.  
2. Retrieve the top n rows ordered by columns in ascending sequence.  
3. Get the first n rows arranged by columns in increasing order.  
4. Return the leading n rows sorted in ascending order by columns.  
5. Extract the first n rows ordered by columns from lowest to highest.  
6. Obtain the earliest n rows sorted by columns in ascending fashion.  
7. Display the first n rows organized by columns in ascending sequence.  
8. List the initial n rows sorted in ascending order based on columns.  
9. Provide the first n rows ordered by columns in an ascending manner.  
10. Query the first n rows sorted by columns in ascending arrangement.  
11. Yield the top n rows arranged by columns in ascending order.  
12. Collect the first n rows sorted in ascending order by columns.  
13. Generate the first n rows ordered by columns from smallest to largest.  
14. Show the initial n rows sorted by columns in increasing sequence.  
15. Output the first n rows arranged in ascending order by columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return the first n rows ordered by columns in descending order

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Fetch the initial n rows sorted by columns in descending order.  
2. Retrieve the top n rows arranged by columns in descending sequence.  
3. Get the first n rows ordered by specified columns in descending fashion.  
4. Return the earliest n rows sorted in descending order based on columns.  
5. Extract the first n rows with column values sorted in descending order.  
6. Display the top n rows ordered by columns from highest to lowest.  
7. Provide the first n rows sorted in descending order by the given columns.  
8. Obtain the initial n entries sorted by columns in decreasing order.  
9. List the first n rows arranged by columns in descending sequence.  
10. Generate the top n rows ordered by columns in descending manner.  
11. Output the first n rows sorted in descending order of the columns.  
12. Show the initial n rows ordered by columns in descending rank.  
13. Query the first n rows sorted by columns in descending arrangement.  
14. Collect the top n rows sorted in descending order by columns.  
15. Yield the first n rows arranged by columns in descending sort order.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: replace values where the condition is False

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Substitute values when the condition evaluates to False.  
2. Update values for rows where the condition is not True.  
3. Replace entries in cases where the condition is False.  
4. Modify values where the specified condition fails.  
5. Change values for records that do not meet the condition.  
6. Overwrite values in positions where the condition is False.  
7. Swap values in locations where the condition is not satisfied.  
8. Alter data points where the condition does not hold.  
9. Replace elements that do not fulfill the given condition.  
10. Set new values for rows where the condition is unmet.  
11. Exchange values when the condition is not valid.  
12. Assign replacements where the condition is False.  
13. Transform values in cases where the condition is invalid.  
14. Revise entries for instances where the condition is False.  
15. Fill values only where the condition is not True.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: align two objects on their axes with specified join method

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Align two objects along their axes using a specified join method.  
2. Synchronize the axes of two objects with a given join technique.  
3. Match the axes of two objects by applying a designated join strategy.  
4. Coordinate the axes of two objects with a specified join approach.  
5. Adjust two objects to align their axes using a particular join method.  
6. Bring two objects into alignment along their axes with a specified join type.  
7. Harmonize the axes of two objects by applying a chosen join method.  
8. Set the alignment of two objects on their axes with a defined join procedure.  
9. Align two objects axis-wise using a provided join mechanism.  
10. Ensure two objects share axis alignment via a specified join technique.  
11. Join two objects along their axes according to a given alignment method.  
12. Realign the axes of two objects using a predefined join process.  
13. Make two objects axis-aligned by executing a specified join operation.  
14. Orient two objects along their axes with a defined join policy.  
15. Configure the axes alignment of two objects with a particular join mode.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compare two DataFrames and show the differences

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compare two DataFrames and show the differences":  

1. Identify and display the discrepancies between two DataFrames.  
2. Highlight the differences between two pandas DataFrames.  
3. Show where two DataFrames do not match.  
4. Compare DataFrames and output the variations.  
5. Detect and present the dissimilarities in two DataFrames.  
6. Find and list the differing elements in two DataFrames.  
7. Contrast two DataFrames and reveal the inconsistencies.  
8. Check for differences between two DataFrames and display them.  
9. Analyze two DataFrames and show where they diverge.  
10. Examine two DataFrames for mismatches and report them.  
11. Compare two DataFrames and return the differing records.  
12. Display the rows or values that differ between two DataFrames.  
13. Perform a diff operation on two DataFrames and show the results.  
14. Extract and present the non-matching parts of two DataFrames.  
15. Evaluate two DataFrames and indicate the points of difference.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: update null elements with value in the same location from another DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Replace null values in a DataFrame with corresponding values from another DataFrame.  
2. Fill missing elements in one DataFrame with values from the same positions in another DataFrame.  
3. Update NaN entries in a DataFrame using values from the same locations in a different DataFrame.  
4. Substitute null entries in a DataFrame with matching values from another DataFrame.  
5. Overwrite missing data in one DataFrame with values from corresponding cells in another DataFrame.  
6. Set null elements in a DataFrame to the values found in the same positions of another DataFrame.  
7. Replace NA values in a DataFrame with values from the same indices in a separate DataFrame.  
8. Fill NaN values in a DataFrame with corresponding entries from another DataFrame.  
9. Update blank cells in one DataFrame with values from the same locations in another DataFrame.  
10. Backfill null entries in a DataFrame using aligned values from another DataFrame.  
11. Replace missing values in a DataFrame with non-null values from the same coordinates in another DataFrame.  
12. Fill in nulls in one DataFrame with the values from the corresponding positions in a second DataFrame.  
13. Override NaN elements in a DataFrame with values from the same rows and columns in another DataFrame.  
14. Patch null entries in a DataFrame using values from the identical locations in another DataFrame.  
15. Substitute NA elements in a DataFrame with values from the same indices and columns in another DataFrame.  

Let me know if you'd like any refinements or additional variations!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: update a DataFrame in place using non-null values from another DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Modify a DataFrame directly by incorporating non-null values from a different DataFrame.  
2. Update a DataFrame in-place with non-empty values from another DataFrame.  
3. Overwrite a DataFrame's values in place using non-null entries from a second DataFrame.  
4. Apply non-missing values from one DataFrame to another DataFrame, modifying it directly.  
5. Replace values in a DataFrame with corresponding non-null values from another DataFrame in place.  
6. Merge non-null values from a source DataFrame into a target DataFrame, updating it directly.  
7. Use non-empty data from one DataFrame to update another DataFrame without creating a new object.  
8. In-place update of a DataFrame with valid (non-null) values from a separate DataFrame.  
9. Synchronize a DataFrame with non-null values from another DataFrame, modifying it in place.  
10. Populate missing values in a DataFrame with corresponding non-null values from another DataFrame directly.  
11. Alter a DataFrame by filling it with non-null values from a different DataFrame in place.  
12. Directly update a DataFrame using non-empty cells from another DataFrame.  
13. Combine DataFrames by updating the original with non-null values from the second DataFrame in place.  
14. Transfer non-missing values from one DataFrame to another, modifying the latter directly.  
15. Override a DataFrame's values in place, but only where the source DataFrame has non-null data.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise correlation with another DataFrame or Series

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Calculate the pairwise correlation between this DataFrame and another DataFrame or Series.  
2. Determine the correlation coefficients between this DataFrame and another DataFrame or Series.  
3. Compute the correlation matrix for this DataFrame and another DataFrame or Series.  
4. Find the pairwise correlation values between this DataFrame and another DataFrame or Series.  
5. Measure the correlation between this DataFrame and another DataFrame or Series.  
6. Generate pairwise correlation scores between this DataFrame and another DataFrame or Series.  
7. Assess the correlation relationships between this DataFrame and another DataFrame or Series.  
8. Evaluate the pairwise correlations of this DataFrame with another DataFrame or Series.  
9. Identify the correlation measures between this DataFrame and another DataFrame or Series.  
10. Derive the correlation statistics between this DataFrame and another DataFrame or Series.  
11. Check for pairwise correlations between this DataFrame and another DataFrame or Series.  
12. Analyze the correlation between this DataFrame and another DataFrame or Series.  
13. Quantify the pairwise correlations between this DataFrame and another DataFrame or Series.  
14. Compute the inter-correlations between this DataFrame and another DataFrame or Series.  
15. Obtain the correlation values between this DataFrame and another DataFrame or Series.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return a subset of the DataFrame including/excluding columns of specific data types

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Filter the DataFrame to include or exclude columns based on their data types.  
2. Extract a portion of the DataFrame containing or omitting columns with specified data types.  
3. Select columns from the DataFrame by including or excluding certain data types.  
4. Retrieve a subset of the DataFrame that has or lacks columns of particular data types.  
5. Return a DataFrame with columns either included or excluded based on their data types.  
6. Generate a subset of the DataFrame where columns match or do not match given data types.  
7. Isolate columns in the DataFrame by including or excluding specific data types.  
8. Obtain a filtered DataFrame consisting of (or excluding) columns with certain data types.  
9. Create a subset of the DataFrame by keeping or dropping columns of specified data types.  
10. Return a DataFrame slice that includes or excludes columns based on data type criteria.  
11. Produce a DataFrame containing only columns that meet (or do not meet) data type conditions.  
12. Subset the DataFrame to include or exclude columns depending on their data types.  
13. Get a reduced DataFrame with columns selectively included/excluded by data type.  
14. Filter out or retain DataFrame columns based on their data types.  
15. Construct a new DataFrame by including or excluding columns of specified data types.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: check whether each element in the DataFrame is contained in values

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Verify if each element in the DataFrame exists within the specified values.  
2. Determine whether every item in the DataFrame is present in the given values.  
3. Check if all elements in the DataFrame are included in the provided values.  
4. Assess whether each entry in the DataFrame is part of the specified values.  
5. Test if every value in the DataFrame appears in the given set of values.  
6. Evaluate whether all DataFrame elements are contained within the values provided.  
7. Confirm if each cell in the DataFrame is found in the listed values.  
8. Inspect whether every element in the DataFrame belongs to the given values.  
9. Examine if all values in the DataFrame are members of the specified set.  
10. Validate whether each entry in the DataFrame is among the provided values.  
11. Check for the presence of every DataFrame element in the given values.  
12. Query whether each value in the DataFrame exists in the defined set.  
13. Scan the DataFrame to see if all elements are part of the specified values.  
14. Analyze whether every item in the DataFrame is included in the given list.  
15. Identify if each element in the DataFrame is contained within the provided values.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: find duplicate rows in a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "find duplicate rows in a DataFrame":  

1. Identify duplicated rows in the DataFrame.  
2. Locate rows with duplicates in the DataFrame.  
3. Detect duplicate entries in the DataFrame.  
4. Check for repeated rows in the DataFrame.  
5. Find rows that are duplicated in the DataFrame.  
6. Retrieve all duplicate rows from the DataFrame.  
7. Search for duplicate records in the DataFrame.  
8. List all duplicated rows in the DataFrame.  
9. Extract rows that appear more than once in the DataFrame.  
10. Determine which rows are duplicates in the DataFrame.  
11. Flag duplicate rows in the DataFrame.  
12. Discover repeated records in the DataFrame.  
13. Return all duplicate rows present in the DataFrame.  
14. Query the DataFrame for duplicate rows.  
15. Filter and display duplicate rows in the DataFrame.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: truncate a DataFrame before and after some index value

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Trim a DataFrame around a specific index value.  
2. Slice a DataFrame to exclude rows before and after a certain index.  
3. Cut off a DataFrame outside a given index range.  
4. Filter a DataFrame to keep only rows within a specified index interval.  
5. Remove rows from a DataFrame beyond certain index bounds.  
6. Restrict a DataFrame to a particular index range by truncation.  
7. Clip a DataFrame at specified start and end index points.  
8. Drop rows outside a given index threshold in a DataFrame.  
9. Shorten a DataFrame by discarding rows before and after a defined index.  
10. Reduce a DataFrame to only entries between two index values.  
11. Keep only the middle section of a DataFrame based on index.  
12. Exclude DataFrame rows outside a selected index span.  
13. Narrow down a DataFrame to a subset between two index markers.  
14. Crop a DataFrame to rows within a specific index boundary.  
15. Limit a DataFrame to a range of indices, removing the rest.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function to a DataFrame elementwise

=== Response ===
Here are 15 semantically equivalent variations of the instruction "apply a function to a DataFrame elementwise":  

1. Execute a function on each element of a DataFrame.  
2. Perform an operation on every element in a DataFrame.  
3. Apply a custom function to each value in a DataFrame.  
4. Run a function over all elements of a DataFrame.  
5. Process each DataFrame element using a specified function.  
6. Map a function to every cell in a DataFrame.  
7. Iterate over all DataFrame elements and apply a function.  
8. Transform each value in a DataFrame with a given function.  
9. Compute a function for every individual element in a DataFrame.  
10. Evaluate a function on each entry of a DataFrame.  
11. Use a function to modify each element in a DataFrame.  
12. Pass each DataFrame element through a function.  
13. Operate on every value in a DataFrame with a function.  
14. Apply a transformation to each cell in a DataFrame.  
15. Process all DataFrame elements with a function in an elementwise manner.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: apply a function or method to a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "apply a function or method to a DataFrame":  

1. Execute a function on a DataFrame.  
2. Perform a method or function on a DataFrame.  
3. Use a function to transform a DataFrame.  
4. Apply a custom operation to a DataFrame.  
5. Run a function across a DataFrame.  
6. Call a method on a DataFrame.  
7. Process a DataFrame using a function.  
8. Map a function over a DataFrame.  
9. Implement a function on DataFrame elements.  
10. Pass a function to a DataFrame for execution.  
11. Operate on a DataFrame with a given function.  
12. Invoke a function on DataFrame rows or columns.  
13. Compute values in a DataFrame using a function.  
14. Transform DataFrame data by applying a function.  
15. Evaluate a function over a DataFrame's contents.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: convert columns to best possible dtypes

=== Response ===
Here are 15 semantically equivalent variations of the instruction "convert columns to best possible dtypes":  

1. Optimize the data types of the columns.  
2. Convert columns to their most suitable dtypes.  
3. Change column dtypes to the most efficient ones.  
4. Infer and apply the best data types for columns.  
5. Automatically adjust column dtypes for optimal performance.  
6. Update column data types to the most appropriate ones.  
7. Set columns to their ideal dtypes.  
8. Transform columns to the best-fitting data types.  
9. Convert each column to its most efficient dtype.  
10. Improve column dtypes by automatic detection.  
11. Modify dtypes to the best possible for each column.  
12. Adjust data types of columns for better efficiency.  
13. Infer the best dtypes for all columns.  
14. Optimize DataFrame columns by converting dtypes.  
15. Change column types to the most space-efficient dtypes.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute pairwise covariance of columns

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute pairwise covariance of columns":  

1. Calculate the covariance between each pair of columns.  
2. Compute the covariance matrix for all columns.  
3. Determine the pairwise covariances among columns.  
4. Generate a covariance matrix for the dataset columns.  
5. Find the covariance between every two columns.  
6. Measure the pairwise covariance across columns.  
7. Evaluate the covariance for all column pairs.  
8. Construct a covariance matrix from the columns.  
9. Compute covariances between each column combination.  
10. Derive the pairwise column covariances.  
11. Assess the covariance relationships between columns.  
12. Calculate inter-column covariances.  
13. Obtain the covariance matrix for the given columns.  
14. Compute the covariances for every pair of variables in the columns.  
15. Generate pairwise covariance estimates for the columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: return the mode(s) of each column

=== Response ===
Here are 15 semantically equivalent variations of the instruction "return the mode(s) of each column":  

1. Compute the most frequent value(s) for every column.  
2. Find the mode(s) for each column in the DataFrame.  
3. Determine the most common value(s) in every column.  
4. Retrieve the mode(s) for all columns.  
5. Calculate the highest frequency value(s) for each column.  
6. Identify the predominant value(s) in every column.  
7. Extract the mode value(s) from each column.  
8. Return the most repeated value(s) per column.  
9. Get the statistical mode(s) for every column.  
10. Provide the frequentist value(s) for each column.  
11. Output the value(s) that appear most often in each column.  
12. List the mode(s) across all columns.  
13. Display the most occurring value(s) in every column.  
14. Generate the modes for each column in the dataset.  
15. Report the modal value(s) for all columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute numerical data ranks along axis

=== Response ===
Here are 15 semantically equivalent variations of the instruction "compute numerical data ranks along axis":  

1. Rank numerical values along the specified axis.  
2. Assign ranks to the data points along the given axis.  
3. Determine the ordinal ranking of numerical data across the axis.  
4. Calculate the rank of each element along the chosen axis.  
5. Compute the position-based order of values along an axis.  
6. Generate rankings for numerical entries along the axis.  
7. Evaluate the relative ranking of data along the specified dimension.  
8. Obtain the sorted order indices for numerical data along the axis.  
9. Derive rank values for elements in the dataset along an axis.  
10. Produce the ordinal positions of numerical values along the axis.  
11. Compute the rank-ordering of numbers along a given axis.  
12. Assign sequential ranks based on value order along the axis.  
13. Determine the positional ranks of numerical entries along an axis.  
14. Calculate the order of values when ranked along the axis.  
15. Generate a ranked representation of the data along the specified axis.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: generate descriptive statistics of a DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the instruction "generate descriptive statistics of a DataFrame":  

1. Compute summary statistics for the DataFrame.  
2. Display statistical summaries of the DataFrame.  
3. Calculate descriptive statistics for the DataFrame.  
4. Provide an overview of the DataFrame's statistics.  
5. Show key statistical measures of the DataFrame.  
6. Generate a statistical summary of the DataFrame.  
7. Return descriptive analytics for the DataFrame.  
8. Summarize the DataFrame using statistics.  
9. Extract statistical insights from the DataFrame.  
10. Produce a statistical breakdown of the DataFrame.  
11. Obtain summary metrics for the DataFrame.  
12. Retrieve the descriptive statistics of the DataFrame.  
13. Analyze the DataFrame with summary statistics.  
14. Present the descriptive stats for the DataFrame.  
15. Evaluate the DataFrame statistically.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: iterate over DataFrame rows as namedtuples

=== Response ===
Certainly! Here are 15 semantically equivalent variations of the given instruction:  

1. Loop through DataFrame rows as namedtuples.  
2. Iterate over each row in the DataFrame using namedtuples.  
3. Traverse DataFrame rows as namedtuples.  
4. Process DataFrame rows by converting them to namedtuples.  
5. Go through every row in the DataFrame as a namedtuple.  
6. Step through DataFrame rows represented as namedtuples.  
7. Cycle over DataFrame rows, treating them as namedtuples.  
8. Access each row in the DataFrame in the form of namedtuples.  
9. Navigate through DataFrame rows using namedtuples.  
10. Enumerate DataFrame rows as namedtuples.  
11. Scan DataFrame rows by converting them to namedtuples.  
12. Move through DataFrame rows while representing them as namedtuples.  
13. Parse DataFrame rows as namedtuples during iteration.  
14. Run through DataFrame rows and handle them as namedtuples.  
15. Walk through the DataFrame rows, casting them to namedtuples.  

Let me know if you need further refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: get memory usage of each column

=== Response ===
Here are 15 semantically equivalent variations of the instruction "get memory usage of each column":  

1. Retrieve the memory consumption for every column.  
2. Calculate the memory usage per column.  
3. Obtain the memory footprint of each column.  
4. Fetch the memory allocation for all columns.  
5. Determine how much memory each column uses.  
6. Measure the memory usage for every column.  
7. Return the memory utilization of each column.  
8. Extract the memory usage statistics for all columns.  
9. Check the memory consumption column-wise.  
10. Compute the memory usage for individual columns.  
11. Display the memory usage breakdown by column.  
12. Assess the memory requirements for each column.  
13. Report the memory usage for every column.  
14. Enumerate the memory usage per column.  
15. Analyze the memory allocation across all columns.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: check if the DataFrame is empty

=== Response ===
Certainly! Here are 15 semantically equivalent variations of the instruction "check if the DataFrame is empty":  

1. Verify whether the DataFrame has no rows.  
2. Determine if the DataFrame is devoid of data.  
3. Check whether the DataFrame contains zero entries.  
4. Assess if the DataFrame has no records.  
5. Confirm that the DataFrame has no elements.  
6. Test if the DataFrame is unpopulated.  
7. Inspect if the DataFrame is blank.  
8. Check if the DataFrame has an empty structure.  
9. Evaluate whether the DataFrame has no content.  
10. Detect if the DataFrame is without any data.  
11. Examine if the DataFrame is null.  
12. Validate if the DataFrame lacks rows.  
13. Determine whether the DataFrame is not populated.  
14. Check if there are no observations in the DataFrame.  
15. Assess whether the DataFrame has a length of zero.  

Let me know if you'd like any refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: test if two DataFrames are element-wise equal

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Check whether two DataFrames have identical elements.  
2. Verify if two DataFrames are equal element by element.  
3. Determine if all corresponding elements in two DataFrames match.  
4. Compare two DataFrames to see if their elements are the same.  
5. Assess whether two DataFrames contain identical values in all positions.  
6. Test for exact equality between the elements of two DataFrames.  
7. Confirm if two DataFrames are identical in terms of their element values.  
8. Evaluate whether two DataFrames have the same values in every cell.  
9. Check if two DataFrames are indistinguishable based on their element values.  
10. Examine if two DataFrames have matching values at every corresponding position.  
11. Determine whether two DataFrames are fully equivalent in their element-wise values.  
12. Validate if the contents of two DataFrames are exactly the same.  
13. Inspect if two DataFrames have no differences in their element values.  
14. Compare two DataFrames to confirm they are element-wise identical.  
15. Test whether two DataFrames share the exact same values in all entries.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: remove and return a column from the DataFrame

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Delete a column from the DataFrame and return it.  
2. Extract and drop a column from the DataFrame.  
3. Pop a column out of the DataFrame.  
4. Remove a column from the DataFrame and retrieve it.  
5. Take out a column from the DataFrame and return it.  
6. Drop a column from the DataFrame and get its contents.  
7. Eliminate a column from the DataFrame and yield it.  
8. Strip a column from the DataFrame and provide it as output.  
9. Retrieve a column by removing it from the DataFrame.  
10. Pluck a column from the DataFrame and return it.  
11. Cut out a column from the DataFrame and hand it back.  
12. Withdraw a column from the DataFrame and return its values.  
13. Detach a column from the DataFrame and output it.  
14. Lift a column from the DataFrame and pass it back.  
15. Pull out a column from the DataFrame and return it.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: check if all elements are True in each column

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Verify whether all values in every column are True.  
2. Determine if each column contains exclusively True elements.  
3. Check that all entries in every column evaluate to True.  
4. Confirm all columns consist entirely of True values.  
5. Assess whether all elements in each column are True.  
6. Test if every value in all columns is True.  
7. Examine each column to ensure all elements are True.  
8. Inspect whether all items in every column are True.  
9. Validate that all columns have only True entries.  
10. Check for the presence of any non-True values in each column.  
11. Ensure that no column contains elements other than True.  
12. Determine if all columns satisfy the condition of being entirely True.  
13. Evaluate whether all data in every column is True.  
14. Confirm the absence of False or non-True values in all columns.  
15. Check if every column's elements uniformly evaluate to True.
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: check if any element is True in each column

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:  

1. Determine if any value is True in each column.  
2. Verify whether any element evaluates to True per column.  
3. Check for the presence of at least one True value in every column.  
4. Identify if any entry is True for each column.  
5. Assess whether any cell contains True in all columns.  
6. Test if there exists a True value in each column.  
7. Find if any row has a True value for every column.  
8. Confirm if at least one True exists per column.  
9. Detect the presence of any True element column-wise.  
10. Evaluate if each column contains at least one True.  
11. Check if any non-False value exists in every column.  
12. See whether there is any True value across columns.  
13. Inspect if any column contains a True entry.  
14. Determine whether any True values are present per column.  
15. Check column-wise if there is a single True element.  

Let me know if you'd like further refinements!
=== Prompt ===
You are an AI expert in natural language generation. Given an instruction related to pandas API usage, generate 15 semantically equivalent variations of the instruction. Only return a numbered list of the variations.

Instruction: compute the matrix multiplication between DataFrame and another

=== Response ===
Here are 15 semantically equivalent variations of the given instruction:

1. Perform matrix multiplication on the DataFrame with another DataFrame.  
2. Calculate the matrix product of the DataFrame and another DataFrame.  
3. Multiply the DataFrame with another DataFrame using matrix multiplication.  
4. Compute the dot product between the DataFrame and another DataFrame.  
5. Execute matrix multiplication for the DataFrame and another DataFrame.  
6. Determine the matrix multiplication result of the DataFrame and another.  
7. Apply matrix multiplication to the DataFrame and another DataFrame.  
8. Multiply the two DataFrames using matrix multiplication.  
9. Find the matrix product of the given DataFrame and another.  
10. Carry out matrix multiplication between the DataFrame and another.  
11. Use matrix multiplication to combine the DataFrame with another.  
12. Generate the matrix multiplication output of the DataFrame and another.  
13. Compute the dot product of the two DataFrames.  
14. Calculate the matrix product between the two DataFrames.  
15. Perform a dot product operation on the DataFrame and another DataFrame.
